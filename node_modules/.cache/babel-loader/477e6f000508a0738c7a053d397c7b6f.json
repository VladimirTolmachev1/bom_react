{"ast":null,"code":"import _regeneratorRuntime from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getOrderByIdSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateOrderSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(completeOrderSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getOrdersSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(orderCreatingSaga),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(ordersTotalInfoSaga),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(orderCreationgFromCheckoutSaga),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(ordersSaga);\n\nimport { takeLatest, all, call, put, select } from 'redux-saga/effects';\nimport { CHECKOUT__CREATE_ORDER_REQUEST, GET_ORDERS_TOTAL_INFO_REQUEST, GET_ORDER_BY_ID_REQUEST, UPDATE_ORDER_REQUEST, GET_ORDERS_REQUEST, COMPLETE_ORDER } from './orders.types';\nimport { orderStatuses } from '../../constants/orders';\nimport * as actions from './orders.actions';\nimport { normalizeOrders } from './orders.helpers';\nimport OrdersApiService from './orders.api.service';\nimport { orderByIdFromPropsSelector, ordersTotalInfoSelector } from './orders.selectors';\nimport { managedRestaurantIdSelector } from '../restaurants';\nimport { stripeChargeTransactionIdSelector, checkoutItemsForPaymentsSelector, clearCheckout, setCheckoutUi, checkoutStepsValues } from '../checkout';\n\nfunction getOrderByIdSaga(_ref) {\n  var payload, _ref2, order;\n\n  return _regeneratorRuntime.wrap(function getOrderByIdSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(OrdersApiService.getById, payload);\n\n        case 4:\n          _ref2 = _context.sent;\n          order = _ref2.data;\n          _context.next = 8;\n          return put(actions.getOrderByIdSuccess(order));\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put(actions.getOrderByIdError());\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[1, 10]]);\n}\n\nexport function updateOrderSaga(_ref3) {\n  var payload, _ref4, order;\n\n  return _regeneratorRuntime.wrap(function updateOrderSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(OrdersApiService.patch, payload);\n\n        case 4:\n          _ref4 = _context2.sent;\n          order = _ref4.data;\n          _context2.next = 8;\n          return put(actions.updateOrderSuccess(order));\n\n        case 8:\n          _context2.next = 16;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.error(_context2.t0);\n          _context2.next = 15;\n          return put(actions.updateOrderError());\n\n        case 15:\n          return _context2.abrupt(\"return\", Promise.reject(_context2.t0));\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[1, 10]]);\n}\n\nfunction completeOrderSaga(_ref5) {\n  var id, updatePayload, order, _ref6, ordersCompleted, revenue, newRevenue, newOrdersCompleted;\n\n  return _regeneratorRuntime.wrap(function completeOrderSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref5.payload.id;\n          _context3.prev = 1;\n          updatePayload = {\n            id: id,\n            status: orderStatuses.COMPLETE\n          };\n          _context3.next = 5;\n          return call(updateOrderSaga, {\n            payload: updatePayload\n          });\n\n        case 5:\n          _context3.next = 7;\n          return select(orderByIdFromPropsSelector, {\n            orderId: id\n          });\n\n        case 7:\n          order = _context3.sent;\n          _context3.next = 10;\n          return select(ordersTotalInfoSelector);\n\n        case 10:\n          _ref6 = _context3.sent;\n          ordersCompleted = _ref6.ordersCompleted;\n          revenue = _ref6.revenue;\n          newRevenue = revenue + order.total_price;\n          newOrdersCompleted = ordersCompleted + 1;\n          _context3.next = 17;\n          return put(actions.setOrdersTotal({\n            newRevenue: newRevenue,\n            newOrdersCompleted: newOrdersCompleted\n          }));\n\n        case 17:\n          _context3.next = 22;\n          break;\n\n        case 19:\n          _context3.prev = 19;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.error(_context3.t0);\n\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this, [[1, 19]]);\n}\n\nfunction getOrdersSaga(_ref7) {\n  var payload, params, _ref8, resData, _normalizeOrders, byId, allIds;\n\n  return _regeneratorRuntime.wrap(function getOrdersSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          payload = _ref7.payload;\n          _context4.prev = 1;\n          params = payload.params;\n          _context4.next = 5;\n          return call(OrdersApiService.get, {\n            params: params\n          });\n\n        case 5:\n          _ref8 = _context4.sent;\n          resData = _ref8.data;\n          _normalizeOrders = normalizeOrders(resData.data), byId = _normalizeOrders.byId, allIds = _normalizeOrders.allIds;\n          _context4.next = 10;\n          return put(actions.getOrdersSuccess({\n            count: resData.count,\n            byId: byId,\n            allIds: allIds\n          }));\n\n        case 10:\n          _context4.next = 17;\n          break;\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.error(_context4.t0);\n          _context4.next = 17;\n          return put(actions.getOrdersError(_context4.t0));\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this, [[1, 12]]);\n}\n\nexport function orderCreatingSaga(_ref9) {\n  var payload, body, products, restaurantId, transactionId, _ref10, newOrder;\n\n  return _regeneratorRuntime.wrap(function orderCreatingSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          payload = _ref9.payload;\n          _context5.prev = 1;\n          body = payload.paymentDetails;\n          _context5.next = 5;\n          return select(checkoutItemsForPaymentsSelector);\n\n        case 5:\n          products = _context5.sent;\n          _context5.next = 8;\n          return select(managedRestaurantIdSelector);\n\n        case 8:\n          restaurantId = _context5.sent;\n          _context5.next = 11;\n          return select(stripeChargeTransactionIdSelector);\n\n        case 11:\n          transactionId = _context5.sent;\n          body.products = products;\n          body.restaurant_id = restaurantId;\n          body.transaction_id = transactionId;\n          _context5.next = 17;\n          return call(OrdersApiService.create, body);\n\n        case 17:\n          _ref10 = _context5.sent;\n          newOrder = _ref10.data;\n          _context5.next = 21;\n          return put(actions.createOrderSuccess(newOrder));\n\n        case 21:\n          _context5.next = 23;\n          return put(clearCheckout());\n\n        case 23:\n          _context5.next = 31;\n          break;\n\n        case 25:\n          _context5.prev = 25;\n          _context5.t0 = _context5[\"catch\"](1);\n          console.error(_context5.t0);\n          _context5.next = 30;\n          return put(actions.createOrderError(_context5.t0));\n\n        case 30:\n          return _context5.abrupt(\"return\", Promise.reject(_context5.t0));\n\n        case 31:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this, [[1, 25]]);\n}\n\nfunction ordersTotalInfoSaga(_ref11) {\n  var payload, _ref12, data;\n\n  return _regeneratorRuntime.wrap(function ordersTotalInfoSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          payload = _ref11.payload;\n          _context6.prev = 1;\n          _context6.next = 4;\n          return call(OrdersApiService.getTotalInfo, payload);\n\n        case 4:\n          _ref12 = _context6.sent;\n          data = _ref12.data;\n          _context6.next = 8;\n          return put(actions.getOrdersTotalInfoSuccess(data));\n\n        case 8:\n          _context6.next = 15;\n          break;\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.error(_context6.t0);\n          _context6.next = 15;\n          return put(actions.getOrdersTotalInfoError(_context6.t0));\n\n        case 15:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this, [[1, 10]]);\n}\n\nfunction orderCreationgFromCheckoutSaga(action) {\n  return _regeneratorRuntime.wrap(function orderCreationgFromCheckoutSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(orderCreatingSaga, action);\n\n        case 3:\n          _context7.next = 5;\n          return put(setCheckoutUi({\n            activeStep: checkoutStepsValues.ORDER_PLACED\n          }));\n\n        case 5:\n          _context7.next = 10;\n          break;\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, this, [[0, 7]]);\n}\n\nexport function ordersSaga() {\n  return _regeneratorRuntime.wrap(function ordersSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([takeLatest(CHECKOUT__CREATE_ORDER_REQUEST, orderCreationgFromCheckoutSaga), takeLatest(GET_ORDERS_TOTAL_INFO_REQUEST, ordersTotalInfoSaga), takeLatest(GET_ORDER_BY_ID_REQUEST, getOrderByIdSaga), takeLatest(UPDATE_ORDER_REQUEST, updateOrderSaga), takeLatest(GET_ORDERS_REQUEST, getOrdersSaga), takeLatest(COMPLETE_ORDER, completeOrderSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, this);\n}\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getOrderByIdSaga, \"getOrderByIdSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js\");\n  reactHotLoader.register(updateOrderSaga, \"updateOrderSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js\");\n  reactHotLoader.register(completeOrderSaga, \"completeOrderSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js\");\n  reactHotLoader.register(getOrdersSaga, \"getOrdersSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js\");\n  reactHotLoader.register(orderCreatingSaga, \"orderCreatingSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js\");\n  reactHotLoader.register(ordersTotalInfoSaga, \"ordersTotalInfoSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js\");\n  reactHotLoader.register(orderCreationgFromCheckoutSaga, \"orderCreationgFromCheckoutSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js\");\n  reactHotLoader.register(ordersSaga, \"ordersSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/orders/orders.sagas.js"],"names":["getOrderByIdSaga","updateOrderSaga","completeOrderSaga","getOrdersSaga","orderCreatingSaga","ordersTotalInfoSaga","orderCreationgFromCheckoutSaga","ordersSaga","takeLatest","all","call","put","select","CHECKOUT__CREATE_ORDER_REQUEST","GET_ORDERS_TOTAL_INFO_REQUEST","GET_ORDER_BY_ID_REQUEST","UPDATE_ORDER_REQUEST","GET_ORDERS_REQUEST","COMPLETE_ORDER","orderStatuses","actions","normalizeOrders","OrdersApiService","orderByIdFromPropsSelector","ordersTotalInfoSelector","managedRestaurantIdSelector","stripeChargeTransactionIdSelector","checkoutItemsForPaymentsSelector","clearCheckout","setCheckoutUi","checkoutStepsValues","payload","getById","order","data","getOrderByIdSuccess","console","error","getOrderByIdError","patch","updateOrderSuccess","updateOrderError","Promise","reject","id","updatePayload","status","COMPLETE","orderId","ordersCompleted","revenue","newRevenue","total_price","newOrdersCompleted","setOrdersTotal","params","get","resData","byId","allIds","getOrdersSuccess","count","getOrdersError","body","paymentDetails","products","restaurantId","transactionId","restaurant_id","transaction_id","create","newOrder","createOrderSuccess","createOrderError","getTotalInfo","getOrdersTotalInfoSuccess","getOrdersTotalInfoError","action","activeStep","ORDER_PLACED"],"mappings":"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","sourcesContent":["import { takeLatest, all, call, put, select } from 'redux-saga/effects';\n\nimport {\n  CHECKOUT__CREATE_ORDER_REQUEST,\n  GET_ORDERS_TOTAL_INFO_REQUEST,\n  GET_ORDER_BY_ID_REQUEST,\n  UPDATE_ORDER_REQUEST,\n  GET_ORDERS_REQUEST,\n  COMPLETE_ORDER,\n} from './orders.types';\nimport { orderStatuses } from '../../constants/orders';\nimport * as actions from './orders.actions';\nimport { normalizeOrders } from './orders.helpers';\nimport OrdersApiService from './orders.api.service';\nimport {\n  orderByIdFromPropsSelector,\n  ordersTotalInfoSelector,\n} from './orders.selectors';\nimport { managedRestaurantIdSelector } from '../restaurants';\n\nimport {\n  stripeChargeTransactionIdSelector,\n  checkoutItemsForPaymentsSelector,\n  clearCheckout,\n  setCheckoutUi,\n  checkoutStepsValues,\n} from '../checkout';\n\nfunction* getOrderByIdSaga({ payload }) {\n  try {\n    const { data: order } = yield call(OrdersApiService.getById, payload);\n    yield put(actions.getOrderByIdSuccess(order));\n  } catch (e) {\n    console.error(e);\n    yield put(actions.getOrderByIdError());\n  }\n}\n\nexport function* updateOrderSaga({ payload }) {\n  try {\n    const { data: order } = yield call(OrdersApiService.patch, payload);\n\n    yield put(actions.updateOrderSuccess(order));\n  } catch (e) {\n    console.error(e);\n    yield put(actions.updateOrderError());\n    return Promise.reject(e);\n  }\n}\n\nfunction* completeOrderSaga({ payload: { id } }) {\n  try {\n    const updatePayload = {\n      id,\n      status: orderStatuses.COMPLETE,\n    };\n\n    yield call(updateOrderSaga, { payload: updatePayload });\n\n    const order = yield select(orderByIdFromPropsSelector, { orderId: id });\n    const { ordersCompleted, revenue } = yield select(ordersTotalInfoSelector);\n\n    const newRevenue = revenue + order.total_price;\n    const newOrdersCompleted = ordersCompleted + 1;\n\n    yield put(actions.setOrdersTotal({ newRevenue, newOrdersCompleted }));\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction* getOrdersSaga({ payload }) {\n  try {\n    const { params } = payload;\n    const { data: resData } = yield call(OrdersApiService.get, { params });\n    const { byId, allIds } = normalizeOrders(resData.data);\n\n    yield put(\n      actions.getOrdersSuccess({\n        count: resData.count,\n        byId,\n        allIds,\n      }),\n    );\n  } catch (e) {\n    console.error(e);\n    yield put(actions.getOrdersError(e));\n  }\n}\n\nexport function* orderCreatingSaga({ payload }) {\n  try {\n    const body = payload.paymentDetails;\n    const products = yield select(checkoutItemsForPaymentsSelector);\n\n    const restaurantId = yield select(managedRestaurantIdSelector);\n    const transactionId = yield select(stripeChargeTransactionIdSelector);\n\n    body.products = products;\n    body.restaurant_id = restaurantId;\n    body.transaction_id = transactionId;\n\n    const { data: newOrder } = yield call(OrdersApiService.create, body);\n\n    yield put(actions.createOrderSuccess(newOrder));\n    yield put(clearCheckout());\n  } catch (e) {\n    console.error(e);\n    yield put(actions.createOrderError(e));\n    return Promise.reject(e);\n  }\n}\n\nfunction* ordersTotalInfoSaga({ payload }) {\n  try {\n    const { data } = yield call(OrdersApiService.getTotalInfo, payload);\n    yield put(actions.getOrdersTotalInfoSuccess(data));\n  } catch (e) {\n    console.error(e);\n    yield put(actions.getOrdersTotalInfoError(e));\n  }\n}\n\nfunction* orderCreationgFromCheckoutSaga(action) {\n  try {\n    yield call(orderCreatingSaga, action);\n    yield put(setCheckoutUi({ activeStep: checkoutStepsValues.ORDER_PLACED }));\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function* ordersSaga() {\n  yield all([\n    takeLatest(CHECKOUT__CREATE_ORDER_REQUEST, orderCreationgFromCheckoutSaga),\n    takeLatest(GET_ORDERS_TOTAL_INFO_REQUEST, ordersTotalInfoSaga),\n    takeLatest(GET_ORDER_BY_ID_REQUEST, getOrderByIdSaga),\n    takeLatest(UPDATE_ORDER_REQUEST, updateOrderSaga),\n    takeLatest(GET_ORDERS_REQUEST, getOrdersSaga),\n    takeLatest(COMPLETE_ORDER, completeOrderSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}