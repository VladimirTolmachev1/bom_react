{"ast":null,"code":"import _defineProperty from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/AppSelect/AppSelect.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { OutlinedInput } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { autobind } from 'core-decorators';\nexport var AppSelect = (_class =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(AppSelect, _PureComponent);\n\n  function AppSelect() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AppSelect);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AppSelect)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.allValues = _this.props.options.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    return _this;\n  }\n\n  _createClass(AppSelect, [{\n    key: \"mapOptions\",\n    value: function mapOptions() {\n      var _this2 = this;\n\n      var options = this.props.options;\n      return options.map(function (option) {\n        return React.createElement(MenuItem, {\n          key: option.value,\n          value: option.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, _this2.handleRenderOption(option));\n      });\n    } // todo: separate renderOption and renderSelectedOption logic\n\n  }, {\n    key: \"handleRenderOption\",\n    value: function handleRenderOption(option) {\n      var useGlobalOptionrender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // if (!option) return null;\n      if (typeof option.renderName === 'function') {\n        return option.renderName(option);\n      }\n\n      var renderOption = this.props.renderOption;\n\n      if (useGlobalOptionrender && typeof renderOption === 'function') {\n        return renderOption(option);\n      }\n\n      return option.name;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      var onChange = this.props.onChange;\n      var _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name;\n      onChange(_defineProperty({}, name, value));\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event) {\n      var onFocus = this.props.onFocus;\n      onFocus && onFocus(event);\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(event) {\n      var onBlur = this.props.onBlur;\n      onBlur && onBlur(event);\n    }\n  }, {\n    key: \"getOptionPreviewByValue\",\n    value: function getOptionPreviewByValue(val) {\n      if (!val) {\n        return val;\n      }\n\n      var option = this.props.options.find(function (_ref2) {\n        var value = _ref2.value;\n        return value === val;\n      });\n      return this.handleRenderOption(option, false);\n    }\n  }, {\n    key: \"defaultRenderValue\",\n    value: function defaultRenderValue(selected) {\n      var multiple = this.props.multiple;\n\n      if (!multiple) {\n        return this.getOptionPreviewByValue(selected);\n      }\n\n      var toJoin = selected.map(this.getOptionPreviewByValue);\n      return toJoin.join(', ');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          label = _this$props.label,\n          className = _this$props.className,\n          name = _this$props.name,\n          error = _this$props.error,\n          disabled = _this$props.disabled,\n          required = _this$props.required,\n          withoutNone = _this$props.withoutNone,\n          outlined = _this$props.outlined,\n          fullWidth = _this$props.fullWidth,\n          multiple = _this$props.multiple,\n          canSelectAll = _this$props.canSelectAll,\n          renderValue = _this$props.renderValue,\n          extraOptions = _this$props.extraOptions,\n          labelClassName = _this$props.labelClassName,\n          selectClasses = _this$props.selectClasses,\n          labelClasses = _this$props.labelClasses,\n          input = _this$props.input;\n      var inputComponent = input;\n\n      if (!inputComponent && outlined) {\n        inputComponent = React.createElement(OutlinedInput, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(FormControl, {\n        required: required,\n        className: className,\n        fullWidth: fullWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, label && React.createElement(InputLabel, {\n        htmlFor: name,\n        className: labelClassName,\n        classes: labelClasses,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, label), React.createElement(Select, {\n        error: error,\n        required: required,\n        disabled: disabled,\n        name: name,\n        value: value,\n        renderValue: renderValue || this.defaultRenderValue,\n        multiple: multiple,\n        input: inputComponent,\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        classes: selectClasses,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, !withoutNone && React.createElement(MenuItem, {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"em\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"None\")), multiple && canSelectAll && React.createElement(MenuItem, {\n        value: \"__SELECT_ALL_VALUES\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"em\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Select all\")), extraOptions, this.mapOptions()));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return AppSelect;\n}(PureComponent), (_applyDecoratedDescriptor(_class.prototype, \"onChange\", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, \"onChange\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"onFocus\", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, \"onFocus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"onBlur\", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, \"onBlur\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getOptionPreviewByValue\", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, \"getOptionPreviewByValue\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"defaultRenderValue\", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, \"defaultRenderValue\"), _class.prototype)), _class);\nAppSelect.propTypes = {\n  className: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  value: PropTypes.any,\n  required: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  withoutNone: PropTypes.bool\n};\nAppSelect.defaultProps = {\n  withoutNone: false,\n  // eslint-disable-next-line react/default-props-match-prop-types\n  options: []\n};\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(AppSelect, \"AppSelect\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/AppSelect/AppSelect.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/AppSelect/AppSelect.js"],"names":["React","PureComponent","PropTypes","FormControl","Select","InputLabel","OutlinedInput","MenuItem","autobind","AppSelect","allValues","props","options","map","value","option","handleRenderOption","useGlobalOptionrender","renderName","renderOption","name","event","onChange","target","onFocus","onBlur","val","find","selected","multiple","getOptionPreviewByValue","toJoin","join","label","className","error","disabled","required","withoutNone","outlined","fullWidth","canSelectAll","renderValue","extraOptions","labelClassName","selectClasses","labelClasses","input","inputComponent","defaultRenderValue","mapOptions","propTypes","string","func","isRequired","any","bool","array","defaultProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { OutlinedInput } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { autobind } from 'core-decorators';\n\nexport class AppSelect extends PureComponent {\n  allValues = this.props.options.map(({ value }) => value);\n\n  mapOptions() {\n    const { options } = this.props;\n\n    return options.map(option => {\n      return (\n        <MenuItem key={option.value} value={option.value}>\n          {this.handleRenderOption(option)}\n        </MenuItem>\n      );\n    });\n  }\n\n  // todo: separate renderOption and renderSelectedOption logic\n  handleRenderOption(option, useGlobalOptionrender = true) {\n    // if (!option) return null;\n\n    if (typeof option.renderName === 'function') {\n      return option.renderName(option);\n    }\n\n    const { renderOption } = this.props;\n\n    if (useGlobalOptionrender && typeof renderOption === 'function') {\n      return renderOption(option);\n    }\n\n    return option.name;\n  }\n\n  @autobind\n  onChange(event) {\n    const { onChange } = this.props;\n    const { value, name } = event.target;\n\n    onChange({ [name]: value });\n  }\n\n  @autobind\n  onFocus(event) {\n    const { onFocus } = this.props;\n    onFocus && onFocus(event);\n  }\n\n  @autobind\n  onBlur(event) {\n    const { onBlur } = this.props;\n    onBlur && onBlur(event);\n  }\n\n  @autobind\n  getOptionPreviewByValue(val) {\n    if (!val) {\n      return val;\n    }\n\n    const option = this.props.options.find(({ value }) => value === val);\n\n    return this.handleRenderOption(option, false);\n  }\n\n  @autobind\n  defaultRenderValue(selected) {\n    const { multiple } = this.props;\n\n    if (!multiple) {\n      return this.getOptionPreviewByValue(selected);\n    }\n\n    const toJoin = selected.map(this.getOptionPreviewByValue);\n\n    return toJoin.join(', ');\n  }\n\n  render() {\n    const {\n      value,\n      label,\n      className,\n      name,\n      error,\n      disabled,\n      required,\n      withoutNone,\n      outlined,\n      fullWidth,\n      multiple,\n      canSelectAll,\n      renderValue,\n      extraOptions,\n      labelClassName,\n      selectClasses,\n      labelClasses,\n      input,\n    } = this.props;\n\n    let inputComponent = input;\n\n    if (!inputComponent && outlined) {\n      inputComponent = <OutlinedInput />;\n    }\n\n    return (\n      <FormControl\n        required={required}\n        className={className}\n        fullWidth={fullWidth}>\n        {label && (\n          <InputLabel\n            htmlFor={name}\n            className={labelClassName}\n            classes={labelClasses}>\n            {label}\n          </InputLabel>\n        )}\n\n        <Select\n          error={error}\n          required={required}\n          disabled={disabled}\n          name={name}\n          value={value}\n          renderValue={renderValue || this.defaultRenderValue}\n          multiple={multiple}\n          input={inputComponent}\n          onChange={this.onChange}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n          classes={selectClasses}>\n          {!withoutNone && (\n            <MenuItem value=\"\">\n              <em>None</em>\n            </MenuItem>\n          )}\n\n          {multiple && canSelectAll && (\n            <MenuItem value=\"__SELECT_ALL_VALUES\">\n              <em>Select all</em>\n            </MenuItem>\n          )}\n\n          {extraOptions}\n\n          {this.mapOptions()}\n        </Select>\n      </FormControl>\n    );\n  }\n}\n\nAppSelect.propTypes = {\n  className: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  value: PropTypes.any,\n  required: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  withoutNone: PropTypes.bool,\n};\n\nAppSelect.defaultProps = {\n  withoutNone: false,\n  // eslint-disable-next-line react/default-props-match-prop-types\n  options: [],\n};\n"]},"metadata":{},"sourceType":"module"}