{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.testReset = testReset;\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n/* eslint-disable camelcase */\n// This variable will be true once the server-side hydration is completed.\n\n\nvar hydrationCompleted = false;\n\nfunction useMounted() {\n  var mountedRef = _react.default.useRef(false);\n\n  _react.default.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  return mountedRef.current;\n}\n\nfunction unstable_useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var query = queryInput.replace('@media ', '');\n  var _options$defaultMatch = options.defaultMatches,\n      defaultMatchesInput = _options$defaultMatch === void 0 ? false : _options$defaultMatch,\n      _options$noSsr = options.noSsr,\n      noSsr = _options$noSsr === void 0 ? false : _options$noSsr,\n      _options$ssrMatchMedi = options.ssrMatchMedia,\n      ssrMatchMedia = _options$ssrMatchMedi === void 0 ? null : _options$ssrMatchMedi;\n  var defaultMatches = defaultMatchesInput;\n  var mounted = useMounted();\n\n  if (mounted) {// Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n  } else if (hydrationCompleted || noSsr) {\n    defaultMatches = window.matchMedia(query).matches;\n  } else if (ssrMatchMedia) {\n    defaultMatches = ssrMatchMedia(query).matches;\n  } // Early exit for server-side rendering performance.\n\n  /* istanbul ignore if */\n\n\n  if (typeof window === 'undefined') {\n    return defaultMatches;\n  }\n\n  var _React$useState = _react.default.useState(defaultMatches),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      matches = _React$useState2[0],\n      setMatches = _React$useState2[1];\n\n  _react.default.useEffect(function () {\n    hydrationCompleted = true;\n    var queryList = window.matchMedia(query);\n\n    if (matches !== queryList.matches) {\n      setMatches(queryList.matches);\n    }\n\n    function handleMatchesChange(event) {\n      setMatches(event.matches);\n    }\n\n    queryList.addListener(handleMatchesChange);\n    return function () {\n      queryList.removeListener(handleMatchesChange);\n    };\n  }, [query]);\n\n  return matches;\n}\n\nfunction testReset() {\n  hydrationCompleted = false;\n}\n\nvar _default = unstable_useMediaQuery;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}