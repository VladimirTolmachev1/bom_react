{"ast":null,"code":"import _toConsumableArray from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nexport var ValidationService =\n/*#__PURE__*/\nfunction () {\n  function ValidationService() {\n    _classCallCheck(this, ValidationService);\n  }\n\n  _createClass(ValidationService, null, [{\n    key: \"validate\",\n    value: function validate(type) {// let result = ValidationService[type](rest);\n    }\n  }, {\n    key: \"exist\",\n    value: function exist(value) {\n      return ![undefined, null].includes(value);\n    }\n  }, {\n    key: \"validatePhone\",\n    value: function validatePhone(value) {\n      var phoneRegExpr = /\\(\\d{3}\\)\\s\\d{3}-\\d{4}/;\n      return phoneRegExpr.test(value);\n    }\n  }, {\n    key: \"validateChain\",\n    value: function validateChain(chain) {\n      return chain.every(function (_ref) {\n        var type = _ref.type,\n            args = _ref.args;\n        return ValidationService[type].apply(ValidationService, _toConsumableArray(args));\n      });\n    }\n  }, {\n    key: \"number\",\n    value: function number(value) {\n      var numericRegExpr = /^[+-]?\\d*\\.?\\d+(?:[Ee][+-]?\\d+)?$/;\n      return numericRegExpr.test(value);\n    }\n  }, {\n    key: \"url\",\n    value: function url(value) {\n      var urlRegExpr = /[-a-zA-Z0-9@:%_+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_+.~#?&//=]*)?/gi;\n      return urlRegExpr.test(value);\n    }\n  }, {\n    key: \"maxLength\",\n    value: function maxLength(_ref2) {\n      var string = _ref2.string,\n          length = _ref2.length;\n      return string.length <= length;\n    }\n  }, {\n    key: \"phone\",\n    value: function phone(str) {\n      var regExpr = /^\\+\\d{10}$/;\n      return regExpr.test(str);\n    }\n  }, {\n    key: \"postalCode\",\n    value: function postalCode(str) {\n      var regExpr = /\\d{5}/;\n      return regExpr.test(str);\n    }\n  }, {\n    key: \"email\",\n    value: function email(str) {\n      var emailRegExpr = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n      return emailRegExpr.test(str);\n    }\n  }]);\n\n  return ValidationService;\n}();\nValidationService.validationTypes = ['maxLength', 'notNullOrEmpty', 'phone', 'postalCode', 'email'];\n\nValidationService.notNullOrEmpty = function (value) {\n  return ![null, undefined].includes(value);\n};\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ValidationService, \"ValidationService\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/services/ValidationService/ValidationService.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/services/ValidationService/ValidationService.js"],"names":["ValidationService","type","value","undefined","includes","phoneRegExpr","test","chain","every","args","numericRegExpr","urlRegExpr","string","length","str","regExpr","emailRegExpr","validationTypes","notNullOrEmpty"],"mappings":";;;;;;;;;;AAAA,WAAaA,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,6BASoBC,IATpB,EASmC,CAC3B;AACH;AAXL;AAAA;AAAA,0BAaiBC,KAbjB,EAawB;AAChB,aAAO,CAAC,CAACC,SAAD,EAAY,IAAZ,EAAkBC,QAAlB,CAA2BF,KAA3B,CAAR;AACH;AAfL;AAAA;AAAA,kCAiByBA,KAjBzB,EAiBgC;AACxB,UAAMG,YAAY,GAAG,wBAArB;AAEA,aAAOA,YAAY,CAACC,IAAb,CAAkBJ,KAAlB,CAAP;AACH;AArBL;AAAA;AAAA,kCAuByBK,KAvBzB,EAuBgC;AACxB,aAAOA,KAAK,CAACC,KAAN,CAAY;AAAA,YAAEP,IAAF,QAAEA,IAAF;AAAA,YAAQQ,IAAR,QAAQA,IAAR;AAAA,eAAkBT,iBAAiB,CAACC,IAAD,CAAjB,OAAAD,iBAAiB,qBAAUS,IAAV,EAAnC;AAAA,OAAZ,CAAP;AACH;AAzBL;AAAA;AAAA,2BA2BkBP,KA3BlB,EA2ByB;AACjB,UAAMQ,cAAc,GAAG,mCAAvB;AAEA,aAAOA,cAAc,CAACJ,IAAf,CAAoBJ,KAApB,CAAP;AACH;AA/BL;AAAA;AAAA,wBAiCeA,KAjCf,EAiCsB;AACd,UAAMS,UAAU,GAAG,iFAAnB;AAEA,aAAOA,UAAU,CAACL,IAAX,CAAgBJ,KAAhB,CAAP;AACH;AArCL;AAAA;AAAA,qCAuCuC;AAAA,UAAjBU,MAAiB,SAAjBA,MAAiB;AAAA,UAATC,MAAS,SAATA,MAAS;AAC/B,aAAOD,MAAM,CAACC,MAAP,IAAiBA,MAAxB;AACH;AAzCL;AAAA;AAAA,0BA2CiBC,GA3CjB,EA2CsB;AACd,UAAIC,OAAO,GAAG,YAAd;AACA,aAAOA,OAAO,CAACT,IAAR,CAAaQ,GAAb,CAAP;AACH;AA9CL;AAAA;AAAA,+BAkDsBA,GAlDtB,EAkD2B;AACnB,UAAIC,OAAO,GAAG,OAAd;AAEA,aAAOA,OAAO,CAACT,IAAR,CAAaQ,GAAb,CAAP;AACH;AAtDL;AAAA;AAAA,0BAwDiBA,GAxDjB,EAwDsB;AACd,UAAME,YAAY,GAAG,2CAArB;AAEA,aAAOA,YAAY,CAACV,IAAb,CAAkBQ,GAAlB,CAAP;AACH;AA5DL;;AAAA;AAAA;AAAad,iB,CACFiB,e,GAAkB,CACrB,WADqB,EAErB,gBAFqB,EAGrB,OAHqB,EAIrB,YAJqB,EAKrB,OALqB,C;;AADhBjB,iB,CAgDFkB,c,GAAiB,UAAChB,KAAD;AAAA,SAAW,CAAC,CAAC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,CAA2BF,KAA3B,CAAZ;AAAA,C;;;;;;;;;;;;;0BAhDfF,iB","sourcesContent":["export class ValidationService {\n    static validationTypes = [\n        'maxLength',\n        'notNullOrEmpty',\n        'phone',\n        'postalCode',\n        'email'\n    ];\n\n    static validate(type, ...rest) {\n        // let result = ValidationService[type](rest);\n    }\n\n    static exist(value) {\n        return ![undefined, null].includes(value);\n    }\n\n    static validatePhone(value) {\n        const phoneRegExpr = /\\(\\d{3}\\)\\s\\d{3}-\\d{4}/\n\n        return phoneRegExpr.test(value);\n    }\n\n    static validateChain(chain) {\n        return chain.every(({type, args}) => ValidationService[type](...args));\n    }\n\n    static number(value) {\n        const numericRegExpr = /^[+-]?\\d*\\.?\\d+(?:[Ee][+-]?\\d+)?$/;\n\n        return numericRegExpr.test(value);\n    }\n\n    static url(value) {\n        const urlRegExpr = /[-a-zA-Z0-9@:%_+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_+.~#?&//=]*)?/gi;\n\n        return urlRegExpr.test(value);\n    }\n\n    static maxLength({string, length}) {\n        return string.length <= length;\n    }\n\n    static phone(str) {\n        let regExpr = /^\\+\\d{10}$/;\n        return regExpr.test(str);\n    }\n\n    static notNullOrEmpty = (value) => ![null, undefined].includes(value);\n\n    static postalCode(str) {\n        let regExpr = /\\d{5}/;\n\n        return regExpr.test(str);\n    }\n\n    static email(str) {\n        const emailRegExpr = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n\n        return emailRegExpr.test(str);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}