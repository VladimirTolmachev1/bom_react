{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { SET_THEME_COLOR, SIGN_IN_REQUEST, SIGN_IN_SUCCESS, SIGN_IN_ERROR, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_ERROR, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_ERROR, DICTIONARY_GET_REQUEST, DICTIONARY_GET_SUCCESS, DICTIONARY_GET_ERROR, SIGN_OUT, API_REQUESTS_ABORT, LOG_REQUEST, dictionaryResource } from './';\nimport { CALL_API } from '../store/middleware/api';\nexport function setThemeColor(color, bgColor) {\n  return {\n    type: SET_THEME_COLOR,\n    color: color,\n    bgColor: bgColor\n  };\n}\nexport function signIn(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/auth/login',\n      method: 'POST',\n      types: [SIGN_IN_REQUEST, SIGN_IN_SUCCESS, SIGN_IN_ERROR],\n      logger: {\n        success: 'Successfully signed in',\n        error: 'Error during sign in'\n      },\n      body: body\n    }\n  };\n}\nexport function forgotPassword(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/password/email',\n      method: 'POST',\n      types: [FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_ERROR],\n      logger: {\n        success: 'Please, check your email to follow next instructions',\n        error: 'Error during password recovery'\n      },\n      body: body\n    }\n  };\n}\nexport function resetPassword(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/password/reset',\n      method: 'POST',\n      types: [RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_ERROR],\n      logger: {\n        success: 'Password was successfully reset',\n        error: 'Error during password reset'\n      },\n      body: body\n    }\n  };\n}\nexport function getDictionaries() {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: dictionaryResource,\n      method: 'GET',\n      types: [DICTIONARY_GET_REQUEST, DICTIONARY_GET_SUCCESS, DICTIONARY_GET_ERROR]\n    }\n  };\n}\nexport function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [SIGN_IN_REQUEST, FORGOT_PASSWORD_REQUEST]\n  };\n}\nexport function makeApiRequest(_ref) {\n  var type = _ref.type,\n      rest = _objectWithoutProperties(_ref, [\"type\"]);\n\n  return _objectSpread({\n    type: type\n  }, rest);\n}\nexport function logRequest(_ref2) {\n  var request = _ref2.request,\n      response = _ref2.response;\n  return {\n    type: LOG_REQUEST,\n    request: request,\n    response: response\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(setThemeColor, \"setThemeColor\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  reactHotLoader.register(signIn, \"signIn\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  reactHotLoader.register(forgotPassword, \"forgotPassword\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  reactHotLoader.register(resetPassword, \"resetPassword\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  reactHotLoader.register(getDictionaries, \"getDictionaries\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  reactHotLoader.register(signOut, \"signOut\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  reactHotLoader.register(makeApiRequest, \"makeApiRequest\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  reactHotLoader.register(logRequest, \"logRequest\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/modules/core.actions.js"],"names":["SET_THEME_COLOR","SIGN_IN_REQUEST","SIGN_IN_SUCCESS","SIGN_IN_ERROR","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","DICTIONARY_GET_REQUEST","DICTIONARY_GET_SUCCESS","DICTIONARY_GET_ERROR","SIGN_OUT","API_REQUESTS_ABORT","LOG_REQUEST","dictionaryResource","CALL_API","setThemeColor","color","bgColor","type","signIn","body","request","endpoint","method","types","logger","success","error","forgotPassword","resetPassword","getDictionaries","signOut","abortPageRequests","requestTypes","makeApiRequest","rest","logRequest","response"],"mappings":"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","sourcesContent":["import {\n    SET_THEME_COLOR,\n    SIGN_IN_REQUEST,\n    SIGN_IN_SUCCESS,\n    SIGN_IN_ERROR,\n    FORGOT_PASSWORD_REQUEST,\n    FORGOT_PASSWORD_SUCCESS,\n    FORGOT_PASSWORD_ERROR,\n    RESET_PASSWORD_REQUEST,\n    RESET_PASSWORD_SUCCESS,\n    RESET_PASSWORD_ERROR,\n    DICTIONARY_GET_REQUEST,\n    DICTIONARY_GET_SUCCESS,\n    DICTIONARY_GET_ERROR,\n    SIGN_OUT,\n    API_REQUESTS_ABORT,\n    LOG_REQUEST,\n    dictionaryResource\n} from './';\n\nimport { CALL_API } from '../store/middleware/api';\n\nexport function setThemeColor(color, bgColor) {\n    return {\n        type: SET_THEME_COLOR,\n        color,\n        bgColor\n    };\n}\n\nexport function signIn(body) {\n    return {\n        type: CALL_API,\n        request: {\n            endpoint: '/auth/login',\n            method: 'POST',\n            types: [SIGN_IN_REQUEST, SIGN_IN_SUCCESS, SIGN_IN_ERROR],\n            logger: {\n                success: 'Successfully signed in',\n                error: 'Error during sign in'\n            },\n            body\n        }\n    };\n}\n\nexport function forgotPassword(body) {\n    return {\n        type: CALL_API,\n        request: {\n            endpoint: '/password/email',\n            method: 'POST',\n            types: [\n                FORGOT_PASSWORD_REQUEST,\n                FORGOT_PASSWORD_SUCCESS,\n                FORGOT_PASSWORD_ERROR\n            ],\n            logger: {\n                success: 'Please, check your email to follow next instructions',\n                error: 'Error during password recovery'\n            },\n            body\n        }\n    };\n}\n\nexport function resetPassword(body) {\n    return {\n        type: CALL_API,\n        request: {\n            endpoint: '/password/reset',\n            method: 'POST',\n            types: [\n                RESET_PASSWORD_REQUEST,\n                RESET_PASSWORD_SUCCESS,\n                RESET_PASSWORD_ERROR\n            ],\n            logger: {\n                success: 'Password was successfully reset',\n                error: 'Error during password reset'\n            },\n            body\n        }\n    };\n}\n\nexport function getDictionaries() {\n    return {\n        type: CALL_API,\n        request: {\n            endpoint: dictionaryResource,\n            method: 'GET',\n            types: [\n                DICTIONARY_GET_REQUEST,\n                DICTIONARY_GET_SUCCESS,\n                DICTIONARY_GET_ERROR\n            ]\n        }\n    };\n}\n\nexport function signOut() {\n    return {\n        type: SIGN_OUT\n    };\n}\n\nexport function abortPageRequests() {\n    return {\n        type: API_REQUESTS_ABORT,\n        requestTypes: [SIGN_IN_REQUEST, FORGOT_PASSWORD_REQUEST]\n    };\n}\n\n\nexport function makeApiRequest({type, ...rest}) {\n    return {\n        type,\n        ...rest\n    }\n}\n\nexport function logRequest({request, response}) {\n    return {\n        type: LOG_REQUEST,\n        request,\n        response\n    }\n}"]},"metadata":{},"sourceType":"module"}