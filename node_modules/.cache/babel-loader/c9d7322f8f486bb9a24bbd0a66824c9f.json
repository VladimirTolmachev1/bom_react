{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { ValidationService } from '../../../services';\nexport var restaurantModalValidation = function restaurantModalValidation(values) {\n  var errors = {};\n  var requiredFields = ['agent_name', 'restaurant_name', 'manager_name', 'manager_email', 'cuisine_type', 'subscription', 'street_address', 'city', 'state', 'zipcode', 'delivery_method'];\n  var phonesFields = ['phone_number', 'phone_number2'];\n  requiredFields.forEach(function (field) {\n    if (!values[field]) {\n      errors[field] = 'Required';\n    }\n  });\n\n  if (!ValidationService.email(values.manager_email)) {\n    errors.manager_email = 'Invalid email address';\n  }\n\n  if (values.delivery_email && !ValidationService.email(values.delivery_email)) {\n    errors.delivery_email = 'Invalid email address';\n  }\n\n  phonesFields.forEach(function (name) {\n    if (ValidationService.exist(values[name]) && !ValidationService.validatePhone(values[name])) {\n      errors[name] = 'Invalid phone';\n    }\n  });\n  return errors;\n};\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(restaurantModalValidation, \"restaurantModalValidation\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantModal/modules/restaurantsModal.validation.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantModal/modules/restaurantsModal.validation.js"],"names":["ValidationService","restaurantModalValidation","values","errors","requiredFields","phonesFields","forEach","field","email","manager_email","delivery_email","name","exist","validatePhone"],"mappings":";;;;;AAAA,SAASA,iBAAT,QAAkC,mBAAlC;AAEA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAC,MAAM,EAAI;AACjD,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,cAAc,GAAG,CACrB,YADqB,EAErB,iBAFqB,EAGrB,cAHqB,EAIrB,eAJqB,EAKrB,cALqB,EAMrB,cANqB,EAOrB,gBAPqB,EAQrB,MARqB,EASrB,OATqB,EAUrB,SAVqB,EAWrB,iBAXqB,CAAvB;AAcA,MAAMC,YAAY,GAAG,CAAC,cAAD,EAAiB,eAAjB,CAArB;AAEAD,EAAAA,cAAc,CAACE,OAAf,CAAuB,UAAAC,KAAK,EAAI;AAC9B,QAAI,CAACL,MAAM,CAACK,KAAD,CAAX,EAAoB;AAClBJ,MAAAA,MAAM,CAACI,KAAD,CAAN,GAAgB,UAAhB;AACD;AACF,GAJD;;AAMA,MAAI,CAACP,iBAAiB,CAACQ,KAAlB,CAAwBN,MAAM,CAACO,aAA/B,CAAL,EAAoD;AAClDN,IAAAA,MAAM,CAACM,aAAP,GAAuB,uBAAvB;AACD;;AAED,MACEP,MAAM,CAACQ,cAAP,IACA,CAACV,iBAAiB,CAACQ,KAAlB,CAAwBN,MAAM,CAACQ,cAA/B,CAFH,EAGE;AACAP,IAAAA,MAAM,CAACO,cAAP,GAAwB,uBAAxB;AACD;;AAEDL,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAAAK,IAAI,EAAI;AAC3B,QACEX,iBAAiB,CAACY,KAAlB,CAAwBV,MAAM,CAACS,IAAD,CAA9B,KACA,CAACX,iBAAiB,CAACa,aAAlB,CAAgCX,MAAM,CAACS,IAAD,CAAtC,CAFH,EAGE;AACAR,MAAAA,MAAM,CAACQ,IAAD,CAAN,GAAe,eAAf;AACD;AACF,GAPD;AASA,SAAOR,MAAP;AACD,CA7CM;;;;;;;;;;0BAAMF,yB","sourcesContent":["import { ValidationService } from '../../../services';\n\nexport const restaurantModalValidation = values => {\n  const errors = {};\n  const requiredFields = [\n    'agent_name',\n    'restaurant_name',\n    'manager_name',\n    'manager_email',\n    'cuisine_type',\n    'subscription',\n    'street_address',\n    'city',\n    'state',\n    'zipcode',\n    'delivery_method',\n  ];\n\n  const phonesFields = ['phone_number', 'phone_number2'];\n\n  requiredFields.forEach(field => {\n    if (!values[field]) {\n      errors[field] = 'Required';\n    }\n  });\n\n  if (!ValidationService.email(values.manager_email)) {\n    errors.manager_email = 'Invalid email address';\n  }\n\n  if (\n    values.delivery_email &&\n    !ValidationService.email(values.delivery_email)\n  ) {\n    errors.delivery_email = 'Invalid email address';\n  }\n\n  phonesFields.forEach(name => {\n    if (\n      ValidationService.exist(values[name]) &&\n      !ValidationService.validatePhone(values[name])\n    ) {\n      errors[name] = 'Invalid phone';\n    }\n  });\n\n  return errors;\n};\n"]},"metadata":{},"sourceType":"module"}