{"ast":null,"code":"import _defineProperty from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { ReduxCrudService } from '/services';\nimport { API_REQUESTS_ABORT } from '/modules/core.modules';\nimport { CALL_API } from 'store/middleware/api';\nexport var resource = '/restaurant';\n\nvar _ReduxCrudService$get = ReduxCrudService.getActionCrudTypes(resource),\n    _ReduxCrudService$get2 = _slicedToArray(_ReduxCrudService$get.GET, 3),\n    GET_RESTAURANTS_LIST_REQUEST = _ReduxCrudService$get2[0],\n    GET_RESTAURANTS_LIST_SUCCESS = _ReduxCrudService$get2[1],\n    GET_RESTAURANTS_LIST_ERROR = _ReduxCrudService$get2[2],\n    _ReduxCrudService$get3 = _slicedToArray(_ReduxCrudService$get.POST, 3),\n    CREATE_RESTAURANT_REQUEST = _ReduxCrudService$get3[0],\n    CREATE_RESTAURANT_SUCCESS = _ReduxCrudService$get3[1],\n    CREATE_RESTAURANT_ERROR = _ReduxCrudService$get3[2],\n    _ReduxCrudService$get4 = _slicedToArray(_ReduxCrudService$get.GET_BY_ID, 3),\n    GET_RESTAURANTS_BY_ID_REQUEST = _ReduxCrudService$get4[0],\n    GET_RESTAURANTS_BY_ID_SUCCESS = _ReduxCrudService$get4[1],\n    GET_RESTAURANTS_BY_ID_ERROR = _ReduxCrudService$get4[2],\n    _ReduxCrudService$get5 = _slicedToArray(_ReduxCrudService$get.PATCH, 3),\n    UPDATE_RESTAURANT_REQUEST = _ReduxCrudService$get5[0],\n    UPDATE_RESTAURANT_SUCCESS = _ReduxCrudService$get5[1],\n    UPDATE_RESTAURANT_ERROR = _ReduxCrudService$get5[2],\n    _ReduxCrudService$get6 = _slicedToArray(_ReduxCrudService$get.DELETE, 3),\n    DELETE_RESTAURANT_REQUEST = _ReduxCrudService$get6[0],\n    DELETE_RESTAURANT_SUCCESS = _ReduxCrudService$get6[1],\n    DELETE_RESTAURANT_ERROR = _ReduxCrudService$get6[2];\n\nexport { GET_RESTAURANTS_LIST_REQUEST, GET_RESTAURANTS_LIST_SUCCESS, GET_RESTAURANTS_LIST_ERROR, CREATE_RESTAURANT_REQUEST, CREATE_RESTAURANT_SUCCESS, CREATE_RESTAURANT_ERROR, GET_RESTAURANTS_BY_ID_REQUEST, GET_RESTAURANTS_BY_ID_SUCCESS, GET_RESTAURANTS_BY_ID_ERROR, UPDATE_RESTAURANT_REQUEST, UPDATE_RESTAURANT_SUCCESS, UPDATE_RESTAURANT_ERROR, DELETE_RESTAURANT_REQUEST, DELETE_RESTAURANT_SUCCESS, DELETE_RESTAURANT_ERROR };\nexport var BLOCK_RESTAURANT_REQUEST = \"\".concat(resource, \"/block/request\");\nexport var BLOCK_RESTAURANT_SUCCESS = \"\".concat(resource, \"/block/success\");\nexport var BLOCK_RESTAURANT_ERROR = \"\".concat(resource, \"/block/error\");\nexport var CLEANUP_RESTAURANTS_PAGE = \"\".concat(resource, \"/cleanup\");\nexport var RESTAURANTS_LIST_FILTERS_CHANGED = \"\".concat(resource, \"/filters/changed\");\nexport var RESTAURANTS_LIST_FILTERS_CLEAR = \"\".concat(resource, \"/filters/clear\");\nexport var getInitialFilters = function getInitialFilters() {\n  return {\n    search: '',\n    limit: 10,\n    sort_field: 'name',\n    sort_order: 'desc',\n    cuisine: '',\n    revenue: '',\n    subscription: '',\n    deliveryMethod: '',\n    status: '',\n    agent_name: '',\n    onboardingPeriodStart: null,\n    onboardingPeriodEnd: null,\n    page: 1\n  };\n};\n\nvar getInitialState = function getInitialState() {\n  return {\n    loading: false,\n    error: null,\n    filters: getInitialFilters(),\n    data: [],\n    count: 0,\n    managedRestaurant: {}\n  };\n};\n\nexport var reducer = _defineProperty({\n  name: resource\n}, resource, function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState();\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case GET_RESTAURANTS_LIST_REQUEST:\n    case DELETE_RESTAURANT_REQUEST:\n    case BLOCK_RESTAURANT_REQUEST:\n    case UPDATE_RESTAURANT_REQUEST:\n    case GET_RESTAURANTS_BY_ID_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_RESTAURANTS_LIST_SUCCESS:\n    case BLOCK_RESTAURANT_SUCCESS:\n    case UPDATE_RESTAURANT_SUCCESS:\n      return _objectSpread({}, state, {\n        count: Number(action.response.count) || 0,\n        data: action.response.data || [],\n        managedRestaurant: action.response,\n        loading: false\n      });\n\n    case GET_RESTAURANTS_LIST_ERROR:\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.error\n      });\n\n    case RESTAURANTS_LIST_FILTERS_CLEAR:\n      {\n        return _objectSpread({}, state, {\n          filters: getInitialFilters()\n        });\n      }\n\n    case GET_RESTAURANTS_BY_ID_ERROR:\n    case DELETE_RESTAURANT_SUCCESS:\n    case DELETE_RESTAURANT_ERROR:\n    case UPDATE_RESTAURANT_ERROR:\n    case BLOCK_RESTAURANT_ERROR:\n      {\n        return _objectSpread({}, state, {\n          loading: false\n        });\n      }\n\n    case RESTAURANTS_LIST_FILTERS_CHANGED:\n      return _objectSpread({}, state, {\n        filters: _objectSpread({}, state.filters, action.filters)\n      });\n\n    case GET_RESTAURANTS_BY_ID_ERROR:\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.error.status\n      });\n\n    case CLEANUP_RESTAURANTS_PAGE:\n      return getInitialState();\n\n    case GET_RESTAURANTS_BY_ID_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          managedRestaurant: action.response\n        });\n      }\n\n    default:\n      return state;\n  }\n});\nexport var getRestaurants = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET'\n});\nexport var getRestaurantById = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET',\n  byId: true\n});\nexport var createRestaurant = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'POST',\n  logger: {\n    success: 'Restaurant was successful created',\n    error: 'Error during restaurant creation'\n  }\n});\nexport var updateRestaurant = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'PATCH',\n  logger: {\n    success: 'Restaurant was successful updated',\n    error: 'Error during restaurant update'\n  }\n});\nexport var deleteRestaurant = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'DELETE',\n  logger: {\n    success: 'Restaurant was successful deleted',\n    error: 'Error during restaurant delete'\n  }\n});\nexport function blockRestaurant(body) {\n  return {\n    type: CALL_API,\n    request: {\n      method: 'POST',\n      endpoint: '/restaurant/block',\n      types: [BLOCK_RESTAURANT_REQUEST, BLOCK_RESTAURANT_SUCCESS, BLOCK_RESTAURANT_ERROR],\n      logger: {\n        success: 'Restaurant was successfully blocked',\n        error: 'Error during restaurant blocking'\n      },\n      body: body // then: window.location.reload()\n\n    }\n  };\n}\nexport function updateFilters(filters) {\n  return {\n    type: RESTAURANTS_LIST_FILTERS_CHANGED,\n    filters: filters\n  };\n}\nexport function clearFilters() {\n  return {\n    type: RESTAURANTS_LIST_FILTERS_CLEAR\n  };\n}\nexport function cleanup() {\n  return {\n    type: CLEANUP_RESTAURANTS_PAGE\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [GET_RESTAURANTS_LIST_REQUEST, CREATE_RESTAURANT_REQUEST, GET_RESTAURANTS_BY_ID_REQUEST, UPDATE_RESTAURANT_REQUEST]\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(resource, \"resource\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(GET_RESTAURANTS_LIST_REQUEST, \"GET_RESTAURANTS_LIST_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(GET_RESTAURANTS_LIST_SUCCESS, \"GET_RESTAURANTS_LIST_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(GET_RESTAURANTS_LIST_ERROR, \"GET_RESTAURANTS_LIST_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(CREATE_RESTAURANT_REQUEST, \"CREATE_RESTAURANT_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(CREATE_RESTAURANT_SUCCESS, \"CREATE_RESTAURANT_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(CREATE_RESTAURANT_ERROR, \"CREATE_RESTAURANT_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(GET_RESTAURANTS_BY_ID_REQUEST, \"GET_RESTAURANTS_BY_ID_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(GET_RESTAURANTS_BY_ID_SUCCESS, \"GET_RESTAURANTS_BY_ID_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(GET_RESTAURANTS_BY_ID_ERROR, \"GET_RESTAURANTS_BY_ID_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(UPDATE_RESTAURANT_REQUEST, \"UPDATE_RESTAURANT_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(UPDATE_RESTAURANT_SUCCESS, \"UPDATE_RESTAURANT_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(UPDATE_RESTAURANT_ERROR, \"UPDATE_RESTAURANT_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(DELETE_RESTAURANT_REQUEST, \"DELETE_RESTAURANT_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(DELETE_RESTAURANT_SUCCESS, \"DELETE_RESTAURANT_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(DELETE_RESTAURANT_ERROR, \"DELETE_RESTAURANT_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(BLOCK_RESTAURANT_REQUEST, \"BLOCK_RESTAURANT_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(BLOCK_RESTAURANT_SUCCESS, \"BLOCK_RESTAURANT_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(BLOCK_RESTAURANT_ERROR, \"BLOCK_RESTAURANT_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(CLEANUP_RESTAURANTS_PAGE, \"CLEANUP_RESTAURANTS_PAGE\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(RESTAURANTS_LIST_FILTERS_CHANGED, \"RESTAURANTS_LIST_FILTERS_CHANGED\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(RESTAURANTS_LIST_FILTERS_CLEAR, \"RESTAURANTS_LIST_FILTERS_CLEAR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(getInitialFilters, \"getInitialFilters\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(getInitialState, \"getInitialState\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(getRestaurants, \"getRestaurants\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(getRestaurantById, \"getRestaurantById\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(createRestaurant, \"createRestaurant\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(updateRestaurant, \"updateRestaurant\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(deleteRestaurant, \"deleteRestaurant\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(blockRestaurant, \"blockRestaurant\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(updateFilters, \"updateFilters\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(clearFilters, \"clearFilters\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(cleanup, \"cleanup\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.modules.js"],"names":["ReduxCrudService","API_REQUESTS_ABORT","CALL_API","resource","getActionCrudTypes","GET","GET_RESTAURANTS_LIST_REQUEST","GET_RESTAURANTS_LIST_SUCCESS","GET_RESTAURANTS_LIST_ERROR","POST","CREATE_RESTAURANT_REQUEST","CREATE_RESTAURANT_SUCCESS","CREATE_RESTAURANT_ERROR","GET_BY_ID","GET_RESTAURANTS_BY_ID_REQUEST","GET_RESTAURANTS_BY_ID_SUCCESS","GET_RESTAURANTS_BY_ID_ERROR","PATCH","UPDATE_RESTAURANT_REQUEST","UPDATE_RESTAURANT_SUCCESS","UPDATE_RESTAURANT_ERROR","DELETE","DELETE_RESTAURANT_REQUEST","DELETE_RESTAURANT_SUCCESS","DELETE_RESTAURANT_ERROR","BLOCK_RESTAURANT_REQUEST","BLOCK_RESTAURANT_SUCCESS","BLOCK_RESTAURANT_ERROR","CLEANUP_RESTAURANTS_PAGE","RESTAURANTS_LIST_FILTERS_CHANGED","RESTAURANTS_LIST_FILTERS_CLEAR","getInitialFilters","search","limit","sort_field","sort_order","cuisine","revenue","subscription","deliveryMethod","status","agent_name","onboardingPeriodStart","onboardingPeriodEnd","page","getInitialState","loading","error","filters","data","count","managedRestaurant","reducer","name","state","action","type","Number","response","getRestaurants","resourceAction","method","getRestaurantById","byId","createRestaurant","logger","success","updateRestaurant","deleteRestaurant","blockRestaurant","body","request","endpoint","types","updateFilters","clearFilters","cleanup","abortPageRequests","requestTypes"],"mappings":"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","sourcesContent":["import { ReduxCrudService } from '/services';\nimport { API_REQUESTS_ABORT } from '/modules/core.modules';\nimport { CALL_API } from 'store/middleware/api';\n\nexport const resource = '/restaurant';\n\nexport const {\n    GET: [\n        GET_RESTAURANTS_LIST_REQUEST,\n        GET_RESTAURANTS_LIST_SUCCESS,\n        GET_RESTAURANTS_LIST_ERROR\n    ],\n    POST: [\n        CREATE_RESTAURANT_REQUEST,\n        CREATE_RESTAURANT_SUCCESS,\n        CREATE_RESTAURANT_ERROR\n    ],\n    GET_BY_ID: [\n        GET_RESTAURANTS_BY_ID_REQUEST,\n        GET_RESTAURANTS_BY_ID_SUCCESS,\n        GET_RESTAURANTS_BY_ID_ERROR\n    ],\n    PATCH: [\n        UPDATE_RESTAURANT_REQUEST,\n        UPDATE_RESTAURANT_SUCCESS,\n        UPDATE_RESTAURANT_ERROR\n    ],\n    DELETE: [\n        DELETE_RESTAURANT_REQUEST,\n        DELETE_RESTAURANT_SUCCESS,\n        DELETE_RESTAURANT_ERROR\n    ]\n} = ReduxCrudService.getActionCrudTypes(resource);\n\nexport const BLOCK_RESTAURANT_REQUEST = `${resource}/block/request`;\nexport const BLOCK_RESTAURANT_SUCCESS = `${resource}/block/success`;\nexport const BLOCK_RESTAURANT_ERROR = `${resource}/block/error`;\n\nexport const CLEANUP_RESTAURANTS_PAGE = `${resource}/cleanup`;\nexport const RESTAURANTS_LIST_FILTERS_CHANGED = `${resource}/filters/changed`;\nexport const RESTAURANTS_LIST_FILTERS_CLEAR = `${resource}/filters/clear`;\n\nexport const getInitialFilters = () => ({\n    search: '',\n    limit: 10,\n    sort_field: 'name',\n    sort_order: 'desc',\n    cuisine: '',\n    revenue: '',\n    subscription: '',\n    deliveryMethod: '',\n    status: '',\n    agent_name: '',\n    onboardingPeriodStart: null,\n    onboardingPeriodEnd: null,\n    page: 1\n});\n\nconst getInitialState = () => ({\n    loading: false,\n    error: null,\n    filters: getInitialFilters(),\n    data: [],\n    count: 0,\n    managedRestaurant: {},\n});\n\nexport const reducer = {\n    name: resource,\n    [resource]: function(state = getInitialState(), action = {}) {\n        switch (action.type) {\n            case GET_RESTAURANTS_LIST_REQUEST:\n            case DELETE_RESTAURANT_REQUEST:\n            case BLOCK_RESTAURANT_REQUEST:\n            case UPDATE_RESTAURANT_REQUEST:\n            case GET_RESTAURANTS_BY_ID_REQUEST:\n                return {\n                    ...state,\n                    loading: true\n                };\n            case GET_RESTAURANTS_LIST_SUCCESS:\n            case BLOCK_RESTAURANT_SUCCESS:\n            case UPDATE_RESTAURANT_SUCCESS:\n                return {\n                    ...state,\n                    count: Number(action.response.count) || 0,\n                    data: action.response.data || [],\n                    managedRestaurant: action.response,\n                    loading: false\n                };\n            case GET_RESTAURANTS_LIST_ERROR:\n                return {\n                    ...state,\n                    loading: false,\n                    error: action.error\n                };\n\n            case RESTAURANTS_LIST_FILTERS_CLEAR: {\n                return {\n                    ...state,\n                    filters: getInitialFilters()\n                }\n            }\n            case GET_RESTAURANTS_BY_ID_ERROR:\n            case DELETE_RESTAURANT_SUCCESS:\n            case DELETE_RESTAURANT_ERROR:\n            case UPDATE_RESTAURANT_ERROR:\n            case BLOCK_RESTAURANT_ERROR: {\n                return {\n                    ...state,\n                    loading: false\n                }\n            }\n            case RESTAURANTS_LIST_FILTERS_CHANGED:\n                return {\n                    ...state,\n                    filters: {\n                        ...state.filters,\n                        ...action.filters\n                    }\n                };\n            case GET_RESTAURANTS_BY_ID_ERROR:\n                return {\n                    ...state,\n                    loading: false,\n                    error: action.error.status\n                };\n            case CLEANUP_RESTAURANTS_PAGE:\n                return getInitialState();\n\n            case GET_RESTAURANTS_BY_ID_SUCCESS: {\n                return {\n                    ...state, \n                    loading: false,\n                    managedRestaurant: action.response\n                }\n            }             \n\n            default:\n                return state;\n        }\n    }\n};\n\nexport const getRestaurants = ReduxCrudService.resourceAction({\n    resource,\n    method: 'GET'\n});\n\nexport const getRestaurantById = ReduxCrudService.resourceAction({\n    resource,\n    method: 'GET',\n    byId: true\n});\n\nexport const createRestaurant = ReduxCrudService.resourceAction({\n    resource,\n    method: 'POST',\n    logger: {\n        success: 'Restaurant was successful created',\n        error: 'Error during restaurant creation'\n    }\n});\n\nexport const updateRestaurant = ReduxCrudService.resourceAction({\n    resource,\n    method: 'PATCH',\n    logger: {\n        success: 'Restaurant was successful updated',\n        error: 'Error during restaurant update'\n    }\n});\n\nexport const deleteRestaurant = ReduxCrudService.resourceAction({\n    resource,\n    method: 'DELETE',\n    logger: {\n        success: 'Restaurant was successful deleted',\n        error: 'Error during restaurant delete'\n    }\n});\n\nexport function blockRestaurant(body) {\n    return {\n        type: CALL_API,\n        request: {\n            method: 'POST',\n            endpoint: '/restaurant/block',\n            types: [\n                BLOCK_RESTAURANT_REQUEST,\n                BLOCK_RESTAURANT_SUCCESS,\n                BLOCK_RESTAURANT_ERROR\n            ],\n            logger: {\n                success: 'Restaurant was successfully blocked',\n                error: 'Error during restaurant blocking'\n            },\n            body,\n            // then: window.location.reload()\n        }\n    }\n}\n\nexport function updateFilters(filters) {\n    return {\n        type: RESTAURANTS_LIST_FILTERS_CHANGED,\n        filters\n    };\n}\n\nexport function clearFilters() {\n    return {\n        type: RESTAURANTS_LIST_FILTERS_CLEAR\n    };\n}\n\nexport function cleanup() {\n    return {\n        type: CLEANUP_RESTAURANTS_PAGE\n    }\n}\n\nexport function abortPageRequests() {\n    return {\n        type: API_REQUESTS_ABORT,\n        requestTypes: [\n            GET_RESTAURANTS_LIST_REQUEST,\n            CREATE_RESTAURANT_REQUEST,\n            GET_RESTAURANTS_BY_ID_REQUEST,\n            UPDATE_RESTAURANT_REQUEST\n        ]\n    };\n}\n"]},"metadata":{},"sourceType":"module"}