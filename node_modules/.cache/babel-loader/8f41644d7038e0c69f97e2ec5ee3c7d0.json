{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { API_REQUESTS_ABORT } from '../core';\nimport { CALL_API } from '../../store/middleware/api';\nimport { ReduxCrudService } from '../../services';\nimport { resource, BLOCK_RESTAURANT_REQUEST, BLOCK_RESTAURANT_SUCCESS, BLOCK_RESTAURANT_ERROR, CLEANUP_RESTAURANTS_PAGE, RESTAURANTS_LIST_FILTERS_CHANGED, RESTAURANTS_LIST_FILTERS_CLEAR, CREATE_RESTAURANT_REQUEST, UPDATE_RESTAURANT_REQUEST, GET_RESTAURANTS_LIST_REQUEST, GET_RESTAURANT_BY_ID_REQUEST, RESTAURANTS__CLEAR_MANAGED_RESTAURANT, RESTAURANTS__SET_MANAGED_RESTAURANT, GET_RESTAURANT_FOR_CLIENT_REQUEST, GET_RESTAURANT_FOR_CLIENT_SUCCESS, GET_RESTAURANT_FOR_CLIENT_ERROR } from './restaurants.types';\nexport var getRestaurantForClient = function getRestaurantForClient(url) {\n  return {\n    type: GET_RESTAURANT_FOR_CLIENT_REQUEST,\n    payload: url\n  };\n};\nexport var getRestaurantForClientSuccess = function getRestaurantForClientSuccess(restaurant) {\n  return {\n    type: GET_RESTAURANT_FOR_CLIENT_SUCCESS,\n    payload: restaurant\n  };\n};\nexport var getRestaurantForClientError = function getRestaurantForClientError(error) {\n  return {\n    type: GET_RESTAURANT_FOR_CLIENT_ERROR,\n    payload: error\n  };\n};\nexport var clearManagedRestaurant = function clearManagedRestaurant() {\n  return {\n    type: RESTAURANTS__CLEAR_MANAGED_RESTAURANT\n  };\n};\nexport var setManagedRestaurant = function setManagedRestaurant(payload) {\n  return {\n    type: RESTAURANTS__SET_MANAGED_RESTAURANT,\n    payload: payload\n  };\n};\nexport var getRestaurants = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET'\n});\nexport var getRestaurantById = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET',\n  byId: true\n});\nexport var createRestaurant = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'POST',\n  logger: {\n    success: 'Restaurant was successful created',\n    error: 'Error during restaurant creation'\n  }\n});\nexport var updateRestaurant = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'PATCH',\n  logger: {\n    success: 'Restaurant was successful updated',\n    error: 'Error during restaurant update'\n  }\n});\nexport var deleteRestaurant = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'DELETE',\n  logger: {\n    success: 'Restaurant was successful deleted',\n    error: 'Error during restaurant delete'\n  }\n});\nexport function blockRestaurant(body) {\n  return {\n    type: CALL_API,\n    request: {\n      method: 'POST',\n      endpoint: '/restaurant/block',\n      types: [BLOCK_RESTAURANT_REQUEST, BLOCK_RESTAURANT_SUCCESS, BLOCK_RESTAURANT_ERROR],\n      logger: {\n        success: 'Restaurant was successfully blocked',\n        error: 'Error during restaurant blocking'\n      },\n      body: body // then: window.location.reload()\n\n    }\n  };\n}\nexport function updateFilters(filters) {\n  return {\n    type: RESTAURANTS_LIST_FILTERS_CHANGED,\n    filters: filters\n  };\n}\nexport function clearFilters() {\n  return {\n    type: RESTAURANTS_LIST_FILTERS_CLEAR\n  };\n}\nexport function cleanup() {\n  return {\n    type: CLEANUP_RESTAURANTS_PAGE\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [GET_RESTAURANTS_LIST_REQUEST, CREATE_RESTAURANT_REQUEST, GET_RESTAURANT_BY_ID_REQUEST, UPDATE_RESTAURANT_REQUEST]\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getRestaurantForClient, \"getRestaurantForClient\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(getRestaurantForClientSuccess, \"getRestaurantForClientSuccess\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(getRestaurantForClientError, \"getRestaurantForClientError\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(clearManagedRestaurant, \"clearManagedRestaurant\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(setManagedRestaurant, \"setManagedRestaurant\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(getRestaurants, \"getRestaurants\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(getRestaurantById, \"getRestaurantById\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(createRestaurant, \"createRestaurant\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(updateRestaurant, \"updateRestaurant\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(deleteRestaurant, \"deleteRestaurant\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(blockRestaurant, \"blockRestaurant\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(updateFilters, \"updateFilters\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(clearFilters, \"clearFilters\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(cleanup, \"cleanup\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.actions.js"],"names":["API_REQUESTS_ABORT","CALL_API","ReduxCrudService","resource","BLOCK_RESTAURANT_REQUEST","BLOCK_RESTAURANT_SUCCESS","BLOCK_RESTAURANT_ERROR","CLEANUP_RESTAURANTS_PAGE","RESTAURANTS_LIST_FILTERS_CHANGED","RESTAURANTS_LIST_FILTERS_CLEAR","CREATE_RESTAURANT_REQUEST","UPDATE_RESTAURANT_REQUEST","GET_RESTAURANTS_LIST_REQUEST","GET_RESTAURANT_BY_ID_REQUEST","RESTAURANTS__CLEAR_MANAGED_RESTAURANT","RESTAURANTS__SET_MANAGED_RESTAURANT","GET_RESTAURANT_FOR_CLIENT_REQUEST","GET_RESTAURANT_FOR_CLIENT_SUCCESS","GET_RESTAURANT_FOR_CLIENT_ERROR","getRestaurantForClient","url","type","payload","getRestaurantForClientSuccess","restaurant","getRestaurantForClientError","error","clearManagedRestaurant","setManagedRestaurant","getRestaurants","resourceAction","method","getRestaurantById","byId","createRestaurant","logger","success","updateRestaurant","deleteRestaurant","blockRestaurant","body","request","endpoint","types","updateFilters","filters","clearFilters","cleanup","abortPageRequests","requestTypes"],"mappings":"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","sourcesContent":["import { API_REQUESTS_ABORT } from '../core';\nimport { CALL_API } from '../../store/middleware/api';\nimport { ReduxCrudService } from '../../services';\n\nimport {\n  resource,\n  BLOCK_RESTAURANT_REQUEST,\n  BLOCK_RESTAURANT_SUCCESS,\n  BLOCK_RESTAURANT_ERROR,\n  CLEANUP_RESTAURANTS_PAGE,\n  RESTAURANTS_LIST_FILTERS_CHANGED,\n  RESTAURANTS_LIST_FILTERS_CLEAR,\n  CREATE_RESTAURANT_REQUEST,\n  UPDATE_RESTAURANT_REQUEST,\n  GET_RESTAURANTS_LIST_REQUEST,\n  GET_RESTAURANT_BY_ID_REQUEST,\n  RESTAURANTS__CLEAR_MANAGED_RESTAURANT,\n  RESTAURANTS__SET_MANAGED_RESTAURANT,\n  GET_RESTAURANT_FOR_CLIENT_REQUEST,\n  GET_RESTAURANT_FOR_CLIENT_SUCCESS,\n  GET_RESTAURANT_FOR_CLIENT_ERROR,\n} from './restaurants.types';\n\nexport const getRestaurantForClient = url => ({\n  type: GET_RESTAURANT_FOR_CLIENT_REQUEST,\n  payload: url,\n});\n\nexport const getRestaurantForClientSuccess = restaurant => ({\n  type: GET_RESTAURANT_FOR_CLIENT_SUCCESS,\n  payload: restaurant,\n});\n\nexport const getRestaurantForClientError = error => ({\n  type: GET_RESTAURANT_FOR_CLIENT_ERROR,\n  payload: error,\n});\n\nexport const clearManagedRestaurant = () => ({\n  type: RESTAURANTS__CLEAR_MANAGED_RESTAURANT,\n});\n\nexport const setManagedRestaurant = payload => ({\n  type: RESTAURANTS__SET_MANAGED_RESTAURANT,\n  payload,\n});\n\nexport const getRestaurants = ReduxCrudService.resourceAction({\n  resource,\n  method: 'GET',\n});\n\nexport const getRestaurantById = ReduxCrudService.resourceAction({\n  resource,\n  method: 'GET',\n  byId: true,\n});\n\nexport const createRestaurant = ReduxCrudService.resourceAction({\n  resource,\n  method: 'POST',\n  logger: {\n    success: 'Restaurant was successful created',\n    error: 'Error during restaurant creation',\n  },\n});\n\nexport const updateRestaurant = ReduxCrudService.resourceAction({\n  resource,\n  method: 'PATCH',\n  logger: {\n    success: 'Restaurant was successful updated',\n    error: 'Error during restaurant update',\n  },\n});\n\nexport const deleteRestaurant = ReduxCrudService.resourceAction({\n  resource,\n  method: 'DELETE',\n  logger: {\n    success: 'Restaurant was successful deleted',\n    error: 'Error during restaurant delete',\n  },\n});\n\nexport function blockRestaurant(body) {\n  return {\n    type: CALL_API,\n    request: {\n      method: 'POST',\n      endpoint: '/restaurant/block',\n      types: [\n        BLOCK_RESTAURANT_REQUEST,\n        BLOCK_RESTAURANT_SUCCESS,\n        BLOCK_RESTAURANT_ERROR,\n      ],\n      logger: {\n        success: 'Restaurant was successfully blocked',\n        error: 'Error during restaurant blocking',\n      },\n      body,\n      // then: window.location.reload()\n    },\n  };\n}\n\nexport function updateFilters(filters) {\n  return {\n    type: RESTAURANTS_LIST_FILTERS_CHANGED,\n    filters,\n  };\n}\n\nexport function clearFilters() {\n  return {\n    type: RESTAURANTS_LIST_FILTERS_CLEAR,\n  };\n}\n\nexport function cleanup() {\n  return {\n    type: CLEANUP_RESTAURANTS_PAGE,\n  };\n}\n\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [\n      GET_RESTAURANTS_LIST_REQUEST,\n      CREATE_RESTAURANT_REQUEST,\n      GET_RESTAURANT_BY_ID_REQUEST,\n      UPDATE_RESTAURANT_REQUEST,\n    ],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}