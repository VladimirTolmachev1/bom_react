{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { ReduxCrudService } from '../../../services';\nvar SET_STRIPE_CONNECTING_ERROR_MESSAGE = 'SET_STRIPE_CONNECTING_ERROR_MESSAGE';\nvar CONNECTING_TO_STRIPE_ERR_MSG = 'Some error has occured while connecting your restaurant to stripe';\nexport var resource = '/stripe/authorize';\n\nvar _ReduxCrudService$get = ReduxCrudService.getActionCrudTypes(resource),\n    _ReduxCrudService$get2 = _slicedToArray(_ReduxCrudService$get.POST, 3),\n    CONNECT_STRIPE_TO_RESTAURANT_REQUEST = _ReduxCrudService$get2[0],\n    CONNECT_STRIPE_TO_RESTAURANT_SUCCESS = _ReduxCrudService$get2[1],\n    CONNECT_STRIPE_TO_RESTAURANT_ERROR = _ReduxCrudService$get2[2];\n\nexport { CONNECT_STRIPE_TO_RESTAURANT_REQUEST, CONNECT_STRIPE_TO_RESTAURANT_SUCCESS, CONNECT_STRIPE_TO_RESTAURANT_ERROR };\nexport var isStripeConnectingSelector = function isStripeConnectingSelector(state) {\n  return state.stripeConnection.isLoading;\n};\nexport var stripeConnectionErrorSelector = function stripeConnectionErrorSelector(state) {\n  return state.stripeConnection.infoMessage;\n};\nexport var connectStripeToResourant = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'POST'\n});\nvar initialState = {\n  infoMessage: null,\n  isLoading: false\n};\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CONNECT_STRIPE_TO_RESTAURANT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          infoMessage: '',\n          isLoading: false\n        });\n      }\n\n    case CONNECT_STRIPE_TO_RESTAURANT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoading: true\n        });\n      }\n\n    case SET_STRIPE_CONNECTING_ERROR_MESSAGE:\n      {\n        return _objectSpread({}, state, {\n          infoMessage: action.payload\n        });\n      }\n\n    case CONNECT_STRIPE_TO_RESTAURANT_ERROR:\n      {\n        return _objectSpread({}, state, {\n          isLoading: false,\n          infoMessage: CONNECTING_TO_STRIPE_ERR_MSG\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport var setStripeConnectionErrorMessage = function setStripeConnectionErrorMessage(msg) {\n  return {\n    type: SET_STRIPE_CONNECTING_ERROR_MESSAGE,\n    payload: msg\n  };\n};\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(SET_STRIPE_CONNECTING_ERROR_MESSAGE, \"SET_STRIPE_CONNECTING_ERROR_MESSAGE\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(CONNECTING_TO_STRIPE_ERR_MSG, \"CONNECTING_TO_STRIPE_ERR_MSG\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(resource, \"resource\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(CONNECT_STRIPE_TO_RESTAURANT_REQUEST, \"CONNECT_STRIPE_TO_RESTAURANT_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(CONNECT_STRIPE_TO_RESTAURANT_SUCCESS, \"CONNECT_STRIPE_TO_RESTAURANT_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(CONNECT_STRIPE_TO_RESTAURANT_ERROR, \"CONNECT_STRIPE_TO_RESTAURANT_ERROR\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(isStripeConnectingSelector, \"isStripeConnectingSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(stripeConnectionErrorSelector, \"stripeConnectionErrorSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(connectStripeToResourant, \"connectStripeToResourant\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(initialState, \"initialState\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(setStripeConnectionErrorMessage, \"setStripeConnectionErrorMessage\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/modules/index.js"],"names":["ReduxCrudService","SET_STRIPE_CONNECTING_ERROR_MESSAGE","CONNECTING_TO_STRIPE_ERR_MSG","resource","getActionCrudTypes","POST","CONNECT_STRIPE_TO_RESTAURANT_REQUEST","CONNECT_STRIPE_TO_RESTAURANT_SUCCESS","CONNECT_STRIPE_TO_RESTAURANT_ERROR","isStripeConnectingSelector","state","stripeConnection","isLoading","stripeConnectionErrorSelector","infoMessage","connectStripeToResourant","resourceAction","method","initialState","reducer","action","type","payload","setStripeConnectionErrorMessage","msg"],"mappings":";;;;;;;;AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AAEA,IAAMC,mCAAmC,GACvC,qCADF;AAGA,IAAMC,4BAA4B,GAChC,mEADF;AAGA,OAAO,IAAMC,QAAQ,GAAG,mBAAjB;;4BAQHH,gBAAgB,CAACI,kBAAjB,CAAoCD,QAApC,C;kEALFE,I;IACEC,oC;IACAC,oC;IACAC,kC;;;AAIJ,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAC,KAAK;AAAA,SAC7CA,KAAK,CAACC,gBAAN,CAAuBC,SADsB;AAAA,CAAxC;AAEP,OAAO,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAAH,KAAK;AAAA,SAChDA,KAAK,CAACC,gBAAN,CAAuBG,WADyB;AAAA,CAA3C;AAGP,OAAO,IAAMC,wBAAwB,GAAGf,gBAAgB,CAACgB,cAAjB,CAAgC;AACtEb,EAAAA,QAAQ,EAARA,QADsE;AAEtEc,EAAAA,MAAM,EAAE;AAF8D,CAAhC,CAAjC;AAKP,IAAMC,YAAY,GAAG;AACnBJ,EAAAA,WAAW,EAAE,IADM;AAEnBF,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAKA,OAAO,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCT,KAAiC,uEAAzBQ,YAAyB;AAAA,MAAXE,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,oCAAL;AAA2C;AACzC,iCACKG,KADL;AAEEI,UAAAA,WAAW,EAAE,EAFf;AAGEF,UAAAA,SAAS,EAAE;AAHb;AAKD;;AAED,SAAKN,oCAAL;AAA2C;AACzC,iCACKI,KADL;AAEEE,UAAAA,SAAS,EAAE;AAFb;AAID;;AAED,SAAKX,mCAAL;AAA0C;AACxC,iCACKS,KADL;AAEEI,UAAAA,WAAW,EAAEM,MAAM,CAACE;AAFtB;AAID;;AAED,SAAKd,kCAAL;AAAyC;AACvC,iCACKE,KADL;AAEEE,UAAAA,SAAS,EAAE,KAFb;AAGEE,UAAAA,WAAW,EAAEZ;AAHf;AAKD;;AAED;AACE,aAAOQ,KAAP;AAhCJ;AAkCD,CAnCM;AAqCP,OAAO,IAAMa,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAAC,GAAG;AAAA,SAAK;AACrDH,IAAAA,IAAI,EAAEpB,mCAD+C;AAErDqB,IAAAA,OAAO,EAAEE;AAF4C,GAAL;AAAA,CAA3C;;;;;;;;;;0BApEDvB,mC;0BAGAC,4B;0BAGOC,Q;0BAITG,oC;0BACAC,oC;0BACAC,kC;0BAISC,0B;0BAEAI,6B;0BAGAE,wB;0BAKPG,Y;0BAKOC,O;0BAqCAI,+B","sourcesContent":["import { ReduxCrudService } from '../../../services';\n\nconst SET_STRIPE_CONNECTING_ERROR_MESSAGE =\n  'SET_STRIPE_CONNECTING_ERROR_MESSAGE';\n\nconst CONNECTING_TO_STRIPE_ERR_MSG =\n  'Some error has occured while connecting your restaurant to stripe';\n\nexport const resource = '/stripe/authorize';\n\nexport const {\n  POST: [\n    CONNECT_STRIPE_TO_RESTAURANT_REQUEST,\n    CONNECT_STRIPE_TO_RESTAURANT_SUCCESS,\n    CONNECT_STRIPE_TO_RESTAURANT_ERROR,\n  ],\n} = ReduxCrudService.getActionCrudTypes(resource);\n\nexport const isStripeConnectingSelector = state =>\n  state.stripeConnection.isLoading;\nexport const stripeConnectionErrorSelector = state =>\n  state.stripeConnection.infoMessage;\n\nexport const connectStripeToResourant = ReduxCrudService.resourceAction({\n  resource,\n  method: 'POST',\n});\n\nconst initialState = {\n  infoMessage: null,\n  isLoading: false,\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONNECT_STRIPE_TO_RESTAURANT_SUCCESS: {\n      return {\n        ...state,\n        infoMessage: '',\n        isLoading: false,\n      };\n    }\n\n    case CONNECT_STRIPE_TO_RESTAURANT_REQUEST: {\n      return {\n        ...state,\n        isLoading: true,\n      };\n    }\n\n    case SET_STRIPE_CONNECTING_ERROR_MESSAGE: {\n      return {\n        ...state,\n        infoMessage: action.payload,\n      };\n    }\n\n    case CONNECT_STRIPE_TO_RESTAURANT_ERROR: {\n      return {\n        ...state,\n        isLoading: false,\n        infoMessage: CONNECTING_TO_STRIPE_ERR_MSG,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const setStripeConnectionErrorMessage = msg => ({\n  type: SET_STRIPE_CONNECTING_ERROR_MESSAGE,\n  payload: msg,\n});\n"]},"metadata":{},"sourceType":"module"}