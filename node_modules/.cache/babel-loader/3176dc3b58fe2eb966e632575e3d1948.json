{"ast":null,"code":"import _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Grid } from '@material-ui/core';\nimport { queryParamsFromPropsSelector } from './../../selectors/common';\nimport { authRestaurantIdSelector } from './../RestaurantInfo/modules';\nimport { FullScreenPreloader } from './../../components';\nimport { connectStripeToResourant, isStripeConnectingSelector, setStripeConnectionErrorMessage, stripeConnectionErrorSelector } from './modules';\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    queryParams: queryParamsFromPropsSelector(ownProps),\n    errorMessage: stripeConnectionErrorSelector(state),\n    restaurantId: authRestaurantIdSelector(state),\n    isLoading: isStripeConnectingSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      connectStripeToResourant: connectStripeToResourant\n    }, dispatch)\n  };\n};\n\nvar ConnectStripeToRestaurant = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec(_class =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ConnectStripeToRestaurant, _Component);\n\n  function ConnectStripeToRestaurant() {\n    _classCallCheck(this, ConnectStripeToRestaurant);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConnectStripeToRestaurant).apply(this, arguments));\n  }\n\n  _createClass(ConnectStripeToRestaurant, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          queryParams = _this$props.queryParams,\n          restaurantId = _this$props.restaurantId,\n          actions = _this$props.actions;\n\n      if (queryParams.code) {\n        actions.connectStripeToResourant({\n          body: {\n            code: queryParams.code,\n            restaurant_id: Number(restaurantId)\n          }\n        });\n      }\n\n      if (queryParams.error) {\n        setStripeConnectionErrorMessage(queryParams.error_description);\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      var _this$props2 = this.props,\n          history = _this$props2.history,\n          isLoading = _this$props2.isLoading,\n          errorMessage = _this$props2.errorMessage;\n\n      if (!isLoading && !errorMessage) {\n        history.push('/restaurant_info');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          isLoading = _this$props3.isLoading,\n          errorMessage = _this$props3.errorMessage;\n      return React.createElement(Grid, {\n        justify: \"center\",\n        alignItems: \"center\",\n        className: \"app-static-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, isLoading && React.createElement(FullScreenPreloader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \" Connecting to Stripe \")), errorMessage && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \" \", errorMessage));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return ConnectStripeToRestaurant;\n}(Component)) || _class);\nConnectStripeToRestaurant.propTypes = {\n  queryParams: PropTypes.object,\n  errorMessage: PropTypes.string,\n  restaurantId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  isLoading: PropTypes.bool,\n  actions: PropTypes.object.isRequired\n};\nvar _default = ConnectStripeToRestaurant;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\");\n  reactHotLoader.register(ConnectStripeToRestaurant, \"ConnectStripeToRestaurant\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js"],"names":["React","Component","PropTypes","connect","bindActionCreators","Grid","queryParamsFromPropsSelector","authRestaurantIdSelector","FullScreenPreloader","connectStripeToResourant","isStripeConnectingSelector","setStripeConnectionErrorMessage","stripeConnectionErrorSelector","mapStateToProps","state","ownProps","queryParams","errorMessage","restaurantId","isLoading","mapDispatchToProps","dispatch","actions","ConnectStripeToRestaurant","props","code","body","restaurant_id","Number","error","error_description","history","push","propTypes","object","string","oneOfType","number","bool","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Grid, } from '@material-ui/core';\n\nimport { queryParamsFromPropsSelector } from './../../selectors/common';\nimport { authRestaurantIdSelector } from './../RestaurantInfo/modules';\nimport { FullScreenPreloader } from './../../components';\nimport {\n  connectStripeToResourant,\n  isStripeConnectingSelector,\n  setStripeConnectionErrorMessage,\n  stripeConnectionErrorSelector,\n} from './modules';\n\n\n\nconst mapStateToProps = (state, ownProps) => ({\n    queryParams: queryParamsFromPropsSelector(ownProps),\n    errorMessage: stripeConnectionErrorSelector(state),\n    restaurantId: authRestaurantIdSelector(state),\n    isLoading: isStripeConnectingSelector(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        connectStripeToResourant,\n    }, dispatch)\n})\n\n\n@connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)\nclass ConnectStripeToRestaurant extends Component {\n    componentDidMount(){\n        const { queryParams, restaurantId, actions } = this.props;\n        if( queryParams.code ) {\n            actions.connectStripeToResourant({ body: {\n                code: queryParams.code,\n                restaurant_id: Number(restaurantId),\n            }})\n        }\n\n        if(queryParams.error) {\n            setStripeConnectionErrorMessage( queryParams.error_description, )\n        } \n    }\n\n    componentWillUpdate() {\n        const { history, isLoading, errorMessage } = this.props;\n\n        if( !isLoading && !errorMessage ) {\n            history.push('/restaurant_info')\n        }\n    }\n\n    render() {\n        const { isLoading, errorMessage } = this.props;\n\n        return (\n            <Grid justify='center' alignItems=\"center\" className='app-static-container'>\n                { isLoading &&  (\n                      <FullScreenPreloader>\n                          <p> Connecting to Stripe </p>\n                      </FullScreenPreloader>\n                    )\n                }\n\n                { errorMessage && <p> { errorMessage }</p> }\n                \n            </Grid> \n        )\n    }\n} \n\nConnectStripeToRestaurant.propTypes = {\n    queryParams: PropTypes.object ,\n    errorMessage: PropTypes.string ,\n    restaurantId: PropTypes.oneOfType([PropTypes.string , PropTypes.number]),\n    isLoading: PropTypes.bool,\n    actions: PropTypes.object.isRequired\n}\n\nexport default ConnectStripeToRestaurant;\n\n"]},"metadata":{},"sourceType":"module"}