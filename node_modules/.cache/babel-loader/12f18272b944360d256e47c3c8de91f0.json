{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/components/DishList/DishList.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { DishItem } from '../';\nimport { HelperService } from '/services';\nimport { AppPreloaderSmall } from '/components';\nimport { autobind } from 'core-decorators';\nimport './DishList.scss';\nexport var DishList = (_class =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(DishList, _PureComponent);\n\n  function DishList() {\n    _classCallCheck(this, DishList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DishList).apply(this, arguments));\n  }\n\n  _createClass(DishList, [{\n    key: \"mapDishItems\",\n    value: function mapDishItems() {\n      var _this = this;\n\n      var _this$props = this.props,\n          dishes = _this$props.dishes,\n          showConfirm = _this$props.showConfirm;\n      return dishes.map(function (dish) {\n        return React.createElement(DishItem, Object.assign({\n          key: dish.id\n        }, {\n          showConfirm: showConfirm,\n          dish: dish\n        }, HelperService.pick(_this.props, ['showConfirm', 'mode', 'updateDishFilters', 'removeDish', 'addDishInOrder', 'publishDishes', 'toggleDishModal', 'unpublishDishes', 'setDishModalMode', 'setDishSize']), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }));\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('scroll', this.onScrollToBottom);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('scroll', this.onScrollToBottom);\n    }\n  }, {\n    key: \"onScrollToBottom\",\n    value: function onScrollToBottom() {\n      var _this$props2 = this.props,\n          dishesLoading = _this$props2.dishesLoading,\n          setDishPage = _this$props2.setDishPage,\n          dishFilters = _this$props2.dishFilters,\n          getDishes = _this$props2.getDishes,\n          dishes = _this$props2.dishes,\n          category_id = _this$props2.category_id,\n          dishesCount = _this$props2.dishesCount;\n      var bottomOffset = 20;\n\n      if (dishesLoading || Boolean(dishes.length === dishesCount) || !category_id || !dishesCount || window.innerHeight + window.scrollY < document.body.offsetHeight - bottomOffset) {\n        return false;\n      }\n\n      setDishPage(dishFilters.page + 1);\n      getDishes({\n        body: _objectSpread({}, dishFilters, {\n          page: dishFilters.page + 1,\n          category_id: category_id\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          dishesLoading = _this$props3.dishesLoading,\n          mode = _this$props3.mode;\n      return React.createElement(\"div\", {\n        className: \"dish-list \".concat(mode !== 'client' ? 'dish-list--admin' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, this.mapDishItems(), dishesLoading && React.createElement(AppPreloaderSmall, {\n        className: 'dish-list__preloader',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return DishList;\n}(PureComponent), (_applyDecoratedDescriptor(_class.prototype, \"onScrollToBottom\", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, \"onScrollToBottom\"), _class.prototype)), _class);\nDishList.propTypes = {\n  category_id: PropTypes.string,\n  updateDishFilters: PropTypes.func,\n  dishFilters: PropTypes.any,\n  removeDish: PropTypes.func,\n  dishesLoading: PropTypes.bool,\n  publishDishes: PropTypes.func,\n  showConfirm: PropTypes.func,\n  toggleDishModal: PropTypes.func,\n  setDishModalMode: PropTypes.func,\n  dishes: PropTypes.array,\n  mode: PropTypes.string\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(DishList, \"DishList\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/components/DishList/DishList.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/components/DishList/DishList.js"],"names":["React","PureComponent","PropTypes","DishItem","HelperService","AppPreloaderSmall","autobind","DishList","props","dishes","showConfirm","map","dish","id","pick","window","addEventListener","onScrollToBottom","removeEventListener","dishesLoading","setDishPage","dishFilters","getDishes","category_id","dishesCount","bottomOffset","Boolean","length","innerHeight","scrollY","document","body","offsetHeight","page","mode","mapDishItems","propTypes","string","updateDishFilters","func","any","removeDish","bool","publishDishes","toggleDishModal","setDishModalMode","array"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,KAAzB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,OAAO,iBAAP;AAEA,WAAaC,QAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mCACmB;AAAA;;AAAA,wBACqB,KAAKC,KAD1B;AAAA,UACHC,MADG,eACHA,MADG;AAAA,UACKC,WADL,eACKA,WADL;AAGX,aAAOD,MAAM,CAACE,GAAP,CAAW,UAAAC,IAAI,EAAI;AACtB,eACI,oBAAC,QAAD;AACI,UAAA,GAAG,EAAEA,IAAI,CAACC;AADd,WAEQ;AACAH,UAAAA,WAAW,EAAXA,WADA;AAEAE,UAAAA,IAAI,EAAJA;AAFA,SAFR,EAMQR,aAAa,CAACU,IAAd,CAAmB,KAAI,CAACN,KAAxB,EAA+B,CAC/B,aAD+B,EAE/B,MAF+B,EAG/B,mBAH+B,EAI/B,YAJ+B,EAK/B,gBAL+B,EAM/B,eAN+B,EAO/B,iBAP+B,EAQ/B,iBAR+B,EAS/B,kBAT+B,EAU/B,aAV+B,CAA/B,CANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAqBH,OAtBM,CAAP;AAuBH;AA3BL;AAAA;AAAA,wCA6BwB;AAChBO,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,gBAAvC;AACH;AA/BL;AAAA;AAAA,2CAiC2B;AACnBF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKD,gBAA1C;AACH;AAnCL;AAAA;AAAA,uCAsCuB;AAAA,yBASX,KAAKT,KATM;AAAA,UAEXW,aAFW,gBAEXA,aAFW;AAAA,UAGXC,WAHW,gBAGXA,WAHW;AAAA,UAIXC,WAJW,gBAIXA,WAJW;AAAA,UAKXC,SALW,gBAKXA,SALW;AAAA,UAMXb,MANW,gBAMXA,MANW;AAAA,UAOXc,WAPW,gBAOXA,WAPW;AAAA,UAQXC,WARW,gBAQXA,WARW;AAWf,UAAMC,YAAY,GAAG,EAArB;;AAEA,UACIN,aAAa,IACVO,OAAO,CAACjB,MAAM,CAACkB,MAAP,KAAkBH,WAAnB,CADV,IAEG,CAACD,WAFJ,IAGG,CAACC,WAHJ,IAIIT,MAAM,CAACa,WAAP,GAAqBb,MAAM,CAACc,OAA7B,GAAwCC,QAAQ,CAACC,IAAT,CAAcC,YAAd,GAA6BP,YAL5E,EAME;AACE,eAAO,KAAP;AACH;;AAEDL,MAAAA,WAAW,CAACC,WAAW,CAACY,IAAZ,GAAmB,CAApB,CAAX;AACAX,MAAAA,SAAS,CAAC;AACNS,QAAAA,IAAI,oBACGV,WADH;AAEAY,UAAAA,IAAI,EAAEZ,WAAW,CAACY,IAAZ,GAAmB,CAFzB;AAGAV,UAAAA,WAAW,EAAXA;AAHA;AADE,OAAD,CAAT;AAOH;AArEL;AAAA;AAAA,6BAuEa;AAAA,yBAC2B,KAAKf,KADhC;AAAA,UACGW,aADH,gBACGA,aADH;AAAA,UACkBe,IADlB,gBACkBA,IADlB;AAEL,aACI;AAAK,QAAA,SAAS,sBAAeA,IAAI,KAAK,QAAT,GAAoB,kBAApB,GAAyC,EAAxD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKC,YAAL,EADL,EAEKhB,aAAa,IACV,oBAAC,iBAAD;AAAmB,QAAA,SAAS,EAAE,sBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHR,CADJ;AAQH;AAjFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,EAA8BlB,aAA9B,qEAqCKK,QArCL;AAoFAC,QAAQ,CAAC6B,SAAT,GAAqB;AACjBb,EAAAA,WAAW,EAAErB,SAAS,CAACmC,MADN;AAEjBC,EAAAA,iBAAiB,EAAEpC,SAAS,CAACqC,IAFZ;AAGjBlB,EAAAA,WAAW,EAAEnB,SAAS,CAACsC,GAHN;AAIjBC,EAAAA,UAAU,EAAEvC,SAAS,CAACqC,IAJL;AAKjBpB,EAAAA,aAAa,EAAEjB,SAAS,CAACwC,IALR;AAMjBC,EAAAA,aAAa,EAAEzC,SAAS,CAACqC,IANR;AAOjB7B,EAAAA,WAAW,EAAER,SAAS,CAACqC,IAPN;AAQjBK,EAAAA,eAAe,EAAE1C,SAAS,CAACqC,IARV;AASjBM,EAAAA,gBAAgB,EAAE3C,SAAS,CAACqC,IATX;AAUjB9B,EAAAA,MAAM,EAAEP,SAAS,CAAC4C,KAVD;AAWjBZ,EAAAA,IAAI,EAAEhC,SAAS,CAACmC;AAXC,CAArB;;;;;;;;;;;;0BApFa9B,Q","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DishItem } from '../';\nimport { HelperService } from '/services';\nimport { AppPreloaderSmall } from '/components';\nimport { autobind } from 'core-decorators';\n\nimport './DishList.scss';\n\nexport class DishList extends PureComponent {\n    mapDishItems() {\n        const { dishes, showConfirm } = this.props;\n\n        return dishes.map(dish => {\n            return (\n                <DishItem\n                    key={dish.id}\n                    {...{\n                        showConfirm,\n                        dish\n                    }}\n                    {...HelperService.pick(this.props, [\n                        'showConfirm',\n                        'mode',\n                        'updateDishFilters',\n                        'removeDish',\n                        'addDishInOrder',\n                        'publishDishes',\n                        'toggleDishModal',\n                        'unpublishDishes',\n                        'setDishModalMode',\n                        'setDishSize',\n                    ])}\n                />\n            );\n        });\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.onScrollToBottom);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.onScrollToBottom);\n    }\n\n    @autobind\n    onScrollToBottom() {\n        const {\n            dishesLoading,\n            setDishPage,\n            dishFilters,\n            getDishes,\n            dishes,\n            category_id,\n            dishesCount\n        } = this.props;\n\n        const bottomOffset = 20;\n\n        if (\n            dishesLoading \n            || Boolean(dishes.length === dishesCount)\n            || !category_id\n            || !dishesCount\n            || (window.innerHeight + window.scrollY) < document.body.offsetHeight - bottomOffset\n        ) {\n            return false;\n        }\n\n        setDishPage(dishFilters.page + 1);\n        getDishes({\n            body: {\n                ...dishFilters,\n                page: dishFilters.page + 1,\n                category_id\n            }\n        });\n    }\n\n    render() {\n        const { dishesLoading, mode } = this.props;\n        return (\n            <div className={`dish-list ${mode !== 'client' ? 'dish-list--admin' : ''}`}>\n                {this.mapDishItems()}\n                {dishesLoading && (\n                    <AppPreloaderSmall className={'dish-list__preloader'} />\n                )}\n            </div>\n        );\n    }\n}\n\nDishList.propTypes = {\n    category_id: PropTypes.string,\n    updateDishFilters: PropTypes.func,\n    dishFilters: PropTypes.any,\n    removeDish: PropTypes.func,\n    dishesLoading: PropTypes.bool,\n    publishDishes: PropTypes.func,\n    showConfirm: PropTypes.func,\n    toggleDishModal: PropTypes.func,\n    setDishModalMode: PropTypes.func,\n    dishes: PropTypes.array,\n    mode: PropTypes.string\n};\n\n"]},"metadata":{},"sourceType":"module"}