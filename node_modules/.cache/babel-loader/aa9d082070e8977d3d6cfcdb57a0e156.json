{"ast":null,"code":"import _defineProperty from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { ReduxCrudService } from '/services';\nimport { API_REQUESTS_ABORT } from '/modules/core.modules';\nexport var resource = '/agent';\n\nvar _ReduxCrudService$get = ReduxCrudService.getActionCrudTypes(resource),\n    _ReduxCrudService$get2 = _slicedToArray(_ReduxCrudService$get.GET, 3),\n    GET_AGENTS_LIST_REQUEST = _ReduxCrudService$get2[0],\n    GET_AGENTS_LIST_SUCCESS = _ReduxCrudService$get2[1],\n    GET_AGENTS_LIST_ERROR = _ReduxCrudService$get2[2];\n\nexport { GET_AGENTS_LIST_REQUEST, GET_AGENTS_LIST_SUCCESS, GET_AGENTS_LIST_ERROR };\nexport var AGENTS_LIST_FILTERS_CHANGED = \"\".concat(resource, \"/filters/changed\");\n\nvar getInitialState = function getInitialState() {\n  return {\n    loading: false,\n    error: null,\n    filters: {\n      name: ''\n    },\n    data: [],\n    count: 0\n  };\n};\n\nexport var reducer = _defineProperty({\n  name: resource\n}, resource, function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState();\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_AGENTS_LIST_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_AGENTS_LIST_SUCCESS:\n      return _objectSpread({}, state, {\n        count: Number(action.response.count),\n        data: action.response.data,\n        loading: false\n      });\n\n    case GET_AGENTS_LIST_ERROR:\n      return _objectSpread({}, state, {\n        error: action.error,\n        loading: false\n      });\n\n    case AGENTS_LIST_FILTERS_CHANGED:\n      return _objectSpread({}, state, {\n        filters: _objectSpread({}, state.filters, action.filters)\n      });\n\n    default:\n      return state;\n  }\n});\nexport var getAgents = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET'\n});\nexport function updateFilters(filters) {\n  return {\n    type: AGENTS_LIST_FILTERS_CHANGED,\n    filters: filters\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [GET_AGENTS_LIST_REQUEST]\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(resource, \"resource\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(GET_AGENTS_LIST_REQUEST, \"GET_AGENTS_LIST_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(GET_AGENTS_LIST_SUCCESS, \"GET_AGENTS_LIST_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(GET_AGENTS_LIST_ERROR, \"GET_AGENTS_LIST_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(AGENTS_LIST_FILTERS_CHANGED, \"AGENTS_LIST_FILTERS_CHANGED\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(getInitialState, \"getInitialState\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(getAgents, \"getAgents\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(updateFilters, \"updateFilters\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Agents/modules/agents.modules.js"],"names":["ReduxCrudService","API_REQUESTS_ABORT","resource","getActionCrudTypes","GET","GET_AGENTS_LIST_REQUEST","GET_AGENTS_LIST_SUCCESS","GET_AGENTS_LIST_ERROR","AGENTS_LIST_FILTERS_CHANGED","getInitialState","loading","error","filters","name","data","count","reducer","state","action","type","Number","response","getAgents","resourceAction","method","updateFilters","abortPageRequests","requestTypes"],"mappings":";;;;;;;;;;AAAA,SAASA,gBAAT,QAAiC,WAAjC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,OAAO,IAAMC,QAAQ,GAAG,QAAjB;;4BAQHF,gBAAgB,CAACG,kBAAjB,CAAoCD,QAApC,C;kEALAE,G;IACIC,uB;IACAC,uB;IACAC,qB;;;AAIR,OAAO,IAAMC,2BAA2B,aAAMN,QAAN,qBAAjC;;AAEP,IAAMO,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAO;AAC3BC,IAAAA,OAAO,EAAE,KADkB;AAE3BC,IAAAA,KAAK,EAAE,IAFoB;AAG3BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAE;AADD,KAHkB;AAM3BC,IAAAA,IAAI,EAAE,EANqB;AAO3BC,IAAAA,KAAK,EAAE;AAPoB,GAAP;AAAA,CAAxB;;AAUA,OAAO,IAAMC,OAAO;AAChBH,EAAAA,IAAI,EAAEX;AADU,GAEfA,QAFe,EAEJ,YAA4C;AAAA,MAAnCe,KAAmC,uEAA3BR,eAAe,EAAY;AAAA,MAARS,MAAQ;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,uBAAL;AACI,+BACOY,KADP;AAEIP,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAKJ,uBAAL;AACI,+BACOW,KADP;AAEIF,QAAAA,KAAK,EAAEK,MAAM,CAACF,MAAM,CAACG,QAAP,CAAgBN,KAAjB,CAFjB;AAGID,QAAAA,IAAI,EAAEI,MAAM,CAACG,QAAP,CAAgBP,IAH1B;AAIIJ,QAAAA,OAAO,EAAE;AAJb;;AAMJ,SAAKH,qBAAL;AACI,+BACOU,KADP;AAEIN,QAAAA,KAAK,EAAEO,MAAM,CAACP,KAFlB;AAGID,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKF,2BAAL;AACI,+BACOS,KADP;AAEIL,QAAAA,OAAO,oBACAK,KAAK,CAACL,OADN,EAEAM,MAAM,CAACN,OAFP;AAFX;;AAOJ;AACI,aAAOK,KAAP;AA5BR;AA8BH,CAjCe,CAAb;AAoCP,OAAO,IAAMK,SAAS,GAAGtB,gBAAgB,CAACuB,cAAjB,CAAgC;AACrDrB,EAAAA,QAAQ,EAARA,QADqD;AAErDsB,EAAAA,MAAM,EAAE;AAF6C,CAAhC,CAAlB;AAKP,OAAO,SAASC,aAAT,CAAuBb,OAAvB,EAAgC;AACnC,SAAO;AACHO,IAAAA,IAAI,EAAEX,2BADH;AAEHI,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASc,iBAAT,GAA6B;AAChC,SAAO;AACHP,IAAAA,IAAI,EAAElB,kBADH;AAEH0B,IAAAA,YAAY,EAAE,CACVtB,uBADU;AAFX,GAAP;AAMH;;;;;;;;;;;;0BA7EYH,Q;0BAILG,uB;0BACAC,uB;0BACAC,qB;0BAIKC,2B;0BAEPC,e;0BAUOO,O;0BAoCAM,S;0BAKGG,a;0BAOAC,iB","sourcesContent":["import { ReduxCrudService } from '/services';\nimport { API_REQUESTS_ABORT } from '/modules/core.modules';\nexport const resource = '/agent';\n\nexport const {\n    GET: [\n        GET_AGENTS_LIST_REQUEST,\n        GET_AGENTS_LIST_SUCCESS,\n        GET_AGENTS_LIST_ERROR\n    ]\n} = ReduxCrudService.getActionCrudTypes(resource);\n\nexport const AGENTS_LIST_FILTERS_CHANGED = `${resource}/filters/changed`;\n\nconst getInitialState = () => ({\n    loading: false,\n    error: null,\n    filters: {\n        name: ''\n    },\n    data: [],\n    count: 0\n});\n\nexport const reducer = {\n    name: resource,\n    [resource]: function(state = getInitialState(), action) {\n        switch (action.type) {\n            case GET_AGENTS_LIST_REQUEST:\n                return {\n                    ...state,\n                    loading: true\n                };\n            case GET_AGENTS_LIST_SUCCESS:\n                return {\n                    ...state,\n                    count: Number(action.response.count),\n                    data: action.response.data,\n                    loading: false\n                };\n            case GET_AGENTS_LIST_ERROR:\n                return {\n                    ...state,\n                    error: action.error,\n                    loading: false\n                };\n            case AGENTS_LIST_FILTERS_CHANGED:\n                return {\n                    ...state,\n                    filters: {\n                        ...state.filters,\n                        ...action.filters\n                    }\n                };\n            default:\n                return state;\n        }\n    }\n};\n\nexport const getAgents = ReduxCrudService.resourceAction({\n    resource,\n    method: 'GET'\n});\n\nexport function updateFilters(filters) {\n    return {\n        type: AGENTS_LIST_FILTERS_CHANGED,\n        filters\n    }\n}\n\nexport function abortPageRequests() {\n    return {\n        type: API_REQUESTS_ABORT,\n        requestTypes: [\n            GET_AGENTS_LIST_REQUEST\n        ]\n    }\n}\n"]},"metadata":{},"sourceType":"module"}