{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _dec,\n    _dec2,\n    _class,\n    _class2,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/CategoryModal/CategoryModal.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm, formValueSelector, isInvalid } from 'redux-form';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport { autobind } from 'core-decorators';\nimport { connect } from 'react-redux';\nimport './CategoryModal.scss';\nimport { abortPageRequests, updateCategory, getCategoryById, createCategory } from '/scenes/Menu/modules/menu.categories.modules';\nimport { categoryValidation, categoryModalOpenSelector, categoryModalLoadingSelector, categoryModeSelector, toggleCategoryModal, initialValuesSelector, clearModalData, categoryModalIdSelector, setMode } from './modules';\nimport { AppFormTextField, AppCleanHOC, AppPreloaderSmall } from '/components';\nvar CATEGORY_FORM = 'Category';\nvar formFieldsSelector = formValueSelector(CATEGORY_FORM);\nvar isInvalidSelector = isInvalid(CATEGORY_FORM);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    initialValues: initialValuesSelector(state),\n    description: formFieldsSelector(state, 'description'),\n    name: formFieldsSelector(state, 'name'),\n    loading: categoryModalLoadingSelector(state),\n    id: categoryModalIdSelector(state),\n    open: categoryModalOpenSelector(state),\n    mode: categoryModeSelector(state),\n    isInvalid: isInvalidSelector(state)\n  };\n};\n\nvar mapDispatchToProps = {\n  updateCategory: updateCategory,\n  createCategory: createCategory,\n  abortPageRequests: abortPageRequests,\n  toggleCategoryModal: toggleCategoryModal,\n  getCategoryById: getCategoryById,\n  clearModalData: clearModalData,\n  setMode: setMode\n};\nvar CategoryModal = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec2 = reduxForm({\n  form: CATEGORY_FORM,\n  validate: categoryValidation,\n  enableReinitialize: true\n}), _dec(_class = _dec2(_class = AppCleanHOC(_class = (_class2 =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(CategoryModal, _PureComponent);\n\n  function CategoryModal() {\n    _classCallCheck(this, CategoryModal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CategoryModal).apply(this, arguments));\n  }\n\n  _createClass(CategoryModal, [{\n    key: \"onCloseClick\",\n    value: function onCloseClick() {\n      var _this$props = this.props,\n          toggleCategoryModal = _this$props.toggleCategoryModal,\n          reset = _this$props.reset,\n          clearModalData = _this$props.clearModalData;\n      toggleCategoryModal({\n        open: false\n      });\n      clearModalData();\n      reset();\n    }\n  }, {\n    key: \"onEntered\",\n    value: function onEntered() {\n      var _this$props2 = this.props,\n          mode = _this$props2.mode,\n          id = _this$props2.id,\n          getCategoryById = _this$props2.getCategoryById;\n\n      if (mode === 'edit') {\n        getCategoryById({\n          id: id\n        });\n      }\n    }\n  }, {\n    key: \"requestAction\",\n    value: function requestAction() {\n      var _this$props3 = this.props,\n          createCategory = _this$props3.createCategory,\n          updateCategory = _this$props3.updateCategory,\n          name = _this$props3.name,\n          description = _this$props3.description,\n          mode = _this$props3.mode,\n          restaurant_id = _this$props3.restaurant_id,\n          id = _this$props3.id,\n          onSuccessAction = _this$props3.onSuccessAction;\n      var body = {\n        description: description,\n        name: name,\n        restaurant_id: restaurant_id\n      };\n      var action = mode === 'add' ? createCategory({\n        body: body\n      }) : updateCategory({\n        body: _objectSpread({}, body, {\n          id: id\n        })\n      });\n      return action.promise.then(function (res) {\n        onSuccessAction && onSuccessAction(res);\n        return res;\n      });\n    }\n  }, {\n    key: \"onActionAndCLoseCLick\",\n    value: function onActionAndCLoseCLick() {\n      this.requestAction().then(this.onCloseClick);\n    }\n  }, {\n    key: \"onActionAndAddClick\",\n    value: function onActionAndAddClick() {\n      var _this$props4 = this.props,\n          setMode = _this$props4.setMode,\n          reset = _this$props4.reset,\n          clearModalData = _this$props4.clearModalData;\n      this.requestAction().then(function () {\n        setMode('add');\n        reset();\n        clearModalData();\n      });\n    }\n  }, {\n    key: \"renderDialogActions\",\n    value: function renderDialogActions() {\n      var _this$props5 = this.props,\n          loading = _this$props5.loading,\n          mode = _this$props5.mode,\n          isInvalid = _this$props5.isInvalid;\n      return React.createElement(\"div\", {\n        className: 'category-modal__actions',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.onCloseClick,\n        variant: \"contained\",\n        disabled: loading,\n        className: 'category-modal__actions-cancel',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        onClick: this.onActionAndAddClick,\n        variant: \"contained\",\n        color: 'secondary',\n        disabled: loading || isInvalid,\n        className: 'category-modal__actions-save',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, mode === 'add' ? 'Save' : 'Update', \" and add another\"), React.createElement(Button, {\n        onClick: this.onActionAndCLoseCLick,\n        variant: \"contained\",\n        color: 'primary',\n        disabled: loading || isInvalid,\n        className: 'category-modal__actions-save',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, mode === 'add' ? 'Save' : 'Update', \" and close\"));\n    }\n  }, {\n    key: \"renderDialogTitle\",\n    value: function renderDialogTitle() {\n      var mode = this.props.mode;\n      var word = mode === 'add' ? 'Add' : 'Edit';\n      return \"\".concat(word, \" category\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          loading = _this$props6.loading,\n          open = _this$props6.open;\n      return React.createElement(Dialog, {\n        open: open,\n        onEntered: this.onEntered,\n        onClose: this.onClose,\n        fullWidth: true,\n        maxWidth: 'sm',\n        className: 'category-modal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, loading && React.createElement(AppPreloaderSmall, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(DialogTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, this.renderDialogTitle()), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        name: 'category',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(Field, {\n        className: 'category__field',\n        name: \"name\",\n        required: true,\n        type: 'text',\n        label: \"Category name\",\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(Field, {\n        className: 'category__field',\n        name: \"description\",\n        type: 'text',\n        rows: 3,\n        multiline: true,\n        label: \"Category Description\",\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }))), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, this.renderDialogActions()));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return CategoryModal;\n}(PureComponent), (_applyDecoratedDescriptor(_class2.prototype, \"onCloseClick\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onCloseClick\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onEntered\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onEntered\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onActionAndCLoseCLick\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onActionAndCLoseCLick\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onActionAndAddClick\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onActionAndAddClick\"), _class2.prototype)), _class2)) || _class) || _class) || _class);\nexport { CategoryModal as default };\nCategoryModal.propTypes = {\n  onSubmit: PropTypes.func,\n  restaurant_id: PropTypes.string,\n  isInvalid: PropTypes.bool\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(CATEGORY_FORM, \"CATEGORY_FORM\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/CategoryModal/CategoryModal.js\");\n  reactHotLoader.register(formFieldsSelector, \"formFieldsSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/CategoryModal/CategoryModal.js\");\n  reactHotLoader.register(isInvalidSelector, \"isInvalidSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/CategoryModal/CategoryModal.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/CategoryModal/CategoryModal.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/CategoryModal/CategoryModal.js\");\n  reactHotLoader.register(CategoryModal, \"CategoryModal\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/CategoryModal/CategoryModal.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/CategoryModal/CategoryModal.js"],"names":["React","PureComponent","PropTypes","Field","reduxForm","formValueSelector","isInvalid","Dialog","DialogActions","DialogContent","DialogTitle","Divider","Button","autobind","connect","abortPageRequests","updateCategory","getCategoryById","createCategory","categoryValidation","categoryModalOpenSelector","categoryModalLoadingSelector","categoryModeSelector","toggleCategoryModal","initialValuesSelector","clearModalData","categoryModalIdSelector","setMode","AppFormTextField","AppCleanHOC","AppPreloaderSmall","CATEGORY_FORM","formFieldsSelector","isInvalidSelector","mapStateToProps","state","initialValues","description","name","loading","id","open","mode","mapDispatchToProps","CategoryModal","form","validate","enableReinitialize","props","reset","restaurant_id","onSuccessAction","body","action","promise","then","res","requestAction","onCloseClick","onActionAndAddClick","onActionAndCLoseCLick","word","onEntered","onClose","renderDialogTitle","renderDialogActions","propTypes","onSubmit","func","string","bool"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm, formValueSelector, isInvalid } from 'redux-form';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport { autobind } from 'core-decorators';\n\nimport { connect } from 'react-redux';\n\nimport './CategoryModal.scss';\n\nimport {\n    abortPageRequests,\n    updateCategory,\n    getCategoryById,\n    createCategory\n} from '/scenes/Menu/modules/menu.categories.modules';\n\nimport {\n    categoryValidation,\n    categoryModalOpenSelector,\n    categoryModalLoadingSelector,\n    categoryModeSelector,\n    toggleCategoryModal,\n    initialValuesSelector,\n    clearModalData,\n    categoryModalIdSelector,\n    setMode\n} from './modules';\n\nimport {\n    AppFormTextField,\n    AppCleanHOC,\n    AppPreloaderSmall\n} from '/components'\n\nconst CATEGORY_FORM = 'Category';\n\nconst formFieldsSelector = formValueSelector(CATEGORY_FORM);\nconst isInvalidSelector = isInvalid(CATEGORY_FORM);\n\nconst mapStateToProps = state => ({\n    initialValues: initialValuesSelector(state),\n    description: formFieldsSelector(state, 'description'),\n    name: formFieldsSelector(state, 'name'),\n    loading: categoryModalLoadingSelector(state),\n    id: categoryModalIdSelector(state),\n    open: categoryModalOpenSelector(state),\n    mode: categoryModeSelector(state),\n    isInvalid: isInvalidSelector(state),\n});\n\nconst mapDispatchToProps = {\n    updateCategory,\n    createCategory,\n    abortPageRequests,\n    toggleCategoryModal,\n    getCategoryById,\n    clearModalData,\n    setMode\n};\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n\n@reduxForm({\n    form: CATEGORY_FORM,\n    validate: categoryValidation,\n    enableReinitialize: true\n})\n@AppCleanHOC\nclass CategoryModal extends PureComponent {\n\n    @autobind\n    onCloseClick() {\n        const {toggleCategoryModal, reset, clearModalData} = this.props;\n\n        toggleCategoryModal({open: false});\n        clearModalData();\n        reset();\n    }\n\n    @autobind\n    onEntered() {\n        const {mode, id, getCategoryById} = this.props;\n        if (mode === 'edit') {\n            getCategoryById({id});\n        }\n    }\n\n    requestAction() {\n        const {\n            createCategory,\n            updateCategory,\n            name,\n            description,\n            mode,\n            restaurant_id,\n            id,\n            onSuccessAction\n        } = this.props;\n\n        const body = {description, name, restaurant_id};\n\n        const action = mode === 'add' \n            ? createCategory({body})\n            : updateCategory({body: {...body, id}})\n\n        return action\n            .promise\n            .then( res => {\n                onSuccessAction && onSuccessAction(res)\n                return res\n            }) \n        \n\n    }\n\n    @autobind\n    onActionAndCLoseCLick() {\n        this.requestAction()\n            .then(this.onCloseClick);\n    }\n\n    @autobind\n    onActionAndAddClick() {\n        const {setMode, reset, clearModalData} = this.props;\n        this.requestAction()\n            .then(() => {\n                setMode('add');\n                reset();\n                clearModalData();\n            });\n\n    }\n\n    renderDialogActions() {\n        const { loading, mode, isInvalid } = this.props;\n\n        return (\n            <div className={ 'category-modal__actions' }>\n                <Button\n                    onClick={ this.onCloseClick }\n                    variant=\"contained\"\n                    disabled={ loading }\n                    className={ 'category-modal__actions-cancel' }>\n                    Cancel\n                </Button>\n                <Button\n                    onClick={ this.onActionAndAddClick }\n                    variant=\"contained\"\n                    color={ 'secondary' }\n                    disabled={ loading || isInvalid }\n                    className={ 'category-modal__actions-save' }>\n                    {mode === 'add' ? 'Save' : 'Update'} and add another\n                </Button>\n                <Button\n                    onClick={ this.onActionAndCLoseCLick }\n                    variant=\"contained\"\n                    color={ 'primary' }\n                    disabled={ loading || isInvalid }\n                    className={ 'category-modal__actions-save' }>\n                    {mode === 'add' ? 'Save' : 'Update'} and close\n                </Button>\n            </div>\n        );\n    }\n\n    renderDialogTitle() {\n        const {mode} = this.props;\n        const word = mode === 'add' ? 'Add' : 'Edit';\n\n        return `${word} category`;\n    }\n\n    render() {\n        const {loading, open} = this.props;\n\n        return (\n            <Dialog\n                open={ open }\n                onEntered={ this.onEntered }\n                onClose={ this.onClose }\n                fullWidth={ true }\n                maxWidth={ 'sm' }\n                className={ 'category-modal' }\n            >\n                { loading && <AppPreloaderSmall/> }\n                <DialogTitle>{ this.renderDialogTitle() }</DialogTitle>\n                <DialogContent>\n                    <form name={ 'category' }>\n                        <Field\n                            className={ 'category__field' }\n                            name=\"name\"\n                            required\n                            type={ 'text' }\n                            label={ \"Category name\" }\n                            component={ AppFormTextField }/>\n                        <Field\n                            className={ 'category__field' }\n                            name=\"description\"\n                            type={ 'text' }\n                            rows={3}\n                            multiline\n                            label={ \"Category Description\" }\n                            component={ AppFormTextField }/>\n                    </form>\n                </DialogContent>\n                <Divider/>\n                <DialogActions>\n                    { this.renderDialogActions() }\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nCategoryModal.propTypes = {\n    onSubmit: PropTypes.func,\n    restaurant_id: PropTypes.string,\n    isInvalid: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module"}