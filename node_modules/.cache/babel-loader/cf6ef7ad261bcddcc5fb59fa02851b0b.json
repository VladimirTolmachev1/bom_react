{"ast":null,"code":"import _regeneratorRuntime from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleEndDndSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(saveMenuItemsReorderingSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(dndSaga);\n\nimport { takeLatest, all, put, select, call } from 'redux-saga/effects';\nimport DndApiService from './dnd.api.service';\nimport { DND_DRAG_END, MENU_RESTAURATOR__SAVE_MENU_ITEMS_REORDERING } from './dnd.types';\nimport { itemsByDroppableIdSelector, dndCategoriesSelector, dndDishesSelector } from './dnd.selectors';\nimport { authRestaurantIdSelector } from '../core';\nimport { dndItemsReordered, toggleDndModForDroppable } from './dnd.actions';\nimport { CATEGORIES_DROPPABLE, DISHES_DROPPABLE } from './dnd.constants';\nimport { changeCategoriesOrdering } from '../categories/categories.actions';\nimport { changeDishesOrdering } from '../dishes/dishes.actions';\nimport { reorder, mapToIdsAndOrderByIndex } from './dnd.helpers';\nexport function handleEndDndSaga(_ref) {\n  var payload, _payload$dndResult, destination, source, items, reorderedItems;\n\n  return _regeneratorRuntime.wrap(function handleEndDndSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _payload$dndResult = payload.dndResult, destination = _payload$dndResult.destination, source = _payload$dndResult.source;\n\n          if (!(!destination || destination.droppableId === source.droppableId && destination.index === source.index)) {\n            _context.next = 4;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 4:\n          _context.next = 6;\n          return select(itemsByDroppableIdSelector, destination.droppableId);\n\n        case 6:\n          items = _context.sent;\n          reorderedItems = reorder(items, source.index, destination.index);\n          _context.next = 10;\n          return put(dndItemsReordered(destination.droppableId, reorderedItems));\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nfunction saveMenuItemsReorderingSaga() {\n  var orderedDishes, orderedCategories, restaurnatId, dishesOrder, categoriesOrder;\n  return _regeneratorRuntime.wrap(function saveMenuItemsReorderingSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(dndDishesSelector);\n\n        case 2:\n          orderedDishes = _context2.sent;\n          _context2.next = 5;\n          return select(dndCategoriesSelector);\n\n        case 5:\n          orderedCategories = _context2.sent;\n          _context2.next = 8;\n          return select(authRestaurantIdSelector);\n\n        case 8:\n          restaurnatId = _context2.sent;\n          dishesOrder = orderedDishes.map(mapToIdsAndOrderByIndex);\n          categoriesOrder = orderedCategories.map(mapToIdsAndOrderByIndex);\n          _context2.prev = 11;\n          _context2.next = 14;\n          return all([call(DndApiService.saveCategoriesOrder, categoriesOrder, restaurnatId), call(DndApiService.saveDishesOrder, dishesOrder, restaurnatId)]);\n\n        case 14:\n          if (!categoriesOrder.length) {\n            _context2.next = 17;\n            break;\n          }\n\n          _context2.next = 17;\n          return put(changeCategoriesOrdering(categoriesOrder));\n\n        case 17:\n          if (!dishesOrder.length) {\n            _context2.next = 20;\n            break;\n          }\n\n          _context2.next = 20;\n          return put(changeDishesOrdering(dishesOrder));\n\n        case 20:\n          _context2.next = 22;\n          return put(toggleDndModForDroppable(CATEGORIES_DROPPABLE));\n\n        case 22:\n          _context2.next = 24;\n          return put(toggleDndModForDroppable(DISHES_DROPPABLE));\n\n        case 24:\n          _context2.next = 29;\n          break;\n\n        case 26:\n          _context2.prev = 26;\n          _context2.t0 = _context2[\"catch\"](11);\n          console.error(_context2.t0);\n\n        case 29:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[11, 26]]);\n}\n\nexport function dndSaga() {\n  return _regeneratorRuntime.wrap(function dndSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeLatest(DND_DRAG_END, handleEndDndSaga), takeLatest(MENU_RESTAURATOR__SAVE_MENU_ITEMS_REORDERING, saveMenuItemsReorderingSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(handleEndDndSaga, \"handleEndDndSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dnd/dnd.sagas.js\");\n  reactHotLoader.register(saveMenuItemsReorderingSaga, \"saveMenuItemsReorderingSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dnd/dnd.sagas.js\");\n  reactHotLoader.register(dndSaga, \"dndSaga\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dnd/dnd.sagas.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dnd/dnd.sagas.js"],"names":["handleEndDndSaga","saveMenuItemsReorderingSaga","dndSaga","takeLatest","all","put","select","call","DndApiService","DND_DRAG_END","MENU_RESTAURATOR__SAVE_MENU_ITEMS_REORDERING","itemsByDroppableIdSelector","dndCategoriesSelector","dndDishesSelector","authRestaurantIdSelector","dndItemsReordered","toggleDndModForDroppable","CATEGORIES_DROPPABLE","DISHES_DROPPABLE","changeCategoriesOrdering","changeDishesOrdering","reorder","mapToIdsAndOrderByIndex","payload","dndResult","destination","source","droppableId","index","items","reorderedItems","orderedDishes","orderedCategories","restaurnatId","dishesOrder","map","categoriesOrder","saveCategoriesOrder","saveDishesOrder","length","console","error"],"mappings":"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","sourcesContent":["import { takeLatest, all, put, select, call } from 'redux-saga/effects';\nimport DndApiService from './dnd.api.service';\n\nimport {\n  DND_DRAG_END,\n  MENU_RESTAURATOR__SAVE_MENU_ITEMS_REORDERING,\n} from './dnd.types';\n\nimport {\n  itemsByDroppableIdSelector,\n  dndCategoriesSelector,\n  dndDishesSelector,\n} from './dnd.selectors';\n\nimport { authRestaurantIdSelector } from '../core';\n\nimport { dndItemsReordered, toggleDndModForDroppable } from './dnd.actions';\n\nimport { CATEGORIES_DROPPABLE, DISHES_DROPPABLE } from './dnd.constants';\n\nimport { changeCategoriesOrdering } from '../categories/categories.actions';\nimport { changeDishesOrdering } from '../dishes/dishes.actions';\n\nimport { reorder, mapToIdsAndOrderByIndex } from './dnd.helpers';\n\nexport function* handleEndDndSaga({ payload }) {\n  const {\n    dndResult: { destination, source },\n  } = payload;\n\n  if (\n    !destination ||\n    (destination.droppableId === source.droppableId &&\n      destination.index === source.index)\n  ) {\n    return;\n  }\n\n  const items = yield select(\n    itemsByDroppableIdSelector,\n    destination.droppableId,\n  );\n\n  const reorderedItems = reorder(items, source.index, destination.index);\n\n  yield put(dndItemsReordered(destination.droppableId, reorderedItems));\n}\n\nfunction* saveMenuItemsReorderingSaga() {\n  const orderedDishes = yield select(dndDishesSelector);\n  const orderedCategories = yield select(dndCategoriesSelector);\n  const restaurnatId = yield select(authRestaurantIdSelector);\n\n  const dishesOrder = orderedDishes.map(mapToIdsAndOrderByIndex);\n  const categoriesOrder = orderedCategories.map(mapToIdsAndOrderByIndex);\n\n  try {\n    yield all([\n      call(DndApiService.saveCategoriesOrder, categoriesOrder, restaurnatId),\n      call(DndApiService.saveDishesOrder, dishesOrder, restaurnatId),\n    ]);\n\n    if (categoriesOrder.length) {\n      yield put(changeCategoriesOrdering(categoriesOrder));\n    }\n\n    if (dishesOrder.length) {\n      yield put(changeDishesOrdering(dishesOrder));\n    }\n\n    yield put(toggleDndModForDroppable(CATEGORIES_DROPPABLE));\n    yield put(toggleDndModForDroppable(DISHES_DROPPABLE));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function* dndSaga() {\n  yield all([\n    takeLatest(DND_DRAG_END, handleEndDndSaga),\n    takeLatest(\n      MENU_RESTAURATOR__SAVE_MENU_ITEMS_REORDERING,\n      saveMenuItemsReorderingSaga,\n    ),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}