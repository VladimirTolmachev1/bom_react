{"ast":null,"code":"import _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Grid } from '@material-ui/core';\nimport { queryParamsFromPropsSelector } from '../../selectors/common';\nimport { authRestaurantIdSelector } from '../RestaurantInfo/modules';\nimport { FullScreenPreloader } from '../../components';\nimport { connectStripeToResourant, isStripeConnectingSelector, setStripeConnectionErrorMessage, stripeConnectionErrorSelector } from './modules';\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    queryParams: queryParamsFromPropsSelector(ownProps),\n    errorMessage: stripeConnectionErrorSelector(state),\n    restaurantId: authRestaurantIdSelector(state),\n    isLoading: isStripeConnectingSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      connectStripeToResourant: connectStripeToResourant\n    }, dispatch)\n  };\n};\n\nvar ConnectStripeToRestaurant = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec(_class =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ConnectStripeToRestaurant, _Component);\n\n  function ConnectStripeToRestaurant() {\n    _classCallCheck(this, ConnectStripeToRestaurant);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConnectStripeToRestaurant).apply(this, arguments));\n  }\n\n  _createClass(ConnectStripeToRestaurant, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          queryParams = _this$props.queryParams,\n          restaurantId = _this$props.restaurantId,\n          actions = _this$props.actions;\n\n      if (queryParams.code) {\n        actions.connectStripeToResourant({\n          body: {\n            code: queryParams.code,\n            restaurant_id: Number(restaurantId)\n          }\n        });\n      }\n\n      if (queryParams.error) {\n        setStripeConnectionErrorMessage(queryParams.error_description);\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      var _this$props2 = this.props,\n          history = _this$props2.history,\n          isLoading = _this$props2.isLoading,\n          errorMessage = _this$props2.errorMessage;\n\n      if (!isLoading && !errorMessage) {\n        history.push('/restaurant_info');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          isLoading = _this$props3.isLoading,\n          errorMessage = _this$props3.errorMessage;\n      return React.createElement(Grid, {\n        justify: \"center\",\n        alignItems: \"center\",\n        className: \"app-static-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, isLoading && React.createElement(FullScreenPreloader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \" Connecting to Stripe \")), errorMessage && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \" \", errorMessage));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return ConnectStripeToRestaurant;\n}(Component)) || _class);\nConnectStripeToRestaurant.propTypes = {\n  queryParams: PropTypes.object,\n  errorMessage: PropTypes.string,\n  restaurantId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  isLoading: PropTypes.bool,\n  actions: PropTypes.object.isRequired\n};\nvar _default = ConnectStripeToRestaurant;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\");\n  reactHotLoader.register(ConnectStripeToRestaurant, \"ConnectStripeToRestaurant\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ConnectStripeToRestaurant/ConnectStripeToRestaurant.js"],"names":["React","Component","PropTypes","connect","bindActionCreators","Grid","queryParamsFromPropsSelector","authRestaurantIdSelector","FullScreenPreloader","connectStripeToResourant","isStripeConnectingSelector","setStripeConnectionErrorMessage","stripeConnectionErrorSelector","mapStateToProps","state","ownProps","queryParams","errorMessage","restaurantId","isLoading","mapDispatchToProps","dispatch","actions","ConnectStripeToRestaurant","props","code","body","restaurant_id","Number","error","error_description","history","push","propTypes","object","string","oneOfType","number","bool","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Grid } from '@material-ui/core';\n\nimport { queryParamsFromPropsSelector } from '../../selectors/common';\nimport { authRestaurantIdSelector } from '../RestaurantInfo/modules';\nimport { FullScreenPreloader } from '../../components';\nimport {\n  connectStripeToResourant,\n  isStripeConnectingSelector,\n  setStripeConnectionErrorMessage,\n  stripeConnectionErrorSelector,\n} from './modules';\n\nconst mapStateToProps = (state, ownProps) => ({\n  queryParams: queryParamsFromPropsSelector(ownProps),\n  errorMessage: stripeConnectionErrorSelector(state),\n  restaurantId: authRestaurantIdSelector(state),\n  isLoading: isStripeConnectingSelector(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(\n    {\n      connectStripeToResourant,\n    },\n    dispatch,\n  ),\n});\n\n@connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)\nclass ConnectStripeToRestaurant extends Component {\n  componentDidMount() {\n    const { queryParams, restaurantId, actions } = this.props;\n    if (queryParams.code) {\n      actions.connectStripeToResourant({\n        body: {\n          code: queryParams.code,\n          restaurant_id: Number(restaurantId),\n        },\n      });\n    }\n\n    if (queryParams.error) {\n      setStripeConnectionErrorMessage(queryParams.error_description);\n    }\n  }\n\n  componentWillUpdate() {\n    const { history, isLoading, errorMessage } = this.props;\n\n    if (!isLoading && !errorMessage) {\n      history.push('/restaurant_info');\n    }\n  }\n\n  render() {\n    const { isLoading, errorMessage } = this.props;\n\n    return (\n      <Grid\n        justify=\"center\"\n        alignItems=\"center\"\n        className=\"app-static-container\">\n        {isLoading && (\n          <FullScreenPreloader>\n            <p> Connecting to Stripe </p>\n          </FullScreenPreloader>\n        )}\n\n        {errorMessage && <p> {errorMessage}</p>}\n      </Grid>\n    );\n  }\n}\n\nConnectStripeToRestaurant.propTypes = {\n  queryParams: PropTypes.object,\n  errorMessage: PropTypes.string,\n  restaurantId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  isLoading: PropTypes.bool,\n  actions: PropTypes.object.isRequired,\n};\n\nexport default ConnectStripeToRestaurant;\n"]},"metadata":{},"sourceType":"module"}