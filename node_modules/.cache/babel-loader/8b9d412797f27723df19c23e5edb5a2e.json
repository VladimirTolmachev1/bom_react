{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { SET_THEME_COLOR, SIGN_IN_REQUEST, SIGN_IN_SUCCESS, SIGN_IN_ERROR, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_ERROR, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_ERROR, DICTIONARY_GET_REQUEST, DICTIONARY_GET_SUCCESS, DICTIONARY_GET_ERROR, SIGN_OUT, API_REQUESTS_ABORT, LOG_REQUEST, dictionaryResource } from './core.types';\nimport { CALL_API } from '../../store/middleware/api';\nexport function setThemeColor(color, bgColor) {\n  return {\n    type: SET_THEME_COLOR,\n    color: color,\n    bgColor: bgColor\n  };\n}\nexport function signIn(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/auth/login',\n      method: 'POST',\n      types: [SIGN_IN_REQUEST, SIGN_IN_SUCCESS, SIGN_IN_ERROR],\n      logger: {\n        success: 'Successfully signed in',\n        error: 'Error during sign in'\n      },\n      body: body\n    }\n  };\n}\nexport function forgotPassword(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/password/email',\n      method: 'POST',\n      types: [FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_ERROR],\n      logger: {\n        success: 'Please, check your email to follow next instructions',\n        error: 'Error during password recovery'\n      },\n      body: body\n    }\n  };\n}\nexport function resetPassword(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/password/reset',\n      method: 'POST',\n      types: [RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_ERROR],\n      logger: {\n        success: 'Password was successfully reset',\n        error: 'Error during password reset'\n      },\n      body: body\n    }\n  };\n}\nexport function getDictionaries() {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: dictionaryResource,\n      method: 'GET',\n      types: [DICTIONARY_GET_REQUEST, DICTIONARY_GET_SUCCESS, DICTIONARY_GET_ERROR]\n    }\n  };\n}\nexport function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [SIGN_IN_REQUEST, FORGOT_PASSWORD_REQUEST]\n  };\n}\nexport function makeApiRequest(_ref) {\n  var type = _ref.type,\n      rest = _objectWithoutProperties(_ref, [\"type\"]);\n\n  return _objectSpread({\n    type: type\n  }, rest);\n}\nexport function logRequest(_ref2) {\n  var request = _ref2.request,\n      response = _ref2.response;\n  return {\n    type: LOG_REQUEST,\n    request: request,\n    response: response\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(setThemeColor, \"setThemeColor\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n  reactHotLoader.register(signIn, \"signIn\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n  reactHotLoader.register(forgotPassword, \"forgotPassword\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n  reactHotLoader.register(resetPassword, \"resetPassword\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n  reactHotLoader.register(getDictionaries, \"getDictionaries\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n  reactHotLoader.register(signOut, \"signOut\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n  reactHotLoader.register(makeApiRequest, \"makeApiRequest\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n  reactHotLoader.register(logRequest, \"logRequest\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/core/core.actions.js"],"names":["SET_THEME_COLOR","SIGN_IN_REQUEST","SIGN_IN_SUCCESS","SIGN_IN_ERROR","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","DICTIONARY_GET_REQUEST","DICTIONARY_GET_SUCCESS","DICTIONARY_GET_ERROR","SIGN_OUT","API_REQUESTS_ABORT","LOG_REQUEST","dictionaryResource","CALL_API","setThemeColor","color","bgColor","type","signIn","body","request","endpoint","method","types","logger","success","error","forgotPassword","resetPassword","getDictionaries","signOut","abortPageRequests","requestTypes","makeApiRequest","rest","logRequest","response"],"mappings":"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","sourcesContent":["import {\n  SET_THEME_COLOR,\n  SIGN_IN_REQUEST,\n  SIGN_IN_SUCCESS,\n  SIGN_IN_ERROR,\n  FORGOT_PASSWORD_REQUEST,\n  FORGOT_PASSWORD_SUCCESS,\n  FORGOT_PASSWORD_ERROR,\n  RESET_PASSWORD_REQUEST,\n  RESET_PASSWORD_SUCCESS,\n  RESET_PASSWORD_ERROR,\n  DICTIONARY_GET_REQUEST,\n  DICTIONARY_GET_SUCCESS,\n  DICTIONARY_GET_ERROR,\n  SIGN_OUT,\n  API_REQUESTS_ABORT,\n  LOG_REQUEST,\n  dictionaryResource,\n} from './core.types';\n\nimport { CALL_API } from '../../store/middleware/api';\n\nexport function setThemeColor(color, bgColor) {\n  return {\n    type: SET_THEME_COLOR,\n    color,\n    bgColor,\n  };\n}\n\nexport function signIn(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/auth/login',\n      method: 'POST',\n      types: [SIGN_IN_REQUEST, SIGN_IN_SUCCESS, SIGN_IN_ERROR],\n      logger: {\n        success: 'Successfully signed in',\n        error: 'Error during sign in',\n      },\n      body,\n    },\n  };\n}\n\nexport function forgotPassword(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/password/email',\n      method: 'POST',\n      types: [\n        FORGOT_PASSWORD_REQUEST,\n        FORGOT_PASSWORD_SUCCESS,\n        FORGOT_PASSWORD_ERROR,\n      ],\n      logger: {\n        success: 'Please, check your email to follow next instructions',\n        error: 'Error during password recovery',\n      },\n      body,\n    },\n  };\n}\n\nexport function resetPassword(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: '/password/reset',\n      method: 'POST',\n      types: [\n        RESET_PASSWORD_REQUEST,\n        RESET_PASSWORD_SUCCESS,\n        RESET_PASSWORD_ERROR,\n      ],\n      logger: {\n        success: 'Password was successfully reset',\n        error: 'Error during password reset',\n      },\n      body,\n    },\n  };\n}\n\nexport function getDictionaries() {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: dictionaryResource,\n      method: 'GET',\n      types: [\n        DICTIONARY_GET_REQUEST,\n        DICTIONARY_GET_SUCCESS,\n        DICTIONARY_GET_ERROR,\n      ],\n    },\n  };\n}\n\nexport function signOut() {\n  return {\n    type: SIGN_OUT,\n  };\n}\n\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [SIGN_IN_REQUEST, FORGOT_PASSWORD_REQUEST],\n  };\n}\n\nexport function makeApiRequest({ type, ...rest }) {\n  return {\n    type,\n    ...rest,\n  };\n}\n\nexport function logRequest({ request, response }) {\n  return {\n    type: LOG_REQUEST,\n    request,\n    response,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}