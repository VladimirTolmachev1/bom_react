{"ast":null,"code":"import _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _dec,\n    _dec2,\n    _dec3,\n    _class,\n    _class2,\n    _class3,\n    _temp,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { autobind } from 'core-decorators';\nimport { Grid, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Divider, Button, withStyles } from '@material-ui/core';\nimport styles from './styles';\nimport { AppSwitch, InfoSection } from '../../../../components';\nimport { clientInfoByOrderIdSelector } from '../../../../modules/orders';\nimport { HelperService } from '../../../../services';\nimport { orderDeliveryMethods, deliveryMethods, paymentMethods } from '../../../../constants';\nimport { orderShape } from '../../../../constants/propTypes';\nimport { checkoutValidations } from '../../../Checkout/modules/checkout.validations';\nvar DELIVERY = orderDeliveryMethods.DELIVERY,\n    PICKUP = orderDeliveryMethods.PICKUP;\nvar PAY_ON_DELIVERY = paymentMethods.PAY_ON_DELIVERY,\n    PAY_ON_PICKUP = paymentMethods.PAY_ON_PICKUP;\nvar ORDER_CLIENT = 'Order clietn form';\nvar formFieldsSelector = formValueSelector(ORDER_CLIENT); // field-level redux-form validator\n\nvar required = function required(value) {\n  return value ? undefined : 'Required';\n};\n\nvar FORM_FIELDS_TO_SELECT = ['id', 'name', 'email', 'phone', 'city', 'street_address', 'building', 'appartment', 'delivery_method', 'payment_method'];\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var order = _ref.order;\n  return {\n    order: formFieldsSelector.apply(void 0, [state].concat(FORM_FIELDS_TO_SELECT)),\n    initialValues: clientInfoByOrderIdSelector(state, {\n      orderId: order.id\n    })\n  };\n};\n\nvar ClientInfoModal = (_dec = connect(mapStateToProps), _dec2 = withStyles(styles), _dec3 = reduxForm({\n  form: ORDER_CLIENT,\n  enableReinitialize: true,\n  validate: checkoutValidations\n}), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ClientInfoModal, _Component);\n\n  function ClientInfoModal() {\n    _classCallCheck(this, ClientInfoModal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClientInfoModal).apply(this, arguments));\n  }\n\n  _createClass(ClientInfoModal, [{\n    key: \"onSubmit\",\n    value: function onSubmit() {\n      var _this$props = this.props,\n          order = _this$props.order,\n          onSubmit = _this$props.onSubmit;\n      onSubmit && onSubmit(order);\n    }\n  }, {\n    key: \"handleDeliveryMethodChange\",\n    value: function handleDeliveryMethodChange(_ref2) {\n      var checked = _ref2.target.checked;\n      var change = this.props.change;\n      var newDeliverymethod = checked ? PICKUP : DELIVERY;\n      var newPaymentMethod = checked ? PAY_ON_PICKUP : PAY_ON_DELIVERY;\n      change('delivery_method', newDeliverymethod);\n      change('payment_method', newPaymentMethod);\n    }\n  }, {\n    key: \"isPickupMethod\",\n    value: function isPickupMethod() {\n      return this.props.order.delivery_method === PICKUP;\n    }\n  }, {\n    key: \"renderEditDeliveryMethod\",\n    value: function renderEditDeliveryMethod() {\n      var restaurantDeliveryMethod = this.props.restaurantDeliveryMethod;\n\n      if (restaurantDeliveryMethod !== deliveryMethods.PICKUP_AND_DELIVERY) {\n        return null;\n      }\n\n      return React.createElement(Grid, {\n        item: true,\n        key: \"delivery_method\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(AppSwitch, {\n        offCaption: \"Delivery\",\n        onCaption: \"Pickup\",\n        onChange: this.handleDeliveryMethodChange,\n        checked: this.isPickupMethod(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderActions\",\n    value: function renderActions() {\n      var _this$props2 = this.props,\n          invalid = _this$props2.invalid,\n          isEditing = _this$props2.isEditing,\n          closeBtnText = _this$props2.closeBtnText,\n          submitBtnText = _this$props2.submitBtnText,\n          onClose = _this$props2.onClose,\n          classes = _this$props2.classes;\n      return React.createElement(React.Fragment, null, React.createElement(Button, {\n        onClick: onClose,\n        variant: \"contained\",\n        color: isEditing ? 'default' : 'primary',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, closeBtnText), isEditing && React.createElement(Button, {\n        className: classes.saveButton,\n        onClick: this.onSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: invalid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, submitBtnText));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          open = _this$props3.open,\n          order = _this$props3.order,\n          title = _this$props3.title,\n          onClose = _this$props3.onClose,\n          classes = _this$props3.classes,\n          isEditing = _this$props3.isEditing,\n          toggleEditing = _this$props3.toggleEditing,\n          canToggleEdit = _this$props3.canToggleEdit,\n          hideOrderDetails = _this$props3.hideOrderDetails,\n          showAdrressDetails = _this$props3.showAdrressDetails;\n      return React.createElement(Dialog, {\n        open: open,\n        fullWidth: true,\n        onClose: onClose,\n        maxWidth: \"sm\",\n        className: \"category-modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        justify: \"space-between\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, title, canToggleEdit && React.createElement(IconButton, {\n        onClick: toggleEditing,\n        className: classes.editIconButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(EditIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })))), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        spacing: 16,\n        className: classes.mainSectionWrapper,\n        wrap: \"wrap\",\n        direction: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(InfoSection, {\n        isEditing: isEditing,\n        header: \"Contacts:\",\n        editingItemsProps: {\n          className: classes.editingItem\n        },\n        items: [{\n          name: 'name',\n          label: 'Name',\n          value: order.name\n        }, {\n          name: 'email',\n          label: 'Email',\n          value: order.email\n        }, {\n          name: 'phone',\n          label: 'Phone',\n          value: order.phone\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), (!this.isPickupMethod() || showAdrressDetails) && React.createElement(InfoSection, {\n        header: \"Address:\",\n        isEditing: isEditing,\n        editingItemsProps: {\n          className: classes.editingItem,\n          validate: required\n        },\n        items: [{\n          name: 'city',\n          label: 'City',\n          value: order.city\n        }, {\n          name: 'street_address',\n          label: 'Street',\n          value: order.street_address\n        }, {\n          name: 'building',\n          label: 'Building',\n          value: order.building\n        }, {\n          name: 'appartment',\n          label: 'Apartment',\n          value: order.appartment\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), !hideOrderDetails && React.createElement(InfoSection, {\n        isEditing: isEditing,\n        header: isEditing ? 'Delivery service' : 'Order:',\n        items: [{\n          label: 'Delivery method',\n          value: HelperService.constToReadableText(order.delivery_method),\n          renderEditing: this.renderEditDeliveryMethod\n        }, {\n          label: 'Payment method',\n          value: HelperService.constToReadableText(order.payment_method),\n          renderEditing: function renderEditing() {\n            return null;\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      })), (order.comment || isEditing) && !hideOrderDetails && React.createElement(InfoSection, {\n        isEditing: isEditing,\n        className: classes.commentSection,\n        header: \"Comment to order:\",\n        items: [{\n          value: order.comment,\n          name: 'comment',\n          multiline: true,\n          className: classes.editCommentField\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      })), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, this.renderActions()));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return ClientInfoModal;\n}(Component), _class3.propTypes = {\n  title: PropTypes.string,\n  isEditing: PropTypes.bool,\n  toggleEditing: PropTypes.func,\n  canToggleEdit: PropTypes.bool,\n  submitBtnText: PropTypes.string,\n  closeBtnText: PropTypes.string,\n  hideOrderDetails: PropTypes.bool,\n  showAdrressDetails: PropTypes.bool,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired,\n  restaurantDeliveryMethod: PropTypes.string,\n  order: PropTypes.oneOfType([PropTypes.shape(orderShape), PropTypes.object])\n}, _class3.defaultProps = {\n  submitBtnText: 'Save',\n  closeBtnText: 'Close',\n  title: 'Сlient info',\n  canToggleEdit: true,\n  hideOrderDetails: false,\n  showAdrressDetails: false,\n  isEditing: false\n}, _temp), (_applyDecoratedDescriptor(_class2.prototype, \"onSubmit\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onSubmit\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"handleDeliveryMethodChange\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"handleDeliveryMethodChange\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"renderEditDeliveryMethod\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"renderEditDeliveryMethod\"), _class2.prototype)), _class2)) || _class) || _class) || _class);\nexport { ClientInfoModal as default };\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(DELIVERY, \"DELIVERY\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(PICKUP, \"PICKUP\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(PAY_ON_DELIVERY, \"PAY_ON_DELIVERY\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(PAY_ON_PICKUP, \"PAY_ON_PICKUP\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(ORDER_CLIENT, \"ORDER_CLIENT\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(formFieldsSelector, \"formFieldsSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(required, \"required\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(FORM_FIELDS_TO_SELECT, \"FORM_FIELDS_TO_SELECT\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n  reactHotLoader.register(ClientInfoModal, \"ClientInfoModal\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/RestaurantOrders/components/ClientInfoModal/ClientInfoModal.js"],"names":["React","Component","PropTypes","EditIcon","reduxForm","formValueSelector","connect","autobind","Grid","Dialog","DialogActions","DialogContent","DialogTitle","IconButton","Divider","Button","withStyles","styles","AppSwitch","InfoSection","clientInfoByOrderIdSelector","HelperService","orderDeliveryMethods","deliveryMethods","paymentMethods","orderShape","checkoutValidations","DELIVERY","PICKUP","PAY_ON_DELIVERY","PAY_ON_PICKUP","ORDER_CLIENT","formFieldsSelector","required","value","undefined","FORM_FIELDS_TO_SELECT","mapStateToProps","state","order","initialValues","orderId","id","ClientInfoModal","form","enableReinitialize","validate","props","onSubmit","checked","target","change","newDeliverymethod","newPaymentMethod","delivery_method","restaurantDeliveryMethod","PICKUP_AND_DELIVERY","handleDeliveryMethodChange","isPickupMethod","invalid","isEditing","closeBtnText","submitBtnText","onClose","classes","saveButton","open","title","toggleEditing","canToggleEdit","hideOrderDetails","showAdrressDetails","editIconButton","mainSectionWrapper","className","editingItem","name","label","email","phone","city","street_address","building","appartment","constToReadableText","renderEditing","renderEditDeliveryMethod","payment_method","comment","commentSection","multiline","editCommentField","renderActions","propTypes","string","bool","func","isRequired","object","oneOfType","shape","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { autobind } from 'core-decorators';\nimport {\n  Grid,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Divider,\n  Button,\n  withStyles,\n} from '@material-ui/core';\n\nimport styles from './styles';\nimport { AppSwitch, InfoSection } from '../../../../components';\nimport { clientInfoByOrderIdSelector } from '../../../../modules/orders';\nimport { HelperService } from '../../../../services';\nimport {\n  orderDeliveryMethods,\n  deliveryMethods,\n  paymentMethods,\n} from '../../../../constants';\nimport { orderShape } from '../../../../constants/propTypes';\nimport { checkoutValidations } from '../../../Checkout/modules/checkout.validations';\n\nconst { DELIVERY, PICKUP } = orderDeliveryMethods;\nconst { PAY_ON_DELIVERY, PAY_ON_PICKUP } = paymentMethods;\n\nconst ORDER_CLIENT = 'Order clietn form';\nconst formFieldsSelector = formValueSelector(ORDER_CLIENT);\n\n// field-level redux-form validator\nconst required = value => (value ? undefined : 'Required');\n\nconst FORM_FIELDS_TO_SELECT = [\n  'id',\n  'name',\n  'email',\n  'phone',\n  'city',\n  'street_address',\n  'building',\n  'appartment',\n  'delivery_method',\n  'payment_method',\n];\n\nconst mapStateToProps = (state, { order }) => ({\n  order: formFieldsSelector(state, ...FORM_FIELDS_TO_SELECT),\n  initialValues: clientInfoByOrderIdSelector(state, { orderId: order.id }),\n});\n\nexport default\n@connect(mapStateToProps)\n@withStyles(styles)\n@reduxForm({\n  form: ORDER_CLIENT,\n  enableReinitialize: true,\n  validate: checkoutValidations,\n})\nclass ClientInfoModal extends Component {\n  static propTypes = {\n    title: PropTypes.string,\n    isEditing: PropTypes.bool,\n    toggleEditing: PropTypes.func,\n    canToggleEdit: PropTypes.bool,\n    submitBtnText: PropTypes.string,\n    closeBtnText: PropTypes.string,\n    hideOrderDetails: PropTypes.bool,\n    showAdrressDetails: PropTypes.bool,\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    classes: PropTypes.object.isRequired,\n    restaurantDeliveryMethod: PropTypes.string,\n    order: PropTypes.oneOfType([PropTypes.shape(orderShape), PropTypes.object]),\n  };\n\n  static defaultProps = {\n    submitBtnText: 'Save',\n    closeBtnText: 'Close',\n    title: 'Сlient info',\n    canToggleEdit: true,\n    hideOrderDetails: false,\n    showAdrressDetails: false,\n    isEditing: false,\n  };\n\n  @autobind\n  onSubmit() {\n    const { order, onSubmit } = this.props;\n    onSubmit && onSubmit(order);\n  }\n\n  @autobind\n  handleDeliveryMethodChange({ target: { checked } }) {\n    const { change } = this.props;\n\n    const newDeliverymethod = checked ? PICKUP : DELIVERY;\n    const newPaymentMethod = checked ? PAY_ON_PICKUP : PAY_ON_DELIVERY;\n\n    change('delivery_method', newDeliverymethod);\n    change('payment_method', newPaymentMethod);\n  }\n\n  isPickupMethod() {\n    return this.props.order.delivery_method === PICKUP;\n  }\n\n  @autobind\n  renderEditDeliveryMethod() {\n    const { restaurantDeliveryMethod } = this.props;\n\n    if (restaurantDeliveryMethod !== deliveryMethods.PICKUP_AND_DELIVERY) {\n      return null;\n    }\n\n    return (\n      <Grid item key=\"delivery_method\">\n        <AppSwitch\n          offCaption=\"Delivery\"\n          onCaption=\"Pickup\"\n          onChange={this.handleDeliveryMethodChange}\n          checked={this.isPickupMethod()}\n        />\n      </Grid>\n    );\n  }\n\n  renderActions() {\n    const {\n      invalid,\n      isEditing,\n      closeBtnText,\n      submitBtnText,\n      onClose,\n      classes,\n    } = this.props;\n    return (\n      <>\n        <Button\n          onClick={onClose}\n          variant=\"contained\"\n          color={isEditing ? 'default' : 'primary'}>\n          {closeBtnText}\n        </Button>\n\n        {isEditing && (\n          <Button\n            className={classes.saveButton}\n            onClick={this.onSubmit}\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={invalid}>\n            {submitBtnText}\n          </Button>\n        )}\n      </>\n    );\n  }\n\n  render() {\n    const {\n      open,\n      order,\n      title,\n      onClose,\n      classes,\n      isEditing,\n      toggleEditing,\n      canToggleEdit,\n      hideOrderDetails,\n      showAdrressDetails,\n    } = this.props;\n    return (\n      <Dialog\n        open={open}\n        fullWidth\n        onClose={onClose}\n        maxWidth=\"sm\"\n        className=\"category-modal\">\n        <DialogTitle>\n          <Grid container alignItems=\"center\" justify=\"space-between\">\n            {title}\n            {canToggleEdit && (\n              <IconButton\n                onClick={toggleEditing}\n                className={classes.editIconButton}>\n                <EditIcon />\n              </IconButton>\n            )}\n          </Grid>\n        </DialogTitle>\n        <DialogContent>\n          <Grid\n            container\n            spacing={16}\n            className={classes.mainSectionWrapper}\n            wrap=\"wrap\"\n            direction=\"column\">\n            <InfoSection\n              isEditing={isEditing}\n              header=\"Contacts:\"\n              editingItemsProps={{\n                className: classes.editingItem,\n              }}\n              items={[\n                {\n                  name: 'name',\n                  label: 'Name',\n                  value: order.name,\n                },\n                {\n                  name: 'email',\n                  label: 'Email',\n                  value: order.email,\n                },\n                {\n                  name: 'phone',\n                  label: 'Phone',\n                  value: order.phone,\n                },\n              ]}\n            />\n\n            {(!this.isPickupMethod() || showAdrressDetails) && (\n              <InfoSection\n                header=\"Address:\"\n                isEditing={isEditing}\n                editingItemsProps={{\n                  className: classes.editingItem,\n                  validate: required,\n                }}\n                items={[\n                  {\n                    name: 'city',\n                    label: 'City',\n                    value: order.city,\n                  },\n                  {\n                    name: 'street_address',\n                    label: 'Street',\n                    value: order.street_address,\n                  },\n                  {\n                    name: 'building',\n                    label: 'Building',\n                    value: order.building,\n                  },\n                  {\n                    name: 'appartment',\n                    label: 'Apartment',\n                    value: order.appartment,\n                  },\n                ]}\n              />\n            )}\n\n            {!hideOrderDetails && (\n              <InfoSection\n                isEditing={isEditing}\n                header={isEditing ? 'Delivery service' : 'Order:'}\n                items={[\n                  {\n                    label: 'Delivery method',\n                    value: HelperService.constToReadableText(\n                      order.delivery_method,\n                    ),\n                    renderEditing: this.renderEditDeliveryMethod,\n                  },\n                  {\n                    label: 'Payment method',\n                    value: HelperService.constToReadableText(\n                      order.payment_method,\n                    ),\n                    renderEditing: () => null,\n                  },\n                ]}\n              />\n            )}\n          </Grid>\n\n          {(order.comment || isEditing) && !hideOrderDetails && (\n            <InfoSection\n              isEditing={isEditing}\n              className={classes.commentSection}\n              header=\"Comment to order:\"\n              items={[\n                {\n                  value: order.comment,\n                  name: 'comment',\n                  multiline: true,\n                  className: classes.editCommentField,\n                },\n              ]}\n            />\n          )}\n        </DialogContent>\n        <Divider />\n        <DialogActions>{this.renderActions()}</DialogActions>\n      </Dialog>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}