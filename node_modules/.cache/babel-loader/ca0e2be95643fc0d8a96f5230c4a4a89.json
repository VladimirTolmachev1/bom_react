{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { ReduxCrudService } from '../../services';\nimport { CREATE_RESTAURANT_SUCCESS, DELETE_RESTAURANT_SUCCESS } from '../../modules/restaurants';\nimport { DELETE_DISH_SUCCESS, PUBLISH_DISH_SUCCESS, UNPUBLISH_DISH_SUCCESS, CREATE_DISH_SUCCESS } from // UPDATE_DISH_SUCCESS\n'../../modules/dishes';\nimport { UPDATE_CATEGORY_SUCCESS, CREATE_CATEGORY_SUCCESS, DELETE_CATEGORY_SUCCESS } from '../../modules/categories';\nvar syncActionTypesTriggers = [// restaurants\nCREATE_RESTAURANT_SUCCESS, DELETE_RESTAURANT_SUCCESS, // categories\nUPDATE_CATEGORY_SUCCESS, CREATE_CATEGORY_SUCCESS, DELETE_CATEGORY_SUCCESS, // dishes\nDELETE_DISH_SUCCESS, PUBLISH_DISH_SUCCESS, UNPUBLISH_DISH_SUCCESS, CREATE_DISH_SUCCESS];\n\nvar _default = function _default(store) {\n  return function (next) {\n    return function (action) {\n      if (!syncActionTypesTriggers.includes(action.type)) {\n        return next(action);\n      }\n\n      var resource = \"/\".concat(action.type.split('/')[1]);\n      var slice = store.getState()[resource];\n      var body = slice.filters;\n      var deleteActionTypesTriggers = syncActionTypesTriggers.filter(function (type) {\n        return type.includes('delete');\n      });\n\n      if (deleteActionTypesTriggers.includes(action.type) && body) {\n        body.page = 1;\n        store.dispatch({\n          type: \"\".concat(resource, \"/filters/changed\"),\n          filters: body\n        });\n      } // if dish list\n\n\n      if ([PUBLISH_DISH_SUCCESS, UNPUBLISH_DISH_SUCCESS, CREATE_DISH_SUCCESS].includes(action.type)) {\n        body.page = 1;\n        store.dispatch({\n          type: \"\".concat(resource, \"/filters/changed\"),\n          filters: body\n        });\n      }\n\n      store.dispatch(ReduxCrudService.resourceAction({\n        resource: resource,\n        method: 'GET'\n      })({\n        body: body\n      }));\n      return next(action);\n    };\n  };\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(syncActionTypesTriggers, \"syncActionTypesTriggers\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/store/middleware/crudMiddleware.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/store/middleware/crudMiddleware.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/store/middleware/crudMiddleware.js"],"names":["ReduxCrudService","CREATE_RESTAURANT_SUCCESS","DELETE_RESTAURANT_SUCCESS","DELETE_DISH_SUCCESS","PUBLISH_DISH_SUCCESS","UNPUBLISH_DISH_SUCCESS","CREATE_DISH_SUCCESS","UPDATE_CATEGORY_SUCCESS","CREATE_CATEGORY_SUCCESS","DELETE_CATEGORY_SUCCESS","syncActionTypesTriggers","store","next","action","includes","type","resource","split","slice","getState","body","filters","deleteActionTypesTriggers","filter","page","dispatch","resourceAction","method"],"mappings":";;;;;AAAA,SAASA,gBAAT,QAAiC,gBAAjC;AACA,SACEC,yBADF,EAEEC,yBAFF,QAGO,2BAHP;AAKA,SACEC,mBADF,EAEEC,oBAFF,EAGEC,sBAHF,EAIEC,mBAJF,QAKE;AACK,sBANP;AAQA,SACEC,uBADF,EAEEC,uBAFF,EAGEC,uBAHF,QAIO,0BAJP;AAMA,IAAMC,uBAAuB,GAAG,CAC9B;AACAT,yBAF8B,EAG9BC,yBAH8B,EAK9B;AACAK,uBAN8B,EAO9BC,uBAP8B,EAQ9BC,uBAR8B,EAU9B;AACAN,mBAX8B,EAY9BC,oBAZ8B,EAa9BC,sBAb8B,EAc9BC,mBAd8B,CAAhC;;eAkBe,kBAAAK,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACxC,UAAI,CAACH,uBAAuB,CAACI,QAAxB,CAAiCD,MAAM,CAACE,IAAxC,CAAL,EAAoD;AAClD,eAAOH,IAAI,CAACC,MAAD,CAAX;AACD;;AAED,UAAMG,QAAQ,cAAOH,MAAM,CAACE,IAAP,CAAYE,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAP,CAAd;AACA,UAAMC,KAAK,GAAGP,KAAK,CAACQ,QAAN,GAAiBH,QAAjB,CAAd;AACA,UAAMI,IAAI,GAAGF,KAAK,CAACG,OAAnB;AAEA,UAAMC,yBAAyB,GAAGZ,uBAAuB,CAACa,MAAxB,CAA+B,UAAAR,IAAI;AAAA,eACnEA,IAAI,CAACD,QAAL,CAAc,QAAd,CADmE;AAAA,OAAnC,CAAlC;;AAIA,UAAIQ,yBAAyB,CAACR,QAA1B,CAAmCD,MAAM,CAACE,IAA1C,KAAmDK,IAAvD,EAA6D;AAC3DA,QAAAA,IAAI,CAACI,IAAL,GAAY,CAAZ;AACAb,QAAAA,KAAK,CAACc,QAAN,CAAe;AACbV,UAAAA,IAAI,YAAKC,QAAL,qBADS;AAEbK,UAAAA,OAAO,EAAED;AAFI,SAAf;AAID,OAnBuC,CAqBxC;;;AACA,UACE,CACEhB,oBADF,EAEEC,sBAFF,EAGEC,mBAHF,EAIEQ,QAJF,CAIWD,MAAM,CAACE,IAJlB,CADF,EAME;AACAK,QAAAA,IAAI,CAACI,IAAL,GAAY,CAAZ;AACAb,QAAAA,KAAK,CAACc,QAAN,CAAe;AACbV,UAAAA,IAAI,YAAKC,QAAL,qBADS;AAEbK,UAAAA,OAAO,EAAED;AAFI,SAAf;AAID;;AAEDT,MAAAA,KAAK,CAACc,QAAN,CACEzB,gBAAgB,CAAC0B,cAAjB,CAAgC;AAAEV,QAAAA,QAAQ,EAARA,QAAF;AAAYW,QAAAA,MAAM,EAAE;AAApB,OAAhC,EAA6D;AAAEP,QAAAA,IAAI,EAAJA;AAAF,OAA7D,CADF;AAIA,aAAOR,IAAI,CAACC,MAAD,CAAX;AACD,KAzC2B;AAAA,GAAR;AAAA,C;;AAApB;;;;;;;;;;0BAlBMH,uB","sourcesContent":["import { ReduxCrudService } from '../../services';\nimport {\n  CREATE_RESTAURANT_SUCCESS,\n  DELETE_RESTAURANT_SUCCESS,\n} from '../../modules/restaurants';\n\nimport {\n  DELETE_DISH_SUCCESS,\n  PUBLISH_DISH_SUCCESS,\n  UNPUBLISH_DISH_SUCCESS,\n  CREATE_DISH_SUCCESS,\n  // UPDATE_DISH_SUCCESS\n} from '../../modules/dishes';\n\nimport {\n  UPDATE_CATEGORY_SUCCESS,\n  CREATE_CATEGORY_SUCCESS,\n  DELETE_CATEGORY_SUCCESS,\n} from '../../modules/categories';\n\nconst syncActionTypesTriggers = [\n  // restaurants\n  CREATE_RESTAURANT_SUCCESS,\n  DELETE_RESTAURANT_SUCCESS,\n\n  // categories\n  UPDATE_CATEGORY_SUCCESS,\n  CREATE_CATEGORY_SUCCESS,\n  DELETE_CATEGORY_SUCCESS,\n\n  // dishes\n  DELETE_DISH_SUCCESS,\n  PUBLISH_DISH_SUCCESS,\n  UNPUBLISH_DISH_SUCCESS,\n  CREATE_DISH_SUCCESS,\n  // todo add dishes\n];\n\nexport default store => next => action => {\n  if (!syncActionTypesTriggers.includes(action.type)) {\n    return next(action);\n  }\n\n  const resource = `/${action.type.split('/')[1]}`;\n  const slice = store.getState()[resource];\n  const body = slice.filters;\n\n  const deleteActionTypesTriggers = syncActionTypesTriggers.filter(type =>\n    type.includes('delete'),\n  );\n\n  if (deleteActionTypesTriggers.includes(action.type) && body) {\n    body.page = 1;\n    store.dispatch({\n      type: `${resource}/filters/changed`,\n      filters: body,\n    });\n  }\n\n  // if dish list\n  if (\n    [\n      PUBLISH_DISH_SUCCESS,\n      UNPUBLISH_DISH_SUCCESS,\n      CREATE_DISH_SUCCESS,\n    ].includes(action.type)\n  ) {\n    body.page = 1;\n    store.dispatch({\n      type: `${resource}/filters/changed`,\n      filters: body,\n    });\n  }\n\n  store.dispatch(\n    ReduxCrudService.resourceAction({ resource, method: 'GET' })({ body }),\n  );\n\n  return next(action);\n};\n"]},"metadata":{},"sourceType":"module"}