{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _dec,\n    _class,\n    _class2,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/Restaurants.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport DocumentTitle from 'react-document-title';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Add from '@material-ui/icons/Add';\nimport { autobind } from 'core-decorators';\nimport { RestaurantsFilters, RestaurantsActionsFormatter, RestaurantsNameFormatter } from './components/';\nimport { HelperService } from '/services';\nimport { getRestaurants, updateFilters, cleanup, restaurantsListTableDataSelector, filtersSelector, loadingSelector, restaurantsCountSelector, abortPageRequests, blockRestaurant, deleteRestaurant, clearFilters } from './modules/';\nimport { showConfirm } from '../AppConfirm/modules';\nimport { dictionarySelector } from '/modules/core.selectors';\nimport { RestaurantModal } from '../RestaurantModal';\nimport { SetRestaurantHoursModal } from '../SetRestaurantHoursModal';\nimport { toggleRestaurantsModal, setMode } from '../RestaurantModal/modules';\nimport { toggleSetRestaurantHoursModal } from '../SetRestaurantHoursModal/modules';\nimport { AppTable, AppCleanHOC } from '/components';\nimport './Restaurants.scss';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    tableData: restaurantsListTableDataSelector(state),\n    total: restaurantsCountSelector(state),\n    filters: filtersSelector(state),\n    loading: loadingSelector(state),\n    dictionary: dictionarySelector(state)\n  };\n};\n\nvar mapDispatchToProps = {\n  getRestaurants: getRestaurants,\n  updateFilters: updateFilters,\n  toggleRestaurantsModal: toggleRestaurantsModal,\n  abortPageRequests: abortPageRequests,\n  setMode: setMode,\n  cleanup: cleanup,\n  blockRestaurant: blockRestaurant,\n  showConfirm: showConfirm,\n  deleteRestaurant: deleteRestaurant,\n  toggleSetRestaurantHoursModal: toggleSetRestaurantHoursModal,\n  clearFilters: clearFilters\n};\nvar Restaurants = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec(_class = AppCleanHOC(_class = (_class2 =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Restaurants, _PureComponent);\n\n  function Restaurants() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Restaurants);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Restaurants)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.settings = [{\n      field: 'name',\n      title: 'Name',\n      formatter: _this.restaurantsNameFormatter,\n      sort: true\n    }, {\n      field: 'revenue',\n      title: 'Revenue',\n      sort: true\n    }, {\n      field: 'subscription',\n      title: 'Subscription',\n      sort: true\n    }, {\n      field: 'agent_name',\n      title: 'Agents name',\n      sort: true\n    }, {\n      field: 'onboarded',\n      title: 'Onboarded',\n      sort: true\n    }, {\n      field: 'delivery_method',\n      title: 'Delivery Method',\n      sort: true\n    }, {\n      field: 'actions',\n      formatter: _this.restaurantsActionsFormatter,\n      title: 'Actions',\n      style: {\n        maxWidth: '240px',\n        paddingRight: '10px'\n      }\n    }];\n    _this.tableOptions = {\n      requestTrigger: _this.requestTrigger,\n      updateFilters: _this.props.updateFilters\n    };\n    return _this;\n  }\n\n  _createClass(Restaurants, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.requestTrigger();\n    }\n  }, {\n    key: \"onEditClick\",\n    value: function onEditClick(event) {\n      var _this$props = this.props,\n          toggleRestaurantsModal = _this$props.toggleRestaurantsModal,\n          setMode = _this$props.setMode;\n      var id = event.target.id;\n      setMode({\n        mode: 'edit',\n        id: id\n      });\n      toggleRestaurantsModal(true);\n    }\n  }, {\n    key: \"restaurantsActionsFormatter\",\n    value: function restaurantsActionsFormatter(cell) {\n      return React.createElement(RestaurantsActionsFormatter, Object.assign({}, HelperService.pick(this.props, ['blockRestaurant', 'showConfirm', 'deleteRestaurant', 'toggleSetRestaurantHoursModal']), cell, {\n        onEditClick: this.onEditClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"restaurantsNameFormatter\",\n    value: function restaurantsNameFormatter(name) {\n      return React.createElement(RestaurantsNameFormatter, Object.assign({}, name, {\n        onNameClick: this.onEditClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"requestTrigger\",\n    value: function requestTrigger() {\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.filters;\n      this.props.getRestaurants({\n        body: _objectSpread({}, this.props.filters, filters)\n      });\n    }\n  }, {\n    key: \"renderRestaurantFilters\",\n    value: function renderRestaurantFilters() {\n      var _this$props2 = this.props,\n          _this$props2$filters = _this$props2.filters,\n          cuisine = _this$props2$filters.cuisine,\n          revenue = _this$props2$filters.revenue,\n          subscription = _this$props2$filters.subscription,\n          status = _this$props2$filters.status,\n          deliveryMethod = _this$props2$filters.deliveryMethod,\n          agent_name = _this$props2$filters.agent_name,\n          onboardingPeriodStart = _this$props2$filters.onboardingPeriodStart,\n          onboardingPeriodEnd = _this$props2$filters.onboardingPeriodEnd,\n          search = _this$props2$filters.search,\n          clearFilters = _this$props2.clearFilters,\n          dictionary = _this$props2.dictionary,\n          updateFilters = _this$props2.updateFilters;\n      return React.createElement(RestaurantsFilters, Object.assign({\n        cuisine: cuisine,\n        dictionary: dictionary,\n        revenue: revenue,\n        subscription: subscription,\n        status: status,\n        search: search,\n        deliveryMethod: deliveryMethod,\n        agent_name: agent_name,\n        clearFilters: clearFilters,\n        onboardingPeriodStart: onboardingPeriodStart,\n        onboardingPeriodEnd: onboardingPeriodEnd,\n        updateFilters: updateFilters\n      }, {\n        requestTrigger: this.requestTrigger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderMetaRow\",\n    value: function renderMetaRow() {\n      var total = this.props.total;\n      return React.createElement(\"span\", {\n        className: 'app-meta-info',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, total ? total : 0, \" are shown. You can filter them by:\");\n    }\n  }, {\n    key: \"onAddNewClick\",\n    value: function onAddNewClick() {\n      var _this$props3 = this.props,\n          toggleRestaurantsModal = _this$props3.toggleRestaurantsModal,\n          setMode = _this$props3.setMode;\n      setMode({\n        mode: 'add'\n      });\n      toggleRestaurantsModal(true);\n    }\n  }, {\n    key: \"renderPageHeader\",\n    value: function renderPageHeader() {\n      return React.createElement(\"div\", {\n        className: 'restaurants-header',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"Restaurants\"), React.createElement(Button, {\n        variant: \"contained\",\n        color: 'primary',\n        onClick: this.onAddNewClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Add, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), \"Add new\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          _this$props4$filters = _this$props4.filters,\n          limit = _this$props4$filters.limit,\n          page = _this$props4$filters.page,\n          sort_field = _this$props4$filters.sort_field,\n          sort_order = _this$props4$filters.sort_order,\n          loading = _this$props4.loading,\n          total = _this$props4.total;\n      return React.createElement(DocumentTitle, {\n        title: \"Restaurants List auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"app-static-container restaurants\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, this.renderPageHeader(), this.renderMetaRow(), this.renderRestaurantFilters(), React.createElement(AppTable, Object.assign({\n        data: this.props.tableData,\n        loading: loading,\n        total: total,\n        options: this.tableOptions,\n        dataSettings: this.settings\n      }, {\n        limit: limit,\n        page: page,\n        sort_field: sort_field,\n        sort_order: sort_order\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      })), React.createElement(RestaurantModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(SetRestaurantHoursModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return Restaurants;\n}(PureComponent), (_applyDecoratedDescriptor(_class2.prototype, \"onEditClick\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onEditClick\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"restaurantsActionsFormatter\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"restaurantsActionsFormatter\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"restaurantsNameFormatter\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"restaurantsNameFormatter\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"requestTrigger\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"requestTrigger\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onAddNewClick\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onAddNewClick\"), _class2.prototype)), _class2)) || _class) || _class);\nexport { Restaurants as default };\nRestaurants.propTypes = {\n  tableData: PropTypes.array,\n  filters: PropTypes.object,\n  loading: PropTypes.bool\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/Restaurants.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/Restaurants.js\");\n  reactHotLoader.register(Restaurants, \"Restaurants\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/Restaurants.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/Restaurants.js"],"names":["React","PureComponent","PropTypes","DocumentTitle","connect","Button","Add","autobind","RestaurantsFilters","RestaurantsActionsFormatter","RestaurantsNameFormatter","HelperService","getRestaurants","updateFilters","cleanup","restaurantsListTableDataSelector","filtersSelector","loadingSelector","restaurantsCountSelector","abortPageRequests","blockRestaurant","deleteRestaurant","clearFilters","showConfirm","dictionarySelector","RestaurantModal","SetRestaurantHoursModal","toggleRestaurantsModal","setMode","toggleSetRestaurantHoursModal","AppTable","AppCleanHOC","mapStateToProps","state","tableData","total","filters","loading","dictionary","mapDispatchToProps","Restaurants","settings","field","title","formatter","restaurantsNameFormatter","sort","restaurantsActionsFormatter","style","maxWidth","paddingRight","tableOptions","requestTrigger","props","event","id","target","mode","cell","pick","onEditClick","name","body","cuisine","revenue","subscription","status","deliveryMethod","agent_name","onboardingPeriodStart","onboardingPeriodEnd","search","onAddNewClick","limit","page","sort_field","sort_order","renderPageHeader","renderMetaRow","renderRestaurantFilters","propTypes","array","object","bool"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport DocumentTitle from 'react-document-title';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Add from '@material-ui/icons/Add';\nimport { autobind } from 'core-decorators';\n\nimport {\n    RestaurantsFilters,\n    RestaurantsActionsFormatter,\n    RestaurantsNameFormatter\n} from './components/';\n\nimport {HelperService} from '/services';  \nimport {\n    getRestaurants,\n    updateFilters,\n    cleanup,\n    restaurantsListTableDataSelector,\n    filtersSelector,\n    loadingSelector,\n    restaurantsCountSelector,\n    abortPageRequests,\n    blockRestaurant,\n    deleteRestaurant,\n    clearFilters\n} from './modules/';\n\nimport { showConfirm } from '../AppConfirm/modules';\n\nimport { dictionarySelector } from '/modules/core.selectors';\n\nimport { RestaurantModal } from '../RestaurantModal';\nimport { SetRestaurantHoursModal } from '../SetRestaurantHoursModal';\nimport { toggleRestaurantsModal, setMode } from '../RestaurantModal/modules';\nimport { toggleSetRestaurantHoursModal } from '../SetRestaurantHoursModal/modules';\n\nimport { AppTable, AppCleanHOC } from '/components';\n\nimport './Restaurants.scss';\n\nconst mapStateToProps = state => ({\n    tableData: restaurantsListTableDataSelector(state),\n    total: restaurantsCountSelector(state),\n    filters: filtersSelector(state),\n    loading: loadingSelector(state),\n    dictionary: dictionarySelector(state)\n});\n\nconst mapDispatchToProps = {\n    getRestaurants,\n    updateFilters,\n    toggleRestaurantsModal,\n    abortPageRequests,\n    setMode,\n    cleanup,\n    blockRestaurant,\n    showConfirm,\n    deleteRestaurant,\n    toggleSetRestaurantHoursModal,\n    clearFilters\n};\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n\n@AppCleanHOC\nclass Restaurants extends PureComponent {\n\n    settings = [\n        {\n            field: 'name',\n            title: 'Name',\n            formatter: this.restaurantsNameFormatter,\n            sort: true,\n        },\n        {\n            field: 'revenue',\n            title: 'Revenue',\n            sort: true,\n        },\n        {\n            field: 'subscription',\n            title: 'Subscription',\n            sort: true,\n        },\n        {\n            field: 'agent_name',\n            title: 'Agents name',\n            sort: true,\n        },\n        {\n            field: 'onboarded',\n            title: 'Onboarded',\n            sort: true,\n        },\n        {\n            field: 'delivery_method',\n            title: 'Delivery Method',\n            sort: true,\n        },\n        {\n            field: 'actions',\n            formatter: this.restaurantsActionsFormatter,\n            title: 'Actions',\n            style: {\n                maxWidth: '240px',\n                paddingRight: '10px'\n            }\n        }\n    ];\n\n    tableOptions = {\n        requestTrigger: this.requestTrigger,\n        updateFilters: this.props.updateFilters\n    };\n\n    componentDidMount() {\n        this.requestTrigger();\n    }\n\n    @autobind\n    onEditClick(event) {\n        const {toggleRestaurantsModal, setMode} = this.props;\n        const {id} = event.target;\n        setMode({mode: 'edit', id});\n        toggleRestaurantsModal(true);\n    }\n\n    @autobind\n    restaurantsActionsFormatter(cell) {\n        return (\n            <RestaurantsActionsFormatter\n                {...HelperService.pick(this.props, [\n                    'blockRestaurant',\n                    'showConfirm',\n                    'deleteRestaurant',\n                    'toggleSetRestaurantHoursModal'\n                ])}\n                { ...cell }\n                onEditClick={ this.onEditClick }/>\n        )\n    }\n\n    @autobind\n    restaurantsNameFormatter(name) {\n        return (\n            <RestaurantsNameFormatter { ...name } onNameClick={ this.onEditClick }/>\n        )\n    }\n\n    @autobind\n    requestTrigger(filters = this.props.filters) {\n        this.props.getRestaurants({body: {...this.props.filters, ...filters}});\n    }\n\n    renderRestaurantFilters() {\n        const {\n            filters: {\n                cuisine,\n                revenue,\n                subscription,\n                status,\n                deliveryMethod,\n                agent_name,\n                onboardingPeriodStart,\n                onboardingPeriodEnd,\n                search\n            },\n            clearFilters,\n            dictionary,\n            updateFilters\n        } = this.props;\n\n        return (\n            <RestaurantsFilters\n                { ...{\n                    cuisine,\n                    dictionary,\n                    revenue,\n                    subscription,\n                    status,\n                    search,\n                    deliveryMethod,\n                    agent_name,\n                    clearFilters,\n                    onboardingPeriodStart,\n                    onboardingPeriodEnd,\n                    updateFilters\n                } }\n\n                requestTrigger={ this.requestTrigger }\n            />\n        )\n    }\n\n    renderMetaRow() {\n        const {total} = this.props;\n        return (\n            <span className={ 'app-meta-info' }>\n                { total ? total : 0 } are shown. You can filter them by:\n            </span>\n        )\n    }\n\n    @autobind\n    onAddNewClick() {\n        const {toggleRestaurantsModal, setMode} = this.props;\n        setMode({mode: 'add'});\n        toggleRestaurantsModal(true);\n    }\n\n    renderPageHeader() {\n        return (\n            <div className={ 'restaurants-header' }>\n                <h1>Restaurants</h1>\n                <Button\n                    variant=\"contained\"\n                    color={ 'primary' }\n                    onClick={ this.onAddNewClick }>\n                    <Add/>\n                    Add new\n                </Button>\n            </div>\n        );\n    }\n\n    render() {\n        let {\n            filters: {\n                limit, page, sort_field, sort_order\n            },\n            loading,\n            total\n        } = this.props;\n\n        return (\n            <DocumentTitle title=\"Restaurants List auto\">\n                <div className=\"app-static-container restaurants\">\n                    { this.renderPageHeader() }\n                    { this.renderMetaRow() }\n                    { this.renderRestaurantFilters() }\n                    <AppTable\n                        data={ this.props.tableData }\n                        loading={ loading }\n                        total={ total }\n                        options={ this.tableOptions }\n                        dataSettings={ this.settings }\n                        { ...{\n                            limit,\n                            page,\n                            sort_field,\n                            sort_order\n                        } }\n                    />\n                    <RestaurantModal/>\n                    <SetRestaurantHoursModal/>\n                </div>\n            </DocumentTitle>\n        );\n    }\n}\n\nRestaurants.propTypes = {\n    tableData: PropTypes.array,\n    filters: PropTypes.object,\n    loading: PropTypes.bool\n};\n"]},"metadata":{},"sourceType":"module"}