{"ast":null,"code":"import _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _dec,\n    _dec2,\n    _dec3,\n    _class,\n    _class2,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { autobind } from 'core-decorators';\nimport { reduxForm, formValueSelector, isPristine, isInvalid, submit } from 'redux-form';\nimport { Button, withStyles, Grid } from '@material-ui/core';\nimport styles from './styles';\nimport EstimatedTimeField from './../EstimatedTimeField';\nimport { CuisineAutoComplete } from '/scenes/CuisineAutoComplete';\nimport { ZipCodeAutoComplete } from '/scenes/ZipCodeAutoComplete';\nimport { restaurantModalValidation } from './../../../RestaurantModal/modules';\nimport { managedRestaurantSelector } from '/scenes/Restaurants/modules';\nimport { PHONE_MASK, deliveryMethods } from './../../../../constants';\nimport { AppSwitch, GridReduxFormField, FullScreenPreloader, FormMaskTextField, FormTextField } from '/components/';\nvar RESTAURANTS_SETTINGS_FORM = 'Restaurant settings';\nvar formFieldsSelector = formValueSelector(RESTAURANTS_SETTINGS_FORM);\nvar isInvalidSelector = isInvalid(RESTAURANTS_SETTINGS_FORM);\nvar isPristineSelector = isPristine(RESTAURANTS_SETTINGS_FORM);\nvar VALUES_TO_SUBMIT = ['city', 'state', 'zipcode', \"sales_tax\", 'phone_number', 'subscription', 'cuisine_type', \"manager_name\", \"manager_email\", \"delivery_email\", 'street_address', 'delivery_method', \"restaurant_name\"];\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    valuesToSubmit: formFieldsSelector.apply(void 0, [state].concat(VALUES_TO_SUBMIT)),\n    cuisineName: formFieldsSelector(state, 'cuisine_name'),\n    zipcodeNumbers: formFieldsSelector(state, 'zip_code'),\n    initialValues: managedRestaurantSelector(state),\n    isPristine: isPristineSelector(state),\n    isInvalid: isInvalidSelector(state)\n  };\n};\n\nvar RestaurantInfoForm = (_dec = connect(mapStateToProps, {\n  submit: submit\n}), _dec2 = withStyles(styles), _dec3 = reduxForm({\n  form: RESTAURANTS_SETTINGS_FORM,\n  validate: restaurantModalValidation,\n  // same validation rules\n  enableReinitialize: true\n}), _dec(_class = _dec2(_class = _dec3(_class = (_class2 =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(RestaurantInfoForm, _PureComponent);\n\n  function RestaurantInfoForm() {\n    _classCallCheck(this, RestaurantInfoForm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RestaurantInfoForm).apply(this, arguments));\n  }\n\n  _createClass(RestaurantInfoForm, [{\n    key: \"onChangeCuisine\",\n    value: function onChangeCuisine(_ref) {\n      var value = _ref.value,\n          label = _ref.label;\n      var change = this.props.change;\n      change('cuisine_type', value);\n      change('cuisine_name', label);\n    }\n  }, {\n    key: \"onChangeZipCode\",\n    value: function onChangeZipCode(_ref2) {\n      var value = _ref2.value,\n          city = _ref2.city,\n          state = _ref2.state,\n          zipcode = _ref2.zipcode;\n      var change = this.props.change;\n      change('city', city);\n      change('state', state);\n      change('zipcode', value); // zipcode id\n\n      change('zip_code', zipcode); // zipcode numbers\n    }\n  }, {\n    key: \"onSave\",\n    value: function onSave() {\n      var _this$props = this.props,\n          valuesToSubmit = _this$props.valuesToSubmit,\n          onSubmit = _this$props.onSubmit;\n      onSubmit(valuesToSubmit);\n    }\n  }, {\n    key: \"hasDelivery\",\n    value: function hasDelivery() {\n      return this.props.valuesToSubmit.delivery_method === deliveryMethods.DELIVERY_ONLY;\n    }\n  }, {\n    key: \"handleDeliveryMethodChange\",\n    value: function handleDeliveryMethodChange(_ref3) {\n      var checked = _ref3.target.checked;\n      var methodToSet = checked ? deliveryMethods.DELIVERY_ONLY : deliveryMethods.PICKUP_ONLY;\n      this.props.change('delivery_method', methodToSet);\n    }\n  }, {\n    key: \"getCommonPropsForAutocompleteField\",\n    value: function getCommonPropsForAutocompleteField() {\n      var classes = this.props.classes;\n      return {\n        autoCompleteWrpClasses: classes.autoCompleteWrpClasses,\n        wrapperClassName: classes.autoselectWrapper,\n        compareKey: 'value',\n        textFieldProps: {\n          className: classes.selectTextField,\n          margin: \"dense\",\n          variant: \"outlined\",\n          inputProps: {\n            className: classes.selectTextFieldInput\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getCuisineSelectedOption\",\n    value: function getCuisineSelectedOption() {\n      var _this$props2 = this.props,\n          cuisineName = _this$props2.cuisineName,\n          cuisine_type = _this$props2.valuesToSubmit.cuisine_type;\n\n      if (cuisineName && cuisine_type) {\n        return {\n          label: cuisineName,\n          value: cuisine_type\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getZipcodeSelectedOption\",\n    value: function getZipcodeSelectedOption() {\n      var _this$props3 = this.props,\n          zipcodeNumbers = _this$props3.zipcodeNumbers,\n          _this$props3$valuesTo = _this$props3.valuesToSubmit,\n          zipcode = _this$props3$valuesTo.zipcode,\n          city = _this$props3$valuesTo.city,\n          state = _this$props3$valuesTo.state;\n\n      if (zipcodeNumbers && city && state && zipcode) {\n        return {\n          label: zipcodeNumbers + ' ' + city + ' ' + state,\n          value: zipcode\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props4 = this.props,\n          _this$props4$valuesTo = _this$props4.valuesToSubmit,\n          cuisine_type = _this$props4$valuesTo.cuisine_type,\n          zipcode = _this$props4$valuesTo.zipcode,\n          openRestaurantsHorsModal = _this$props4.openRestaurantsHorsModal,\n          initialValues = _this$props4.initialValues,\n          isPristine = _this$props4.isPristine,\n          isInvalid = _this$props4.isInvalid,\n          isLoading = _this$props4.isLoading,\n          classes = _this$props4.classes;\n      var restaurant_name = initialValues.restaurant_name,\n          phone_number = initialValues.phone_number,\n          manager_name = initialValues.manager_name,\n          manager_email = initialValues.manager_email,\n          delivery_email = initialValues.delivery_email,\n          cuisine_name = initialValues.cuisine_name,\n          zip_code = initialValues.zip_code,\n          sales_tax = initialValues.sales_tax,\n          street = initialValues.street,\n          state = initialValues.state,\n          city = initialValues.city;\n      var autocompleteFieldCommonProps = this.getCommonPropsForAutocompleteField();\n      return React.createElement(React.Fragment, null, React.createElement(Grid, {\n        container: true,\n        spacing: 32,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        className: classes.contactsSectionWrapper,\n        direction: \"column\",\n        spacing: 32,\n        container: true,\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(GridReduxFormField, {\n        caption: restaurant_name,\n        label: \"Restaurant name\",\n        name: \"restaurant_name\",\n        component: FormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: phone_number,\n        label: \"Phone number\",\n        name: \"phone_number\",\n        mask: PHONE_MASK,\n        component: FormMaskTextField,\n        margin: \"dense\",\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: manager_name,\n        label: \"Manager's name\",\n        name: \"manager_name\",\n        component: FormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: manager_email,\n        label: \"Manager's email\",\n        name: \"manager_email\",\n        component: FormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: delivery_email,\n        label: \"Delivery email\",\n        name: \"delivery_email\",\n        component: FormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: cuisine_name,\n        name: \"cuisine\",\n        component: function component() {\n          return React.createElement(CuisineAutoComplete, Object.assign({\n            isClearable: false,\n            value: cuisine_type,\n            selectedOption: _this.getCuisineSelectedOption(),\n            onChange: _this.onChangeCuisine\n          }, autocompleteFieldCommonProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: zip_code,\n        name: \"zipcode\",\n        component: function component() {\n          return React.createElement(ZipCodeAutoComplete, Object.assign({\n            value: zipcode,\n            withPagination: true,\n            selectedOption: _this.getZipcodeSelectedOption(),\n            onChange: _this.onChangeZipCode\n          }, autocompleteFieldCommonProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: state,\n        label: \"State\",\n        name: \"state\",\n        component: FormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: city,\n        label: \"City\",\n        name: \"city\",\n        component: FormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: street,\n        label: \"Street\",\n        name: \"street\",\n        component: FormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }), React.createElement(GridReduxFormField, {\n        caption: sales_tax,\n        label: \"Sales tax\",\n        name: \"sales_tax\",\n        component: FormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        className: classes.settingsSectionWrapper,\n        direction: \"column\",\n        spacing: 8,\n        container: true,\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(AppSwitch, {\n        label: \"Delivery service\",\n        offCaption: \"Pickup only\",\n        onCaption: \"Delivery\",\n        onChange: this.handleDeliveryMethodChange,\n        checked: this.hasDelivery(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      })), React.createElement(EstimatedTimeField, {\n        label: \"Estimated pickup time\",\n        name: \"estimated_pickup_time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }), React.createElement(EstimatedTimeField, {\n        label: \"Estimated delivery time\",\n        name: \"estimated_delivery_time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: classes.button,\n        onClick: openRestaurantsHorsModal,\n        variant: \"outlined\",\n        color: 'primary',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"Set working hours\")))), React.createElement(Button, {\n        onClick: this.onSave,\n        variant: \"contained\",\n        type: \"sumbit\",\n        color: 'primary',\n        className: classes.button,\n        disabled: isLoading || isInvalid || isPristine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, \"Save\"), isLoading && React.createElement(FullScreenPreloader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return RestaurantInfoForm;\n}(PureComponent), (_applyDecoratedDescriptor(_class2.prototype, \"onChangeCuisine\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onChangeCuisine\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onChangeZipCode\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onChangeZipCode\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onSave\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onSave\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"handleDeliveryMethodChange\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"handleDeliveryMethodChange\"), _class2.prototype)), _class2)) || _class) || _class) || _class);\nRestaurantInfoForm.propTypes = {\n  openRestaurantsHorsModal: PropTypes.func.isRequired,\n  zipcodeNumbers: PropTypes.string,\n  valuesToSubmit: PropTypes.object,\n  initialValues: PropTypes.object,\n  cuisineName: PropTypes.string,\n  isPristine: PropTypes.bool,\n  isInvalid: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  classes: PropTypes.object\n};\nvar _default = RestaurantInfoForm;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(RESTAURANTS_SETTINGS_FORM, \"RESTAURANTS_SETTINGS_FORM\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\");\n  reactHotLoader.register(formFieldsSelector, \"formFieldsSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\");\n  reactHotLoader.register(isInvalidSelector, \"isInvalidSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\");\n  reactHotLoader.register(isPristineSelector, \"isPristineSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\");\n  reactHotLoader.register(VALUES_TO_SUBMIT, \"VALUES_TO_SUBMIT\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\");\n  reactHotLoader.register(RestaurantInfoForm, \"RestaurantInfoForm\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantInfo/components/RestaurantInfoForm/index.js"],"names":["React","PureComponent","PropTypes","connect","autobind","reduxForm","formValueSelector","isPristine","isInvalid","submit","Button","withStyles","Grid","styles","EstimatedTimeField","CuisineAutoComplete","ZipCodeAutoComplete","restaurantModalValidation","managedRestaurantSelector","PHONE_MASK","deliveryMethods","AppSwitch","GridReduxFormField","FullScreenPreloader","FormMaskTextField","FormTextField","RESTAURANTS_SETTINGS_FORM","formFieldsSelector","isInvalidSelector","isPristineSelector","VALUES_TO_SUBMIT","mapStateToProps","state","valuesToSubmit","cuisineName","zipcodeNumbers","initialValues","RestaurantInfoForm","form","validate","enableReinitialize","value","label","change","props","city","zipcode","onSubmit","delivery_method","DELIVERY_ONLY","checked","target","methodToSet","PICKUP_ONLY","classes","autoCompleteWrpClasses","wrapperClassName","autoselectWrapper","compareKey","textFieldProps","className","selectTextField","margin","variant","inputProps","selectTextFieldInput","cuisine_type","openRestaurantsHorsModal","isLoading","restaurant_name","phone_number","manager_name","manager_email","delivery_email","cuisine_name","zip_code","sales_tax","street","autocompleteFieldCommonProps","getCommonPropsForAutocompleteField","contactsSectionWrapper","getCuisineSelectedOption","onChangeCuisine","getZipcodeSelectedOption","onChangeZipCode","settingsSectionWrapper","handleDeliveryMethodChange","hasDelivery","button","onSave","propTypes","func","isRequired","string","object","bool"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { autobind } from 'core-decorators';\nimport { \n    reduxForm,\n    formValueSelector,\n    isPristine,\n    isInvalid,\n    submit,\n} from 'redux-form';\n\nimport { \n    Button,\n    withStyles,\n    Grid,\n} from '@material-ui/core';\n\nimport styles from './styles';\nimport EstimatedTimeField  from './../EstimatedTimeField';\nimport { CuisineAutoComplete } from '/scenes/CuisineAutoComplete';\nimport { ZipCodeAutoComplete } from '/scenes/ZipCodeAutoComplete';\nimport { restaurantModalValidation } from './../../../RestaurantModal/modules';\nimport { managedRestaurantSelector } from '/scenes/Restaurants/modules';\nimport { PHONE_MASK, deliveryMethods } from './../../../../constants';\nimport { \n  AppSwitch,\n  GridReduxFormField,\n  FullScreenPreloader,\n  FormMaskTextField,\n  FormTextField,\n} from '/components/';\n\n\nconst RESTAURANTS_SETTINGS_FORM = 'Restaurant settings';\n\nconst formFieldsSelector = formValueSelector(RESTAURANTS_SETTINGS_FORM);\nconst isInvalidSelector = isInvalid(RESTAURANTS_SETTINGS_FORM);\nconst isPristineSelector = isPristine(RESTAURANTS_SETTINGS_FORM);\n\nconst VALUES_TO_SUBMIT = [\n    'city',\n    'state',\n    'zipcode',\n    \"sales_tax\",\n    'phone_number',\n    'subscription',\n    'cuisine_type',\n    \"manager_name\",\n    \"manager_email\",\n    \"delivery_email\",\n    'street_address',\n    'delivery_method',\n    \"restaurant_name\",\n];\n\nconst mapStateToProps = state => ({\n    valuesToSubmit: formFieldsSelector(state , ...VALUES_TO_SUBMIT),\n    cuisineName: formFieldsSelector(state, 'cuisine_name'),\n    zipcodeNumbers: formFieldsSelector( state, 'zip_code'),\n    initialValues: managedRestaurantSelector(state),\n    isPristine: isPristineSelector(state),\n    isInvalid: isInvalidSelector(state),\n});\n\n\n@connect(mapStateToProps, { submit })\n@withStyles(styles)\n@reduxForm({\n    form: RESTAURANTS_SETTINGS_FORM,\n    validate: restaurantModalValidation, // same validation rules\n    enableReinitialize: true,\n}) \n\nclass RestaurantInfoForm extends PureComponent {\n\n    @autobind\n    onChangeCuisine({ value, label }) {\n        const { change } = this.props;\n        change('cuisine_type', value);\n        change('cuisine_name', label);\n    }\n\n    @autobind\n    onChangeZipCode({ value, city, state, zipcode }) {\n        const { change } = this.props;\n        change('city', city);\n        change('state', state);\n        change('zipcode', value); // zipcode id\n        change('zip_code', zipcode); // zipcode numbers\n    }\n\n    @autobind\n    onSave() {\n        const { valuesToSubmit, onSubmit, } = this.props;\n        onSubmit(valuesToSubmit);\n    }\n\n    hasDelivery() {\n        return this.props.valuesToSubmit.delivery_method === deliveryMethods.DELIVERY_ONLY;\n    }\n\n    @autobind\n    handleDeliveryMethodChange({ target: { checked } }) {\n        const methodToSet = checked \n            ? deliveryMethods.DELIVERY_ONLY\n            : deliveryMethods.PICKUP_ONLY;\n\n        this.props.change('delivery_method', methodToSet);\n    }\n\n    getCommonPropsForAutocompleteField() {\n        const { classes } = this.props;\n\n        return  {\n            autoCompleteWrpClasses: classes.autoCompleteWrpClasses,\n            wrapperClassName: classes.autoselectWrapper,\n            compareKey: 'value',\n            textFieldProps : {\n                className: classes.selectTextField,\n                margin: \"dense\",\n                variant: \"outlined\",\n                inputProps: {\n                    className: classes.selectTextFieldInput,\n                }\n            },\n        }\n    }\n\n    getCuisineSelectedOption() {\n        const { cuisineName, valuesToSubmit: { cuisine_type } } = this.props;\n        if( cuisineName && cuisine_type ) {\n            return {\n                label: cuisineName,\n                value: cuisine_type,\n            }\n        }\n\n        return null;\n    }\n\n    getZipcodeSelectedOption() {\n        const { zipcodeNumbers,  valuesToSubmit: { zipcode, city, state, }} = this.props;\n\n        if( zipcodeNumbers && city && state && zipcode ) {\n            return {\n              label: zipcodeNumbers + ' ' + city + ' ' + state,\n              value: zipcode \n            }\n        }\n\n        return null;\n    }\n\n    render() {\n      const { \n          valuesToSubmit: { cuisine_type, zipcode },\n          openRestaurantsHorsModal,\n          initialValues,\n          isPristine,\n          isInvalid,\n          isLoading,\n          classes, \n      } = this.props;\n\n      const { \n        restaurant_name,\n        phone_number,\n        manager_name,\n        manager_email,\n        delivery_email,\n        cuisine_name,\n        zip_code,\n        sales_tax,\n        street,\n        state,\n        city,\n\n      } = initialValues;\n\n      const autocompleteFieldCommonProps = this.getCommonPropsForAutocompleteField();\n\n      return (\n          <>\n            <Grid container spacing={ 32 }>\n                <Grid \n                    className={ classes.contactsSectionWrapper }\n                    direction=\"column\"\n                    spacing={ 32 }\n                    container  \n                    item \n                >\n                    <GridReduxFormField \n                        caption={ restaurant_name }\n                        label=\"Restaurant name\"\n                        name=\"restaurant_name\" \n                        component={ FormTextField }\n                    />\n\n                    <GridReduxFormField \n                        caption={ phone_number }\n                        label=\"Phone number\"\n                        name=\"phone_number\" \n                        mask={ PHONE_MASK }\n                        component={ FormMaskTextField }\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                    />\n\n                    <GridReduxFormField \n                        caption={ manager_name }\n                        label=\"Manager's name\"\n                        name=\"manager_name\" \n                        component={ FormTextField } \n                    />\n\n                    <GridReduxFormField \n                        caption={ manager_email }\n                        label=\"Manager's email\"\n                        name=\"manager_email\" \n                        component={ FormTextField } \n                    />\n\n                    <GridReduxFormField \n                        caption={ delivery_email }\n                        label=\"Delivery email\"\n                        name=\"delivery_email\" \n                        component={ FormTextField } \n                    />\n\n                    <GridReduxFormField \n                        caption={ cuisine_name }\n                        name='cuisine'\n                        component={ () => \n                            <CuisineAutoComplete \n                                isClearable={ false }\n                                value={ cuisine_type }\n                                selectedOption={ this.getCuisineSelectedOption() }\n                                onChange={ this.onChangeCuisine }\n                                { ...autocompleteFieldCommonProps }\n                            />\n                        } \n                        \n                    />\n\n                    <GridReduxFormField \n                        caption={ zip_code }\n                        name='zipcode'\n                        component={ () => \n                            <ZipCodeAutoComplete\n                                value={ zipcode }\n                                withPagination\n                                selectedOption={ this.getZipcodeSelectedOption() }\n                                onChange={ this.onChangeZipCode }\n                                { ...autocompleteFieldCommonProps }\n                            />\n                        }\n                    />\n\n                    <GridReduxFormField \n                        caption={ state }\n                        label=\"State\"\n                        name=\"state\" \n                        component={ FormTextField } \n                    />\n\n                    <GridReduxFormField \n                        caption={ city }\n                        label=\"City\"\n                        name=\"city\" \n                        component={ FormTextField } \n                    />\n\n                    <GridReduxFormField \n                        caption={ street }\n                        label=\"Street\"\n                        name=\"street\" \n                        component={ FormTextField } \n                    />\n\n                    <GridReduxFormField \n                        caption={ sales_tax }\n                        label=\"Sales tax\"\n                        name=\"sales_tax\" \n                        component={ FormTextField } \n                    />\n\n                </Grid>\n\n                <Grid \n                    className={ classes.settingsSectionWrapper }\n                    direction='column'\n                    spacing={ 8 }\n                    container\n                    item \n                >\n                    <Grid item>\n                        <AppSwitch \n                            label=\"Delivery service\"\n                            offCaption=\"Pickup only\"\n                            onCaption=\"Delivery\"\n                            onChange={ this.handleDeliveryMethodChange }\n                            checked={ this.hasDelivery() }     \n                        />\n                    </Grid>\n                    \n\n                    <EstimatedTimeField \n                        label=\"Estimated pickup time\"\n                        name=\"estimated_pickup_time\" \n                    />\n\n                    <EstimatedTimeField \n                        label=\"Estimated delivery time\"\n                        name=\"estimated_delivery_time\" \n                    />\n        \n                    <Grid item>\n                        <Button \n                            className={ classes.button }\n                            onClick={ openRestaurantsHorsModal } \n                            variant=\"outlined\"\n                            color={ 'primary' }\n                        > \n                            Set working hours \n                        </Button>\n                    </Grid>\n                    \n                </Grid>\n            </Grid>\n\n            <Button \n                onClick={ this.onSave } \n                variant=\"contained\"\n                type='sumbit'\n                color={ 'primary' }\n                className={ classes.button }\n                disabled={ isLoading || isInvalid || isPristine }\n            > \n                Save\n            </Button>\n\n            { isLoading && <FullScreenPreloader /> }\n        </>\n      )\n    }\n}\n\nRestaurantInfoForm.propTypes = {\n    openRestaurantsHorsModal: PropTypes.func.isRequired,\n    zipcodeNumbers: PropTypes.string,\n    valuesToSubmit: PropTypes.object,\n    initialValues: PropTypes.object,\n    cuisineName: PropTypes.string,\n    isPristine: PropTypes.bool,\n    isInvalid: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    classes: PropTypes.object,\n\n}\n\nexport default RestaurantInfoForm;"]},"metadata":{},"sourceType":"module"}