{"ast":null,"code":"import _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nexport var ValidationService =\n/*#__PURE__*/\nfunction () {\n  function ValidationService() {\n    _classCallCheck(this, ValidationService);\n  }\n\n  _createClass(ValidationService, null, [{\n    key: \"exist\",\n    value: function exist(value) {\n      return ![undefined, null].includes(value);\n    }\n  }, {\n    key: \"validatePhone\",\n    value: function validatePhone(value) {\n      var phoneRegExpr = /\\(\\d{3}\\)\\s\\d{3}-\\d{4}/;\n      return phoneRegExpr.test(value);\n    }\n  }, {\n    key: \"number\",\n    value: function number(value) {\n      var numericRegExpr = /^[+-]?\\d*\\.?\\d+(?:[Ee][+-]?\\d+)?$/;\n      return numericRegExpr.test(value);\n    }\n  }, {\n    key: \"email\",\n    value: function email(str) {\n      var emailRegExpr = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n      return emailRegExpr.test(str);\n    }\n    /**\n     * Accepts value and returns string \"Required\" if value is empty. Otherwise\n     * returns false.\n     * @param {any} value value to validate\n     */\n\n  }, {\n    key: \"required\",\n    value: function required(value) {\n      return value ? false : 'Required';\n    }\n  }]);\n\n  return ValidationService;\n}();\nValidationService.validationTypes = ['maxLength', 'notNullOrEmpty', 'phone', 'postalCode', 'email'];\n\nValidationService.validateRequired = function (values, fields, errors) {\n  fields.forEach(function (field) {\n    if (!values[field]) {\n      // eslint-disable-next-line no-param-reassign\n      errors[field] = 'Required';\n    }\n  });\n};\n\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ValidationService, \"ValidationService\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/services/ValidationService/ValidationService.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/services/ValidationService/ValidationService.js"],"names":["ValidationService","value","undefined","includes","phoneRegExpr","test","numericRegExpr","str","emailRegExpr","validationTypes","validateRequired","values","fields","errors","forEach","field"],"mappings":";;;;;;;;AAAA,WAAaA,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0BAkBeC,KAlBf,EAkBsB;AAClB,aAAO,CAAC,CAACC,SAAD,EAAY,IAAZ,EAAkBC,QAAlB,CAA2BF,KAA3B,CAAR;AACD;AApBH;AAAA;AAAA,kCAsBuBA,KAtBvB,EAsB8B;AAC1B,UAAMG,YAAY,GAAG,wBAArB;AAEA,aAAOA,YAAY,CAACC,IAAb,CAAkBJ,KAAlB,CAAP;AACD;AA1BH;AAAA;AAAA,2BA4BgBA,KA5BhB,EA4BuB;AACnB,UAAMK,cAAc,GAAG,mCAAvB;AAEA,aAAOA,cAAc,CAACD,IAAf,CAAoBJ,KAApB,CAAP;AACD;AAhCH;AAAA;AAAA,0BAkCeM,GAlCf,EAkCoB;AAChB,UAAMC,YAAY,GAAG,2CAArB;AAEA,aAAOA,YAAY,CAACH,IAAb,CAAkBE,GAAlB,CAAP;AACD;AAED;;;;;;AAxCF;AAAA;AAAA,6BA6CkBN,KA7ClB,EA6CyB;AACrB,aAAOA,KAAK,GAAG,KAAH,GAAW,UAAvB;AACD;AA/CH;;AAAA;AAAA;AAAaD,iB,CACJS,e,GAAkB,CACvB,WADuB,EAEvB,gBAFuB,EAGvB,OAHuB,EAIvB,YAJuB,EAKvB,OALuB,C;;AADdT,iB,CASJU,gB,GAAmB,UAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAA4B;AACpDD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtB,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAX,EAAoB;AAClB;AACAF,MAAAA,MAAM,CAACE,KAAD,CAAN,GAAgB,UAAhB;AACD;AACF,GALD;AAMD,C;;;;;;;;;;;0BAhBUf,iB","sourcesContent":["export class ValidationService {\n  static validationTypes = [\n    'maxLength',\n    'notNullOrEmpty',\n    'phone',\n    'postalCode',\n    'email',\n  ];\n\n  static validateRequired = (values, fields, errors) => {\n    fields.forEach(field => {\n      if (!values[field]) {\n        // eslint-disable-next-line no-param-reassign\n        errors[field] = 'Required';\n      }\n    });\n  };\n\n  static exist(value) {\n    return ![undefined, null].includes(value);\n  }\n\n  static validatePhone(value) {\n    const phoneRegExpr = /\\(\\d{3}\\)\\s\\d{3}-\\d{4}/;\n\n    return phoneRegExpr.test(value);\n  }\n\n  static number(value) {\n    const numericRegExpr = /^[+-]?\\d*\\.?\\d+(?:[Ee][+-]?\\d+)?$/;\n\n    return numericRegExpr.test(value);\n  }\n\n  static email(str) {\n    const emailRegExpr = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n\n    return emailRegExpr.test(str);\n  }\n\n  /**\n   * Accepts value and returns string \"Required\" if value is empty. Otherwise\n   * returns false.\n   * @param {any} value value to validate\n   */\n  static required(value) {\n    return value ? false : 'Required';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}