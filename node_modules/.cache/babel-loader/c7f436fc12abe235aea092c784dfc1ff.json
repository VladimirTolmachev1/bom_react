{"ast":null,"code":"(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { createSelector } from 'reselect';\nimport { resource } from './restaurants.modules';\nimport moment from 'moment';\nimport { agentsListSelector } from '/scenes/Agents/modules';\n\nvar _RestaurantsSliceSelector = function _RestaurantsSliceSelector(state) {\n  return state[resource];\n};\n\nexport var restaurantsSelector = function restaurantsSelector(state) {\n  return _RestaurantsSliceSelector(state).data;\n};\nexport var filtersSelector = function filtersSelector(state) {\n  return _RestaurantsSliceSelector(state).filters;\n};\nexport var loadingSelector = function loadingSelector(state) {\n  return _RestaurantsSliceSelector(state).loading;\n};\nexport var restaurantsCountSelector = function restaurantsCountSelector(state) {\n  return _RestaurantsSliceSelector(state).count;\n};\nexport var managedRestaurantSelector = function managedRestaurantSelector(state) {\n  return _RestaurantsSliceSelector(state).managedRestaurant;\n};\nexport var restaurantsListTableDataSelector = createSelector(restaurantsSelector, agentsListSelector, function (restaurants, agents) {\n  return restaurants.map(function (_ref) {\n    var restaurant_name = _ref.restaurant_name,\n        revenue = _ref.revenue,\n        agent_name = _ref.agent_name,\n        subscription = _ref.subscription,\n        created_at = _ref.created_at,\n        delivery_method = _ref.delivery_method,\n        id = _ref.id,\n        status = _ref.status;\n    var agent = agents.find(function (agent) {\n      return agent.value === agent_name;\n    });\n    agent_name = agent && agent.label;\n    return {\n      name: {\n        restaurant_name: restaurant_name,\n        id: id\n      },\n      revenue: revenue,\n      subscription: subscription,\n      onboarded: moment(created_at).format('YYYY-MM-DD'),\n      agent_name: agent_name,\n      delivery_method: delivery_method,\n      actions: {\n        id: id,\n        status: status\n      }\n    };\n  });\n});\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_RestaurantsSliceSelector, \"_RestaurantsSliceSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.selectors.js\");\n  reactHotLoader.register(restaurantsSelector, \"restaurantsSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.selectors.js\");\n  reactHotLoader.register(filtersSelector, \"filtersSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.selectors.js\");\n  reactHotLoader.register(loadingSelector, \"loadingSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.selectors.js\");\n  reactHotLoader.register(restaurantsCountSelector, \"restaurantsCountSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.selectors.js\");\n  reactHotLoader.register(managedRestaurantSelector, \"managedRestaurantSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.selectors.js\");\n  reactHotLoader.register(restaurantsListTableDataSelector, \"restaurantsListTableDataSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.selectors.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Restaurants/modules/restaurants.selectors.js"],"names":["createSelector","resource","moment","agentsListSelector","_RestaurantsSliceSelector","state","restaurantsSelector","data","filtersSelector","filters","loadingSelector","loading","restaurantsCountSelector","count","managedRestaurantSelector","managedRestaurant","restaurantsListTableDataSelector","restaurants","agents","map","restaurant_name","revenue","agent_name","subscription","created_at","delivery_method","id","status","agent","find","value","label","name","onboarded","format","actions"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAAQC,kBAAR,QAAiC,wBAAjC;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACJ,QAAD,CAAT;AAAA,CAAvC;;AAEA,OAAO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAD,KAAK;AAAA,SAAID,yBAAyB,CAACC,KAAD,CAAzB,CAAiCE,IAArC;AAAA,CAAjC;AACP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAH,KAAK;AAAA,SAAID,yBAAyB,CAACC,KAAD,CAAzB,CAAiCI,OAArC;AAAA,CAA7B;AACP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAL,KAAK;AAAA,SAAID,yBAAyB,CAACC,KAAD,CAAzB,CAAiCM,OAArC;AAAA,CAA7B;AACP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAP,KAAK;AAAA,SAAID,yBAAyB,CAACC,KAAD,CAAzB,CAAiCQ,KAArC;AAAA,CAAtC;AACP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAT,KAAK;AAAA,SAAID,yBAAyB,CAACC,KAAD,CAAzB,CAAiCU,iBAArC;AAAA,CAAvC;AAEP,OAAO,IAAMC,gCAAgC,GAAGhB,cAAc,CAACM,mBAAD,EAAsBH,kBAAtB,EAC1D,UAACc,WAAD,EAAcC,MAAd,EAAyB;AACrB,SAAOD,WAAW,CAACE,GAAZ,CAAgB,gBAAmG;AAAA,QAAjGC,eAAiG,QAAjGA,eAAiG;AAAA,QAAhFC,OAAgF,QAAhFA,OAAgF;AAAA,QAAvEC,UAAuE,QAAvEA,UAAuE;AAAA,QAA3DC,YAA2D,QAA3DA,YAA2D;AAAA,QAA7CC,UAA6C,QAA7CA,UAA6C;AAAA,QAAjCC,eAAiC,QAAjCA,eAAiC;AAAA,QAAhBC,EAAgB,QAAhBA,EAAgB;AAAA,QAAZC,MAAY,QAAZA,MAAY;AACtH,QAAMC,KAAK,GAAGV,MAAM,CAACW,IAAP,CAAY,UAAAD,KAAK;AAAA,aAAIA,KAAK,CAACE,KAAN,KAAgBR,UAApB;AAAA,KAAjB,CAAd;AACAA,IAAAA,UAAU,GAAGM,KAAK,IAAIA,KAAK,CAACG,KAA5B;AAEA,WAAO;AACHC,MAAAA,IAAI,EAAE;AACFZ,QAAAA,eAAe,EAAfA,eADE;AAEFM,QAAAA,EAAE,EAAFA;AAFE,OADH;AAKHL,MAAAA,OAAO,EAAPA,OALG;AAMHE,MAAAA,YAAY,EAAZA,YANG;AAOHU,MAAAA,SAAS,EAAG/B,MAAM,CAACsB,UAAD,CAAN,CAAmBU,MAAnB,CAA0B,YAA1B,CAPT;AAQHZ,MAAAA,UAAU,EAAVA,UARG;AASHG,MAAAA,eAAe,EAAfA,eATG;AAUHU,MAAAA,OAAO,EAAE;AACLT,QAAAA,EAAE,EAAFA,EADK;AAELC,QAAAA,MAAM,EAANA;AAFK;AAVN,KAAP;AAeH,GAnBM,CAAP;AAoBH,CAtByD,CAAvD;;;;;;;;;;;;0BARDvB,yB;0BAEOE,mB;0BACAE,e;0BACAE,e;0BACAE,wB;0BACAE,yB;0BAEAE,gC","sourcesContent":["import { createSelector } from 'reselect';\nimport { resource } from './restaurants.modules';\nimport moment from 'moment';\n\nimport {agentsListSelector} from '/scenes/Agents/modules';\n\nconst _RestaurantsSliceSelector = state => state[resource];\n\nexport const restaurantsSelector = state => _RestaurantsSliceSelector(state).data;\nexport const filtersSelector = state => _RestaurantsSliceSelector(state).filters;\nexport const loadingSelector = state => _RestaurantsSliceSelector(state).loading;\nexport const restaurantsCountSelector = state => _RestaurantsSliceSelector(state).count;\nexport const managedRestaurantSelector = state => _RestaurantsSliceSelector(state).managedRestaurant;\n\nexport const restaurantsListTableDataSelector = createSelector(restaurantsSelector, agentsListSelector,\n    (restaurants, agents) => {\n        return restaurants.map(({restaurant_name, revenue, agent_name, subscription, created_at, delivery_method, id, status}) => {\n            const agent = agents.find(agent => agent.value === agent_name);\n            agent_name = agent && agent.label;\n\n            return {\n                name: {\n                    restaurant_name,\n                    id\n                },\n                revenue,\n                subscription,\n                onboarded : moment(created_at).format('YYYY-MM-DD'),\n                agent_name,\n                delivery_method,\n                actions: {\n                    id,\n                    status\n                }\n            }\n        });\n    });\n\n"]},"metadata":{},"sourceType":"module"}