{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { normalize } from 'normalizr';\nimport { CALL_API } from '../../store/middleware/api';\nimport { dishesSchema } from './dishes.schemas';\nimport { API_REQUESTS_ABORT } from '../core';\nimport { ReduxCrudService } from '../../services';\nimport { resource, PUBLISH_DISH_REQUEST, PUBLISH_DISH_SUCCESS, PUBLISH_DISH_ERROR, UNPUBLISH_DISH_REQUEST, UNPUBLISH_DISH_SUCCESS, UNPUBLISH_DISH_ERROR, CHANGE_DICHES_ORDERING, CLEAN_DISH_LIST, SET_DISH_FILTERS, SET_DISH_PAGE, CLEANUP_DISH, GET_DISH_LIST_REQUEST, GET_DISH_BY_ID_REQUEST, UPDATE_DISH_REQUEST, UPDATE_DISH_SUCCESS, UPDATE_DISH_ERROR, PATCH_DISH_EXTRAS_REQUEST, PATCH_DISH_EXTRAS_SUCCESS, PATCH_DISH_EXTRAS_ERROR, PATCH_DISH_SIZES_REQUEST, PATCH_DISH_SIZES_SUCCESS, PATCH_DISH_SIZES_ERROR, CREATE_DISH_REQUEST, CREATE_DISH_SUCCESS, CREATE_DISH_ERROR, DISHES__GET_BY_ID_REQUEST, DISHES__GET_BY_ID_SUCCESS, DISHES__GET_BY_ID_ERROR } from './dishes.types';\nexport var changeDishesOrdering = function changeDishesOrdering(idsWithOrder) {\n  return {\n    type: CHANGE_DICHES_ORDERING,\n    payload: {\n      idsWithOrder: idsWithOrder\n    }\n  };\n};\nexport var getDishes = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET',\n  responseConverter: function responseConverter(res) {\n    var _normalize = normalize(res.data, dishesSchema),\n        dishes = _normalize.entities.dishes,\n        result = _normalize.result;\n\n    return _objectSpread({}, res, {\n      byId: dishes,\n      allIds: result\n    });\n  }\n});\nexport var getDishById = function getDishById(id) {\n  return {\n    type: DISHES__GET_BY_ID_REQUEST,\n    payload: id\n  };\n};\nexport var getDishByIdSuccess = function getDishByIdSuccess(dish) {\n  return {\n    type: DISHES__GET_BY_ID_SUCCESS,\n    payload: dish\n  };\n};\nexport var getDishByIdError = function getDishByIdError(error) {\n  return {\n    type: DISHES__GET_BY_ID_ERROR,\n    payload: error\n  };\n};\nexport var patchDishExtras = function patchDishExtras(categoryId, extras) {\n  return {\n    type: PATCH_DISH_EXTRAS_REQUEST,\n    payload: {\n      categoryId: categoryId,\n      extras: extras\n    }\n  };\n};\nexport var patchDishExtrasSuccess = function patchDishExtrasSuccess(payload) {\n  return {\n    type: PATCH_DISH_EXTRAS_SUCCESS,\n    payload: payload\n  };\n};\nexport var patchDishExtrasError = function patchDishExtrasError(payload) {\n  return {\n    type: PATCH_DISH_EXTRAS_ERROR,\n    payload: payload\n  };\n}; // SIZES\n\nexport var patchDishSizes = function patchDishSizes(categoryId, extras) {\n  return {\n    type: PATCH_DISH_SIZES_REQUEST,\n    payload: {\n      categoryId: categoryId,\n      extras: extras\n    }\n  };\n};\nexport var patchDishSizesSuccess = function patchDishSizesSuccess(payload) {\n  return {\n    type: PATCH_DISH_SIZES_SUCCESS,\n    payload: payload\n  };\n};\nexport var patchDishSizesError = function patchDishSizesError(payload) {\n  return {\n    type: PATCH_DISH_SIZES_ERROR,\n    payload: payload\n  };\n}; // CREATE DISH\n\nexport var createDish = function createDish(payload) {\n  return {\n    type: CREATE_DISH_REQUEST,\n    payload: payload\n  };\n};\nexport var createDishSuccess = function createDishSuccess(newDish) {\n  return {\n    type: CREATE_DISH_SUCCESS,\n    payload: newDish\n  };\n};\nexport var createDishError = function createDishError(error) {\n  return {\n    type: CREATE_DISH_ERROR,\n    payload: error\n  };\n}; // UPDATE DISH\n\nexport var updateDish = function updateDish(payload) {\n  return {\n    type: UPDATE_DISH_REQUEST,\n    payload: payload\n  };\n};\nexport var updateDishSuccess = function updateDishSuccess(updatedDish) {\n  return {\n    type: UPDATE_DISH_SUCCESS,\n    payload: updatedDish\n  };\n};\nexport var updateDishError = function updateDishError(error) {\n  return {\n    type: UPDATE_DISH_ERROR,\n    payload: error\n  };\n}; // export const getDishById = ReduxCrudService.resourceAction({\n//     resource,\n//     method: 'GET',\n//     byId: true\n// });\n\nexport var removeDish = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'DELETE',\n  logger: {\n    success: 'Dish was successful deleted',\n    error: 'Error during dish delete'\n  }\n});\nexport function publishDishes(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: \"\".concat(resource, \"/publish\"),\n      method: 'POST',\n      logger: {\n        success: 'Publishing was success',\n        error: 'Error during publishing'\n      },\n      types: [PUBLISH_DISH_REQUEST, PUBLISH_DISH_SUCCESS, PUBLISH_DISH_ERROR],\n      body: body\n    }\n  };\n}\nexport function unpublishDishes(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: \"\".concat(resource, \"/unpublish\"),\n      method: 'POST',\n      logger: {\n        success: 'Unpublishing was success',\n        error: 'Error during Unpublishing'\n      },\n      types: [UNPUBLISH_DISH_REQUEST, UNPUBLISH_DISH_SUCCESS, UNPUBLISH_DISH_ERROR],\n      body: body\n    }\n  };\n}\nexport function updateDishFilters(filters) {\n  return {\n    type: SET_DISH_FILTERS,\n    filters: filters\n  };\n}\nexport function setDishPage(page) {\n  return {\n    type: SET_DISH_PAGE,\n    page: page\n  };\n}\nexport function cleanupDish() {\n  return {\n    type: CLEANUP_DISH\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [GET_DISH_LIST_REQUEST, CREATE_DISH_REQUEST, GET_DISH_BY_ID_REQUEST, UPDATE_DISH_REQUEST]\n  };\n}\nexport function cleanDishList() {\n  return {\n    type: CLEAN_DISH_LIST\n  };\n}\nexport var mapRetrievedDishArray = function mapRetrievedDishArray(dishList) {\n  return dishList.map(function (dish) {\n    return _objectSpread({}, dish, {\n      selectedSize: (dish.sizes || []).length ? dish.sizes[0].id : null\n    });\n  });\n};\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(changeDishesOrdering, \"changeDishesOrdering\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(getDishes, \"getDishes\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(getDishById, \"getDishById\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(getDishByIdSuccess, \"getDishByIdSuccess\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(getDishByIdError, \"getDishByIdError\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(patchDishExtras, \"patchDishExtras\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(patchDishExtrasSuccess, \"patchDishExtrasSuccess\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(patchDishExtrasError, \"patchDishExtrasError\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(patchDishSizes, \"patchDishSizes\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(patchDishSizesSuccess, \"patchDishSizesSuccess\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(patchDishSizesError, \"patchDishSizesError\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(createDish, \"createDish\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(createDishSuccess, \"createDishSuccess\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(createDishError, \"createDishError\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(updateDish, \"updateDish\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(updateDishSuccess, \"updateDishSuccess\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(updateDishError, \"updateDishError\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(removeDish, \"removeDish\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(publishDishes, \"publishDishes\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(unpublishDishes, \"unpublishDishes\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(updateDishFilters, \"updateDishFilters\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(setDishPage, \"setDishPage\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(cleanupDish, \"cleanupDish\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(cleanDishList, \"cleanDishList\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n  reactHotLoader.register(mapRetrievedDishArray, \"mapRetrievedDishArray\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/dishes/dishes.actions.js"],"names":["normalize","CALL_API","dishesSchema","API_REQUESTS_ABORT","ReduxCrudService","resource","PUBLISH_DISH_REQUEST","PUBLISH_DISH_SUCCESS","PUBLISH_DISH_ERROR","UNPUBLISH_DISH_REQUEST","UNPUBLISH_DISH_SUCCESS","UNPUBLISH_DISH_ERROR","CHANGE_DICHES_ORDERING","CLEAN_DISH_LIST","SET_DISH_FILTERS","SET_DISH_PAGE","CLEANUP_DISH","GET_DISH_LIST_REQUEST","GET_DISH_BY_ID_REQUEST","UPDATE_DISH_REQUEST","UPDATE_DISH_SUCCESS","UPDATE_DISH_ERROR","PATCH_DISH_EXTRAS_REQUEST","PATCH_DISH_EXTRAS_SUCCESS","PATCH_DISH_EXTRAS_ERROR","PATCH_DISH_SIZES_REQUEST","PATCH_DISH_SIZES_SUCCESS","PATCH_DISH_SIZES_ERROR","CREATE_DISH_REQUEST","CREATE_DISH_SUCCESS","CREATE_DISH_ERROR","DISHES__GET_BY_ID_REQUEST","DISHES__GET_BY_ID_SUCCESS","DISHES__GET_BY_ID_ERROR","changeDishesOrdering","idsWithOrder","type","payload","getDishes","resourceAction","method","responseConverter","res","data","dishes","entities","result","byId","allIds","getDishById","id","getDishByIdSuccess","dish","getDishByIdError","error","patchDishExtras","categoryId","extras","patchDishExtrasSuccess","patchDishExtrasError","patchDishSizes","patchDishSizesSuccess","patchDishSizesError","createDish","createDishSuccess","newDish","createDishError","updateDish","updateDishSuccess","updatedDish","updateDishError","removeDish","logger","success","publishDishes","body","request","endpoint","types","unpublishDishes","updateDishFilters","filters","setDishPage","page","cleanupDish","abortPageRequests","requestTypes","cleanDishList","mapRetrievedDishArray","dishList","map","selectedSize","sizes","length"],"mappings":"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","sourcesContent":["import { normalize } from 'normalizr';\n\nimport { CALL_API } from '../../store/middleware/api';\nimport { dishesSchema } from './dishes.schemas';\nimport { API_REQUESTS_ABORT } from '../core';\nimport { ReduxCrudService } from '../../services';\nimport {\n  resource,\n  PUBLISH_DISH_REQUEST,\n  PUBLISH_DISH_SUCCESS,\n  PUBLISH_DISH_ERROR,\n  UNPUBLISH_DISH_REQUEST,\n  UNPUBLISH_DISH_SUCCESS,\n  UNPUBLISH_DISH_ERROR,\n  CHANGE_DICHES_ORDERING,\n  CLEAN_DISH_LIST,\n  SET_DISH_FILTERS,\n  SET_DISH_PAGE,\n  CLEANUP_DISH,\n  GET_DISH_LIST_REQUEST,\n  GET_DISH_BY_ID_REQUEST,\n  UPDATE_DISH_REQUEST,\n  UPDATE_DISH_SUCCESS,\n  UPDATE_DISH_ERROR,\n  PATCH_DISH_EXTRAS_REQUEST,\n  PATCH_DISH_EXTRAS_SUCCESS,\n  PATCH_DISH_EXTRAS_ERROR,\n  PATCH_DISH_SIZES_REQUEST,\n  PATCH_DISH_SIZES_SUCCESS,\n  PATCH_DISH_SIZES_ERROR,\n  CREATE_DISH_REQUEST,\n  CREATE_DISH_SUCCESS,\n  CREATE_DISH_ERROR,\n  DISHES__GET_BY_ID_REQUEST,\n  DISHES__GET_BY_ID_SUCCESS,\n  DISHES__GET_BY_ID_ERROR,\n} from './dishes.types';\n\nexport const changeDishesOrdering = idsWithOrder => ({\n  type: CHANGE_DICHES_ORDERING,\n  payload: { idsWithOrder },\n});\n\nexport const getDishes = ReduxCrudService.resourceAction({\n  resource,\n  method: 'GET',\n  responseConverter: res => {\n    const {\n      entities: { dishes },\n      result,\n    } = normalize(res.data, dishesSchema);\n\n    return {\n      ...res,\n      byId: dishes,\n      allIds: result,\n    };\n  },\n});\n\nexport const getDishById = id => ({\n  type: DISHES__GET_BY_ID_REQUEST,\n  payload: id,\n});\n\nexport const getDishByIdSuccess = dish => ({\n  type: DISHES__GET_BY_ID_SUCCESS,\n  payload: dish,\n});\n\nexport const getDishByIdError = error => ({\n  type: DISHES__GET_BY_ID_ERROR,\n  payload: error,\n});\n\nexport const patchDishExtras = (categoryId, extras) => ({\n  type: PATCH_DISH_EXTRAS_REQUEST,\n  payload: { categoryId, extras },\n});\n\nexport const patchDishExtrasSuccess = payload => ({\n  type: PATCH_DISH_EXTRAS_SUCCESS,\n  payload,\n});\n\nexport const patchDishExtrasError = payload => ({\n  type: PATCH_DISH_EXTRAS_ERROR,\n  payload,\n});\n\n// SIZES\nexport const patchDishSizes = (categoryId, extras) => ({\n  type: PATCH_DISH_SIZES_REQUEST,\n  payload: { categoryId, extras },\n});\n\nexport const patchDishSizesSuccess = payload => ({\n  type: PATCH_DISH_SIZES_SUCCESS,\n  payload,\n});\n\nexport const patchDishSizesError = payload => ({\n  type: PATCH_DISH_SIZES_ERROR,\n  payload,\n});\n\n// CREATE DISH\nexport const createDish = payload => ({\n  type: CREATE_DISH_REQUEST,\n  payload,\n});\n\nexport const createDishSuccess = newDish => ({\n  type: CREATE_DISH_SUCCESS,\n  payload: newDish,\n});\n\nexport const createDishError = error => ({\n  type: CREATE_DISH_ERROR,\n  payload: error,\n});\n\n// UPDATE DISH\nexport const updateDish = payload => ({\n  type: UPDATE_DISH_REQUEST,\n  payload,\n});\n\nexport const updateDishSuccess = updatedDish => ({\n  type: UPDATE_DISH_SUCCESS,\n  payload: updatedDish,\n});\n\nexport const updateDishError = error => ({\n  type: UPDATE_DISH_ERROR,\n  payload: error,\n});\n\n// export const getDishById = ReduxCrudService.resourceAction({\n//     resource,\n//     method: 'GET',\n//     byId: true\n// });\n\nexport const removeDish = ReduxCrudService.resourceAction({\n  resource,\n  method: 'DELETE',\n  logger: {\n    success: 'Dish was successful deleted',\n    error: 'Error during dish delete',\n  },\n});\n\nexport function publishDishes(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: `${resource}/publish`,\n      method: 'POST',\n      logger: {\n        success: 'Publishing was success',\n        error: 'Error during publishing',\n      },\n      types: [PUBLISH_DISH_REQUEST, PUBLISH_DISH_SUCCESS, PUBLISH_DISH_ERROR],\n      body,\n    },\n  };\n}\n\nexport function unpublishDishes(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: `${resource}/unpublish`,\n      method: 'POST',\n      logger: {\n        success: 'Unpublishing was success',\n        error: 'Error during Unpublishing',\n      },\n      types: [\n        UNPUBLISH_DISH_REQUEST,\n        UNPUBLISH_DISH_SUCCESS,\n        UNPUBLISH_DISH_ERROR,\n      ],\n      body,\n    },\n  };\n}\n\nexport function updateDishFilters(filters) {\n  return {\n    type: SET_DISH_FILTERS,\n    filters,\n  };\n}\n\nexport function setDishPage(page) {\n  return {\n    type: SET_DISH_PAGE,\n    page,\n  };\n}\n\nexport function cleanupDish() {\n  return {\n    type: CLEANUP_DISH,\n  };\n}\n\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [\n      GET_DISH_LIST_REQUEST,\n      CREATE_DISH_REQUEST,\n      GET_DISH_BY_ID_REQUEST,\n      UPDATE_DISH_REQUEST,\n    ],\n  };\n}\n\nexport function cleanDishList() {\n  return {\n    type: CLEAN_DISH_LIST,\n  };\n}\n\nexport const mapRetrievedDishArray = dishList =>\n  dishList.map(dish => ({\n    ...dish,\n    selectedSize: (dish.sizes || []).length ? dish.sizes[0].id : null,\n  }));\n"]},"metadata":{},"sourceType":"module"}