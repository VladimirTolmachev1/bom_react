{"ast":null,"code":"(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { API_REQUESTS_ABORT } from '/modules/core.modules';\nimport { PUT_API_REQUEST_IN_REGISTRY, CALL_API } from './api';\nimport { GET_RESTAURANTS_LIST_REQUEST } from '/scenes/Restaurants/modules/restaurants.modules';\nvar appRequestsRegistry = {};\nvar forceAbortRequestsRegistry = [GET_RESTAURANTS_LIST_REQUEST];\n\nvar _default = function _default(store) {\n  return function (next) {\n    return function (action) {\n      switch (action.type) {\n        case CALL_API:\n          {\n            var requestType = action.request.types[0];\n\n            if (forceAbortRequestsRegistry.includes(requestType)) {\n              appRequestsRegistry[requestType] && appRequestsRegistry[requestType].abort();\n            }\n\n            break;\n          }\n\n        case PUT_API_REQUEST_IN_REGISTRY:\n          {\n            appRequestsRegistry[action.requestType] = action.xhr;\n            break;\n          }\n\n        case API_REQUESTS_ABORT:\n          {\n            action.requestTypes.forEach(function (requestType) {\n              appRequestsRegistry[requestType] && appRequestsRegistry[requestType].abort();\n            });\n            break;\n          }\n\n        default:\n          {\n            return next(action);\n          }\n      }\n\n      return next(action);\n    };\n  };\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(appRequestsRegistry, \"appRequestsRegistry\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/store/middleware/requestsMiddleware.js\");\n  reactHotLoader.register(forceAbortRequestsRegistry, \"forceAbortRequestsRegistry\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/store/middleware/requestsMiddleware.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/store/middleware/requestsMiddleware.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/store/middleware/requestsMiddleware.js"],"names":["API_REQUESTS_ABORT","PUT_API_REQUEST_IN_REGISTRY","CALL_API","GET_RESTAURANTS_LIST_REQUEST","appRequestsRegistry","forceAbortRequestsRegistry","store","next","action","type","requestType","request","types","includes","abort","xhr","requestTypes","forEach"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,uBAAnC;AACA,SAASC,2BAAT,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,SACIC,4BADJ,QAEO,iDAFP;AAIA,IAAIC,mBAAmB,GAAG,EAA1B;AACA,IAAIC,0BAA0B,GAAG,CAACF,4BAAD,CAAjC;;eAEe,kBAAAG,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtC,cAAQA,MAAM,CAACC,IAAf;AACI,aAAKP,QAAL;AAAe;AACX,gBAAMQ,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqB,CAArB,CAApB;;AACA,gBAAIP,0BAA0B,CAACQ,QAA3B,CAAoCH,WAApC,CAAJ,EAAsD;AAClDN,cAAAA,mBAAmB,CAACM,WAAD,CAAnB,IAAoCN,mBAAmB,CAACM,WAAD,CAAnB,CAAiCI,KAAjC,EAApC;AACH;;AACD;AACH;;AAED,aAAKb,2BAAL;AAAkC;AAC9BG,YAAAA,mBAAmB,CAACI,MAAM,CAACE,WAAR,CAAnB,GAA0CF,MAAM,CAACO,GAAjD;AACA;AACH;;AAED,aAAKf,kBAAL;AAAyB;AACrBQ,YAAAA,MAAM,CAACQ,YAAP,CAAoBC,OAApB,CAA4B,UAAAP,WAAW,EAAI;AACvCN,cAAAA,mBAAmB,CAACM,WAAD,CAAnB,IAAoCN,mBAAmB,CAACM,WAAD,CAAnB,CAAiCI,KAAjC,EAApC;AACH,aAFD;AAGA;AACH;;AAED;AAAS;AACL,mBAAOP,IAAI,CAACC,MAAD,CAAX;AACH;AAvBL;;AA0BA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACH,KA5B2B;AAAA,GAAR;AAAA,C;;AAApB;;;;;;;;;;;;0BAHIJ,mB;0BACAC,0B","sourcesContent":["import { API_REQUESTS_ABORT } from '/modules/core.modules';\nimport { PUT_API_REQUEST_IN_REGISTRY, CALL_API } from './api';\nimport {\n    GET_RESTAURANTS_LIST_REQUEST\n} from '/scenes/Restaurants/modules/restaurants.modules';\n\nlet appRequestsRegistry = {};\nlet forceAbortRequestsRegistry = [GET_RESTAURANTS_LIST_REQUEST];\n\nexport default store => next => action => {\n    switch (action.type) {\n        case CALL_API: {\n            const requestType = action.request.types[0];\n            if (forceAbortRequestsRegistry.includes(requestType)) {\n                appRequestsRegistry[requestType] && appRequestsRegistry[requestType].abort();\n            }\n            break;\n        }\n\n        case PUT_API_REQUEST_IN_REGISTRY: {\n            appRequestsRegistry[action.requestType] = action.xhr;\n            break;\n        }\n\n        case API_REQUESTS_ABORT: {\n            action.requestTypes.forEach(requestType => {\n                appRequestsRegistry[requestType] && appRequestsRegistry[requestType].abort();\n            });\n            break;\n        }\n\n        default: {\n            return next(action);\n        }\n    }\n\n    return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}