{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _dec,\n    _dec2,\n    _class,\n    _class2,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantModal/RestaurantModal.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport { AppFormTextField, AppFormSelect, AppPreloaderSmall, AppFormMaskTextField, AppCleanHOC } from '/components/';\nimport { dictionarySelector } from '/modules/core.selectors';\nimport { HelperService } from '/services';\nimport { AgentsAutoComplete } from '/scenes/Agents/';\nimport { ZipCodeAutoComplete } from '/scenes/ZipCodeAutoComplete';\nimport { CuisineAutoComplete } from '/scenes/CuisineAutoComplete';\nimport './RestaurantsModal.scss';\nimport { autobind } from 'core-decorators';\nimport { restaurantModalSelector, toggleRestaurantsModal, setMode, clearModalData, restaurantModalValidation, getInfoByPostalCode } from './modules/';\nimport { createRestaurant, updateRestaurant, getRestaurantById, abortPageRequests } from '/scenes/Restaurants/modules/restaurants.modules';\nimport { PHONE_MASK } from './../../constants';\nvar formFieldsSelector = formValueSelector('Restaurant');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    restaurantModal: restaurantModalSelector(state),\n    dictionary: dictionarySelector(state),\n    agent_name: formFieldsSelector(state, 'agent_name'),\n    subscription: formFieldsSelector(state, 'subscription'),\n    restaurant_name: formFieldsSelector(state, 'restaurant_name'),\n    manager_name: formFieldsSelector(state, 'manager_name'),\n    manager_email: formFieldsSelector(state, 'manager_email'),\n    delivery_email: formFieldsSelector(state, 'delivery_email'),\n    phone_number: formFieldsSelector(state, 'phone_number'),\n    sales_tax: formFieldsSelector(state, 'sales_tax'),\n    zipcode: formFieldsSelector(state, 'zipcode'),\n    cuisine_type: formFieldsSelector(state, 'cuisine_type'),\n    delivery_method: formFieldsSelector(state, 'delivery_method'),\n    street_address: formFieldsSelector(state, 'street_address'),\n    state: formFieldsSelector(state, 'state'),\n    city: formFieldsSelector(state, 'city'),\n    tags: formFieldsSelector(state, 'tags'),\n    initialValues: restaurantModalSelector(state).initialValues\n  };\n};\n\nvar mapDispatchToProps = {\n  toggleRestaurantsModal: toggleRestaurantsModal,\n  createRestaurant: createRestaurant,\n  getRestaurantById: getRestaurantById,\n  updateRestaurant: updateRestaurant,\n  abortPageRequests: abortPageRequests,\n  setMode: setMode,\n  clearModalData: clearModalData,\n  getInfoByPostalCode: getInfoByPostalCode\n};\nvar RestaurantModal = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec2 = reduxForm({\n  form: 'Restaurant',\n  enableReinitialize: true,\n  validate: restaurantModalValidation\n}), _dec(_class = _dec2(_class = AppCleanHOC(_class = (_class2 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RestaurantModal, _Component);\n\n  function RestaurantModal() {\n    _classCallCheck(this, RestaurantModal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RestaurantModal).apply(this, arguments));\n  }\n\n  _createClass(RestaurantModal, [{\n    key: \"onEntered\",\n    value: function onEntered() {\n      var _this$props = this.props,\n          _this$props$restauran = _this$props.restaurantModal,\n          mode = _this$props$restauran.mode,\n          id = _this$props$restauran.id,\n          getRestaurantById = _this$props.getRestaurantById;\n\n      if (mode === 'edit') {\n        getRestaurantById({\n          id: id\n        });\n      }\n    }\n  }, {\n    key: \"getDialogTitle\",\n    value: function getDialogTitle() {\n      var mode = this.props.restaurantModal.mode;\n      var action = mode === 'add' ? 'Add new' : 'Edit';\n      return \"\".concat(action, \" restaurant's information\");\n    }\n  }, {\n    key: \"getModalAction\",\n    value: function getModalAction() {\n      var _this$props2 = this.props,\n          _this$props2$restaura = _this$props2.restaurantModal,\n          loading = _this$props2$restaura.loading,\n          mode = _this$props2$restaura.mode,\n          pristine = _this$props2.pristine,\n          invalid = _this$props2.invalid;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.onClose,\n        variant: \"contained\",\n        disabled: loading,\n        className: 'restaurant-modal__actions-cancel',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        onClick: this.onActionAndCloseCLick,\n        variant: \"contained\",\n        type: 'submit',\n        disabled: loading || invalid || pristine,\n        className: 'restaurant-modal__actions-save-close',\n        color: 'secondary',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, mode === 'edit' ? 'Update' : 'Save', \" and close\"), React.createElement(Button, {\n        onClick: this.onActionAndAddAnotherCLick,\n        variant: \"contained\",\n        type: 'submit',\n        disabled: loading || invalid || pristine,\n        className: 'restaurant-modal__actions-save-add',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, mode === 'edit' ? 'Update' : 'Save', \" and Add another Restaurant\"));\n    }\n  }, {\n    key: \"requestAction\",\n    value: function requestAction() {\n      var _this$props3 = this.props,\n          createRestaurant = _this$props3.createRestaurant,\n          updateRestaurant = _this$props3.updateRestaurant,\n          _this$props3$restaura = _this$props3.restaurantModal,\n          mode = _this$props3$restaura.mode,\n          id = _this$props3$restaura.id;\n      var body = HelperService.pick(this.props, ['agent_name', 'restaurant_name', 'subscription', 'manager_name', 'manager_email', 'delivery_email', 'phone_number', 'sales_tax', 'cuisine_type', 'zipcode', 'street_address', 'city', 'state', 'tags', 'delivery_method']);\n      var request = mode === 'add' ? createRestaurant({\n        body: body\n      }) : updateRestaurant({\n        body: _objectSpread({}, body, {\n          id: id\n        })\n      });\n      return request.promise;\n    }\n  }, {\n    key: \"onActionAndCloseCLick\",\n    value: function onActionAndCloseCLick(event) {\n      var _this$props4 = this.props,\n          toggleRestaurantsModal = _this$props4.toggleRestaurantsModal,\n          reset = _this$props4.reset;\n      event.preventDefault();\n      event.stopPropagation();\n      this.requestAction().then(reset).then(function () {\n        return toggleRestaurantsModal(false);\n      });\n    }\n  }, {\n    key: \"onActionAndAddAnotherCLick\",\n    value: function onActionAndAddAnotherCLick(event) {\n      var _this$props5 = this.props,\n          reset = _this$props5.reset,\n          setMode = _this$props5.setMode;\n      event.preventDefault();\n      event.stopPropagation();\n      this.requestAction().then(reset).then(function () {\n        return setMode({\n          mode: 'add'\n        });\n      });\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      var _this$props6 = this.props,\n          reset = _this$props6.reset,\n          toggleRestaurantsModal = _this$props6.toggleRestaurantsModal,\n          clearModalData = _this$props6.clearModalData;\n      reset();\n      toggleRestaurantsModal(false);\n      clearModalData();\n    }\n  }, {\n    key: \"onChangeAgent\",\n    value: function onChangeAgent(_ref) {\n      var _ref$agent_name = _ref.agent_name,\n          agent_name = _ref$agent_name === void 0 ? '' : _ref$agent_name;\n      var change = this.props.change;\n      change('agent_name', agent_name);\n    }\n  }, {\n    key: \"onChangeCuisine\",\n    value: function onChangeCuisine(selectedOption) {\n      var change = this.props.change;\n      change('cuisine_type', selectedOption.value);\n    }\n  }, {\n    key: \"onChangeZipCode\",\n    value: function onChangeZipCode(_ref2) {\n      var _ref2$value = _ref2.value,\n          value = _ref2$value === void 0 ? '' : _ref2$value,\n          city = _ref2.city,\n          state = _ref2.state;\n      var change = this.props.change;\n      change('zipcode', value);\n      change('city', city);\n      change('state', state);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          _this$props7$restaura = _this$props7.restaurantModal,\n          open = _this$props7$restaura.open,\n          loading = _this$props7$restaura.loading,\n          dictionary = _this$props7.dictionary,\n          agent_name = _this$props7.agent_name,\n          cuisine_type = _this$props7.cuisine_type,\n          zipcode = _this$props7.zipcode;\n      return React.createElement(Dialog, {\n        open: open,\n        onEntered: this.onEntered,\n        onClose: this.onClose,\n        fullWidth: true,\n        maxWidth: 'md',\n        className: 'restaurant-modal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: 'restaurant__form',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, loading && React.createElement(AppPreloaderSmall, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }), React.createElement(DialogTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, this.getDialogTitle()), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"restaurant-modal__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"restaurant-modal__content-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(AgentsAutoComplete, {\n        value: agent_name,\n        onChange: this.onChangeAgent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"restaurant_name\",\n        required: true,\n        type: 'text',\n        label: 'Restaurant Name',\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"manager_name\",\n        required: true,\n        type: 'text',\n        label: \"Restaurant Manager's Name\",\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"manager_email\",\n        required: true,\n        type: 'text',\n        label: \"Restaurant Manager's Email\",\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"delivery_email\",\n        type: 'text',\n        label: 'Restaurant Delivery Email',\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }), React.createElement(CuisineAutoComplete, {\n        value: cuisine_type,\n        compareKey: 'value',\n        onChange: this.onChangeCuisine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"phone_number\",\n        label: 'Phone number',\n        mask: PHONE_MASK,\n        component: AppFormMaskTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }), React.createElement(Field, {\n        className: 'restaurant-modal__field',\n        name: \"sales_tax\",\n        type: 'text',\n        label: 'Sales Tax',\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"restaurant-modal__content-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"delivery_method\",\n        required: true,\n        options: dictionary.delivery_method || [],\n        label: 'Select delivery method',\n        component: AppFormSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"subscription\",\n        required: true,\n        options: dictionary.subscriptions,\n        label: 'Select subscription',\n        component: AppFormSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"street_address\",\n        required: true,\n        type: 'text',\n        multiline: true,\n        label: 'Enter street address',\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }), React.createElement(ZipCodeAutoComplete, {\n        value: zipcode,\n        compareKey: 'value',\n        onChange: this.onChangeZipCode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"city\",\n        required: true,\n        type: 'text',\n        multiline: true,\n        label: 'Enter city',\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"state\",\n        required: true,\n        type: 'text',\n        multiline: true,\n        label: 'Enter state',\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"tags\",\n        type: 'text',\n        multiline: true,\n        rows: 2,\n        label: 'Add keywords like your best dishes and services',\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      })))), React.createElement(Divider, {\n        className: 'restaurant-modal__divider',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }), React.createElement(DialogActions, {\n        className: 'restaurant-modal__actions',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, this.getModalAction())));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return RestaurantModal;\n}(Component), (_applyDecoratedDescriptor(_class2.prototype, \"onEntered\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onEntered\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onActionAndCloseCLick\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onActionAndCloseCLick\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onActionAndAddAnotherCLick\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onActionAndAddAnotherCLick\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onClose\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onClose\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onChangeAgent\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onChangeAgent\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onChangeCuisine\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onChangeCuisine\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onChangeZipCode\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onChangeZipCode\"), _class2.prototype)), _class2)) || _class) || _class) || _class);\nexport { RestaurantModal as default };\nRestaurantModal.propTypes = {\n  open: PropTypes.bool,\n  actions: PropTypes.any,\n  onClose: PropTypes.func\n};\nRestaurantModal.defaultProps = {};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(formFieldsSelector, \"formFieldsSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantModal/RestaurantModal.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantModal/RestaurantModal.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantModal/RestaurantModal.js\");\n  reactHotLoader.register(RestaurantModal, \"RestaurantModal\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantModal/RestaurantModal.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/RestaurantModal/RestaurantModal.js"],"names":["React","Component","Fragment","PropTypes","Field","reduxForm","formValueSelector","connect","Button","Dialog","DialogActions","DialogContent","DialogTitle","Divider","AppFormTextField","AppFormSelect","AppPreloaderSmall","AppFormMaskTextField","AppCleanHOC","dictionarySelector","HelperService","AgentsAutoComplete","ZipCodeAutoComplete","CuisineAutoComplete","autobind","restaurantModalSelector","toggleRestaurantsModal","setMode","clearModalData","restaurantModalValidation","getInfoByPostalCode","createRestaurant","updateRestaurant","getRestaurantById","abortPageRequests","PHONE_MASK","formFieldsSelector","mapStateToProps","state","restaurantModal","dictionary","agent_name","subscription","restaurant_name","manager_name","manager_email","delivery_email","phone_number","sales_tax","zipcode","cuisine_type","delivery_method","street_address","city","tags","initialValues","mapDispatchToProps","RestaurantModal","form","enableReinitialize","validate","props","mode","id","action","loading","pristine","invalid","onClose","onActionAndCloseCLick","onActionAndAddAnotherCLick","body","pick","request","promise","event","reset","preventDefault","stopPropagation","requestAction","then","change","selectedOption","value","open","onEntered","getDialogTitle","onChangeAgent","onChangeCuisine","subscriptions","onChangeZipCode","getModalAction","propTypes","bool","actions","any","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\n\nimport {\n    AppFormTextField,\n    AppFormSelect,\n    AppPreloaderSmall,\n    AppFormMaskTextField,\n    AppCleanHOC\n} from '/components/';\nimport { dictionarySelector } from '/modules/core.selectors';\nimport { HelperService } from '/services';\nimport { AgentsAutoComplete } from '/scenes/Agents/';\nimport { ZipCodeAutoComplete } from '/scenes/ZipCodeAutoComplete';\nimport { CuisineAutoComplete } from '/scenes/CuisineAutoComplete';\n\nimport './RestaurantsModal.scss';\n\nimport { autobind } from 'core-decorators';\n\nimport {\n    restaurantModalSelector,\n    toggleRestaurantsModal,\n    setMode,\n    clearModalData,\n    restaurantModalValidation,\n    getInfoByPostalCode\n} from './modules/';\n\nimport {\n    createRestaurant,\n    updateRestaurant,\n    getRestaurantById,\n    abortPageRequests\n} from '/scenes/Restaurants/modules/restaurants.modules';\nimport { PHONE_MASK } from './../../constants';\n\nconst formFieldsSelector = formValueSelector('Restaurant');\n\nconst mapStateToProps = state => ({\n    restaurantModal: restaurantModalSelector(state),\n    dictionary: dictionarySelector(state),\n    agent_name: formFieldsSelector(state, 'agent_name'),\n    subscription: formFieldsSelector(state, 'subscription'),\n    restaurant_name: formFieldsSelector(state, 'restaurant_name'),\n    manager_name: formFieldsSelector(state, 'manager_name'),\n    manager_email: formFieldsSelector(state, 'manager_email'),\n    delivery_email: formFieldsSelector(state, 'delivery_email'),\n    phone_number: formFieldsSelector(state, 'phone_number'),\n    sales_tax: formFieldsSelector(state, 'sales_tax'),\n    zipcode: formFieldsSelector(state, 'zipcode'),\n    cuisine_type: formFieldsSelector(state, 'cuisine_type'),\n    delivery_method: formFieldsSelector(state, 'delivery_method'),\n    street_address: formFieldsSelector(state, 'street_address'),\n    state: formFieldsSelector(state, 'state'),\n    city: formFieldsSelector(state, 'city'),\n    tags: formFieldsSelector(state, 'tags'),\n    initialValues: restaurantModalSelector(state).initialValues\n});\n\nconst mapDispatchToProps = {\n    toggleRestaurantsModal,\n    createRestaurant,\n    getRestaurantById,\n    updateRestaurant,\n    abortPageRequests,\n    setMode,\n    clearModalData,\n    getInfoByPostalCode\n};\n\nexport default\n@connect(\n    mapStateToProps,\n    mapDispatchToProps\n)\n@reduxForm({\n    form: 'Restaurant',\n    enableReinitialize: true,\n    validate: restaurantModalValidation\n})\n@AppCleanHOC\nclass RestaurantModal extends Component {\n    @autobind\n    onEntered() {\n        const {\n            restaurantModal: { mode, id },\n            getRestaurantById\n        } = this.props;\n        if (mode === 'edit') {\n            getRestaurantById({ id });\n        }\n    }\n\n    getDialogTitle() {\n        const {\n            restaurantModal: { mode }\n        } = this.props;\n        const action = mode === 'add' ? 'Add new' : 'Edit';\n\n        return `${action} restaurant's information`;\n    }\n\n    getModalAction() {\n        const {\n            restaurantModal: { loading, mode },\n            pristine,\n            invalid,\n        } = this.props;\n\n        return (\n            <Fragment>\n                <Button\n                    onClick={this.onClose}\n                    variant='contained'\n                    disabled={loading}\n                    className={'restaurant-modal__actions-cancel'}\n                >\n                    Cancel\n                </Button>\n                <Button\n                    onClick={this.onActionAndCloseCLick}\n                    variant='contained'\n                    type={'submit'}\n                    disabled={ loading || invalid || pristine }\n                    className={'restaurant-modal__actions-save-close'}\n                    color={'secondary'}\n                >\n                    {mode === 'edit' ? 'Update' : 'Save'} and close\n                </Button>\n                <Button\n                    onClick={this.onActionAndAddAnotherCLick}\n                    variant='contained'\n                    type={'submit'}\n                    disabled={ loading || invalid || pristine }\n                    className={'restaurant-modal__actions-save-add'}\n                >\n                    {mode === 'edit' ? 'Update' : 'Save'} and Add another\n                    Restaurant\n                </Button>\n            </Fragment>\n        );\n    }\n\n    requestAction() {\n        const {\n            createRestaurant,\n            updateRestaurant,\n            restaurantModal: { mode, id }\n        } = this.props;\n\n        const body = HelperService.pick(this.props, [\n            'agent_name',\n            'restaurant_name',\n            'subscription',\n            'manager_name',\n            'manager_email',\n            'delivery_email',\n            'phone_number',\n            'sales_tax',\n            'cuisine_type',\n            'zipcode',\n            'street_address',\n            'city',\n            'state',\n            'tags',\n            'delivery_method'\n        ]);\n\n        const request =\n            mode === 'add'\n                ? createRestaurant({ body })\n                : updateRestaurant({ body: { ...body, id } });\n\n        return request.promise;\n    }\n\n    @autobind\n    onActionAndCloseCLick(event) {\n        const { toggleRestaurantsModal, reset } = this.props;\n        event.preventDefault();\n        event.stopPropagation();\n        this.requestAction()\n            .then(reset)\n            .then(() => toggleRestaurantsModal(false));\n    }\n\n    @autobind\n    onActionAndAddAnotherCLick(event) {\n        const { reset, setMode } = this.props;\n        event.preventDefault();\n        event.stopPropagation();\n        this.requestAction()\n            .then(reset)\n            .then(() => setMode({ mode: 'add' }));\n    }\n\n    @autobind\n    onClose() {\n        const { reset, toggleRestaurantsModal, clearModalData } = this.props;\n        reset();\n        toggleRestaurantsModal(false);\n        clearModalData();\n    }\n\n    @autobind\n    onChangeAgent({ agent_name = '' }) {\n        const { change } = this.props;\n        change('agent_name', agent_name);\n    }\n\n    @autobind\n    onChangeCuisine(selectedOption) {\n        const { change } = this.props;\n        change('cuisine_type', selectedOption.value);\n    }\n\n    @autobind\n    onChangeZipCode({ value = '', city, state }) {\n        const { change } = this.props;\n        change('zipcode', value);\n        change('city', city);\n        change('state', state);\n    }\n\n    render() {\n        const {\n            restaurantModal: { open, loading },\n            dictionary,\n            agent_name,\n            cuisine_type,\n            zipcode\n        } = this.props;\n\n        return (\n            <Dialog\n                open={open}\n                onEntered={this.onEntered}\n                onClose={this.onClose}\n                fullWidth={true}\n                maxWidth={'md'}\n                className={'restaurant-modal'}\n            >\n                <form className={'restaurant__form'}>\n                    {loading && <AppPreloaderSmall />}\n                    <DialogTitle>{this.getDialogTitle()}</DialogTitle>\n\n                    <DialogContent>\n                        <div className='restaurant-modal__content'>\n                            <div className='restaurant-modal__content-left'>\n                                <AgentsAutoComplete\n                                    value={agent_name}\n                                    onChange={this.onChangeAgent}\n                                />\n                                <Field\n                                    name='restaurant_name'\n                                    required\n                                    type={'text'}\n                                    label={'Restaurant Name'}\n                                    component={AppFormTextField}\n                                />\n                                <Field\n                                    name='manager_name'\n                                    required\n                                    type={'text'}\n                                    label={\"Restaurant Manager's Name\"}\n                                    component={AppFormTextField}\n                                />\n                                <Field\n                                    name='manager_email'\n                                    required\n                                    type={'text'}\n                                    label={\"Restaurant Manager's Email\"}\n                                    component={AppFormTextField}\n                                />\n                                <Field\n                                    name='delivery_email'\n                                    type={'text'}\n                                    label={'Restaurant Delivery Email'}\n                                    component={AppFormTextField}\n                                />\n\n                                <CuisineAutoComplete\n                                    value={cuisine_type}\n                                    compareKey={'value'}\n                                    onChange={this.onChangeCuisine}\n                                />\n\n                                <Field\n                                    name='phone_number'\n                                    label={'Phone number'}\n                                    mask={PHONE_MASK}\n                                    component={AppFormMaskTextField}\n                                />\n                                <Field\n                                    className={'restaurant-modal__field'}\n                                    name='sales_tax'\n                                    type={'text'}\n                                    label={'Sales Tax'}\n                                    component={AppFormTextField}\n                                />\n                            </div>\n                            <div className='restaurant-modal__content-right'>\n                                <Field\n                                    name='delivery_method'\n                                    required\n                                    options={dictionary.delivery_method || []}\n                                    label={'Select delivery method'}\n                                    component={AppFormSelect}\n                                />\n                                <Field\n                                    name='subscription'\n                                    required\n                                    options={dictionary.subscriptions}\n                                    label={'Select subscription'}\n                                    component={AppFormSelect}\n                                />\n                                <Field\n                                    name='street_address'\n                                    required\n                                    type={'text'}\n                                    multiline\n                                    label={'Enter street address'}\n                                    component={AppFormTextField}\n                                />\n\n                                <ZipCodeAutoComplete\n                                    value={zipcode}\n                                    compareKey={'value'}\n                                    onChange={this.onChangeZipCode}\n                                />\n\n                                <Field\n                                    name='city'\n                                    required\n                                    type={'text'}\n                                    multiline\n                                    label={'Enter city'}\n                                    component={AppFormTextField}\n                                />\n                                <Field\n                                    name='state'\n                                    required\n                                    type={'text'}\n                                    multiline\n                                    label={'Enter state'}\n                                    component={AppFormTextField}\n                                />\n                                <Field\n                                    name='tags'\n                                    type={'text'}\n                                    multiline\n                                    rows={2}\n                                    label={\n                                        'Add keywords like your best dishes and services'\n                                    }\n                                    component={AppFormTextField}\n                                />\n                            </div>\n                        </div>\n                    </DialogContent>\n\n                    <Divider className={'restaurant-modal__divider'} />\n                    <DialogActions className={'restaurant-modal__actions'}>\n                        {this.getModalAction()}\n                    </DialogActions>\n                </form>\n            </Dialog>\n        );\n    }\n}\n\nRestaurantModal.propTypes = {\n    open: PropTypes.bool,\n    actions: PropTypes.any,\n    onClose: PropTypes.func\n};\nRestaurantModal.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}