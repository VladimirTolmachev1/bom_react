{"ast":null,"code":"var _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/FormSelect/FormSelect.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormHelperText } from '@material-ui/core';\nimport { AppSelect } from '..';\nexport var FormSelect = function FormSelect(_ref) {\n  var input = _ref.input,\n      withoutNone = _ref.withoutNone,\n      fullWidth = _ref.fullWidth,\n      label = _ref.label,\n      required = _ref.required,\n      outlined = _ref.outlined,\n      options = _ref.options,\n      _ref$meta = _ref.meta,\n      touched = _ref$meta.touched,\n      error = _ref$meta.error;\n  return React.createElement(FormControl, {\n    required: required,\n    fullWidth: fullWidth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(AppSelect, Object.assign({\n    value: input.value,\n    className: \"app-form-control\",\n    outlined: outlined\n  }, {\n    label: label,\n    options: options,\n    required: required,\n    withoutNone: withoutNone\n  }, {\n    error: Boolean(touched && error)\n  }, input, {\n    onChange: function onChange(data) {\n      return input.onChange(data[input.name]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  })), touched && error ? React.createElement(FormHelperText, {\n    className: \"app-form-control__error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, error) : false);\n};\nFormSelect.propTypes = {\n  input: PropTypes.shape({\n    value: PropTypes.string\n  }),\n  meta: PropTypes.shape({\n    touched: PropTypes.bool,\n    error: PropTypes.string\n  }).isRequired,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })),\n  withoutNone: PropTypes.bool,\n  label: PropTypes.string.isRequired\n};\nAppSelect.defaultProps = {\n  options: []\n};\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(FormSelect, \"FormSelect\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/FormSelect/FormSelect.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/FormSelect/FormSelect.js"],"names":["React","PropTypes","FormControl","FormHelperText","AppSelect","FormSelect","input","withoutNone","fullWidth","label","required","outlined","options","meta","touched","error","value","Boolean","data","onChange","name","propTypes","shape","string","bool","isRequired","arrayOf","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,mBAA5C;AACA,SAASC,SAAT,QAA0B,IAA1B;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,OASpB;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,WAOI,QAPJA,WAOI;AAAA,MANJC,SAMI,QANJA,SAMI;AAAA,MALJC,KAKI,QALJA,KAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,uBADJC,IACI;AAAA,MADIC,OACJ,aADIA,OACJ;AAAA,MADaC,KACb,aADaA,KACb;AACJ,SACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEL,QAAvB;AAAiC,IAAA,SAAS,EAAEF,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEF,KAAK,CAACU,KADf;AAEE,IAAA,SAAS,EAAC,kBAFZ;AAGE,IAAA,QAAQ,EAAEL;AAHZ,KAIM;AACFF,IAAAA,KAAK,EAALA,KADE;AAEFG,IAAAA,OAAO,EAAPA,OAFE;AAGFF,IAAAA,QAAQ,EAARA,QAHE;AAIFH,IAAAA,WAAW,EAAXA;AAJE,GAJN;AAUE,IAAA,KAAK,EAAEU,OAAO,CAACH,OAAO,IAAIC,KAAZ;AAVhB,KAWMT,KAXN;AAYE,IAAA,QAAQ,EAAE,kBAAAY,IAAI;AAAA,aAAIZ,KAAK,CAACa,QAAN,CAAeD,IAAI,CAACZ,KAAK,CAACc,IAAP,CAAnB,CAAJ;AAAA,KAZhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAeGN,OAAO,IAAIC,KAAX,GACC,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,yBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KADH,CADD,GAKC,KApBJ,CADF;AAyBD,CAnCM;AAqCPV,UAAU,CAACgB,SAAX,GAAuB;AACrBf,EAAAA,KAAK,EAAEL,SAAS,CAACqB,KAAV,CAAgB;AACrBN,IAAAA,KAAK,EAAEf,SAAS,CAACsB;AADI,GAAhB,CADc;AAIrBV,EAAAA,IAAI,EAAEZ,SAAS,CAACqB,KAAV,CAAgB;AACpBR,IAAAA,OAAO,EAAEb,SAAS,CAACuB,IADC;AAEpBT,IAAAA,KAAK,EAAEd,SAAS,CAACsB;AAFG,GAAhB,EAGHE,UAPkB;AASrBb,EAAAA,OAAO,EAAEX,SAAS,CAACyB,OAAV,CACPzB,SAAS,CAACqB,KAAV,CAAgB;AACdF,IAAAA,IAAI,EAAEnB,SAAS,CAACsB,MAAV,CAAiBE,UADT;AAEdT,IAAAA,KAAK,EAAEf,SAAS,CAACsB,MAAV,CAAiBE;AAFV,GAAhB,CADO,CATY;AAerBlB,EAAAA,WAAW,EAAEN,SAAS,CAACuB,IAfF;AAgBrBf,EAAAA,KAAK,EAAER,SAAS,CAACsB,MAAV,CAAiBE;AAhBH,CAAvB;AAmBArB,SAAS,CAACuB,YAAV,GAAyB;AACvBf,EAAAA,OAAO,EAAE;AADc,CAAzB;;;;;;;;;;0BAxDaP,U","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormHelperText } from '@material-ui/core';\nimport { AppSelect } from '..';\n\nexport const FormSelect = ({\n  input,\n  withoutNone,\n  fullWidth,\n  label,\n  required,\n  outlined,\n  options,\n  meta: { touched, error },\n}) => {\n  return (\n    <FormControl required={required} fullWidth={fullWidth}>\n      <AppSelect\n        value={input.value}\n        className=\"app-form-control\"\n        outlined={outlined}\n        {...{\n          label,\n          options,\n          required,\n          withoutNone,\n        }}\n        error={Boolean(touched && error)}\n        {...input}\n        onChange={data => input.onChange(data[input.name])}\n      />\n      {touched && error ? (\n        <FormHelperText className=\"app-form-control__error\">\n          {error}\n        </FormHelperText>\n      ) : (\n        false\n      )}\n    </FormControl>\n  );\n};\n\nFormSelect.propTypes = {\n  input: PropTypes.shape({\n    value: PropTypes.string,\n  }),\n  meta: PropTypes.shape({\n    touched: PropTypes.bool,\n    error: PropTypes.string,\n  }).isRequired,\n\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired,\n    }),\n  ),\n  withoutNone: PropTypes.bool,\n  label: PropTypes.string.isRequired,\n};\n\nAppSelect.defaultProps = {\n  options: [],\n};\n"]},"metadata":{},"sourceType":"module"}