{"ast":null,"code":"import _defineProperty from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { ReduxCrudService } from '/services';\nimport { API_REQUESTS_ABORT } from '/modules/core.modules';\nexport var resource = '/category';\n\nvar _ReduxCrudService$get = ReduxCrudService.getActionCrudTypes(resource),\n    _ReduxCrudService$get2 = _slicedToArray(_ReduxCrudService$get.GET, 3),\n    GET_CATEGORY_LIST_REQUEST = _ReduxCrudService$get2[0],\n    GET_CATEGORY_LIST_SUCCESS = _ReduxCrudService$get2[1],\n    GET_CATEGORY_LIST_ERROR = _ReduxCrudService$get2[2],\n    _ReduxCrudService$get3 = _slicedToArray(_ReduxCrudService$get.POST, 3),\n    CREATE_CATEGORY_REQUEST = _ReduxCrudService$get3[0],\n    CREATE_CATEGORY_SUCCESS = _ReduxCrudService$get3[1],\n    CREATE_CATEGORY_ERROR = _ReduxCrudService$get3[2],\n    _ReduxCrudService$get4 = _slicedToArray(_ReduxCrudService$get.GET_BY_ID, 3),\n    GET_CATEGORY_BY_ID_REQUEST = _ReduxCrudService$get4[0],\n    GET_CATEGORY_BY_ID_SUCCESS = _ReduxCrudService$get4[1],\n    GET_CATEGORY_BY_ID_ERROR = _ReduxCrudService$get4[2],\n    _ReduxCrudService$get5 = _slicedToArray(_ReduxCrudService$get.PATCH, 3),\n    UPDATE_CATEGORY_REQUEST = _ReduxCrudService$get5[0],\n    UPDATE_CATEGORY_SUCCESS = _ReduxCrudService$get5[1],\n    UPDATE_CATEGORY_ERROR = _ReduxCrudService$get5[2],\n    _ReduxCrudService$get6 = _slicedToArray(_ReduxCrudService$get.DELETE, 3),\n    DELETE_CATEGORY_REQUEST = _ReduxCrudService$get6[0],\n    DELETE_CATEGORY_SUCCESS = _ReduxCrudService$get6[1],\n    DELETE_CATEGORY_ERROR = _ReduxCrudService$get6[2];\n\nexport { GET_CATEGORY_LIST_REQUEST, GET_CATEGORY_LIST_SUCCESS, GET_CATEGORY_LIST_ERROR, CREATE_CATEGORY_REQUEST, CREATE_CATEGORY_SUCCESS, CREATE_CATEGORY_ERROR, GET_CATEGORY_BY_ID_REQUEST, GET_CATEGORY_BY_ID_SUCCESS, GET_CATEGORY_BY_ID_ERROR, UPDATE_CATEGORY_REQUEST, UPDATE_CATEGORY_SUCCESS, UPDATE_CATEGORY_ERROR, DELETE_CATEGORY_REQUEST, DELETE_CATEGORY_SUCCESS, DELETE_CATEGORY_ERROR };\nexport var SET_CATEGORY_FILTERS = \"\".concat(resource, \"/filters/changed\");\nexport var CLEANUP_CATEGORIES = \"\".concat(resource, \"/cleanup\");\n\nvar getInitialState = function getInitialState() {\n  return {\n    loading: false,\n    error: null,\n    filters: {\n      restaurant_id: ''\n    },\n    data: [],\n    count: 0\n  };\n};\n\nexport var reducer = _defineProperty({\n  name: resource\n}, resource, function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState();\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case GET_CATEGORY_LIST_REQUEST:\n    case DELETE_CATEGORY_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_CATEGORY_LIST_SUCCESS:\n      return _objectSpread({}, state, {\n        count: Number(action.response.count),\n        data: action.response.data,\n        loading: false\n      });\n\n    case GET_CATEGORY_LIST_ERROR:\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.error\n      });\n\n    case SET_CATEGORY_FILTERS:\n      return _objectSpread({}, state, {\n        filters: _objectSpread({}, state.filters, action.filters)\n      });\n\n    case DELETE_CATEGORY_SUCCESS:\n      return _objectSpread({}, state, {\n        data: state.data.filter(function (_ref) {\n          var id = _ref.id;\n          return id !== action.body.id;\n        })\n      });\n\n    case CLEANUP_CATEGORIES:\n      {\n        return getInitialState();\n      }\n\n    case DELETE_CATEGORY_ERROR:\n    case UPDATE_CATEGORY_ERROR:\n      {\n        return _objectSpread({}, state, {\n          loading: false\n        });\n      }\n\n    default:\n      return state;\n  }\n});\nexport var getCategories = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET'\n});\nexport var getCategoryById = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET',\n  byId: true\n});\nexport var createCategory = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'POST',\n  logger: {\n    success: 'Category was successful created',\n    error: 'Error during category creation'\n  }\n});\nexport var updateCategory = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'PATCH',\n  logger: {\n    success: 'Category was successful updated',\n    error: 'Error during category update'\n  }\n});\nexport var deleteCategory = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'DELETE',\n  logger: {\n    success: 'Category was successful deleted',\n    error: 'Error during category delete'\n  }\n});\nexport function updateCategoryFilters(filters) {\n  return {\n    type: SET_CATEGORY_FILTERS,\n    filters: filters\n  };\n}\nexport function cleanupCategories() {\n  return {\n    type: CLEANUP_CATEGORIES\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [GET_CATEGORY_LIST_REQUEST, CREATE_CATEGORY_REQUEST, GET_CATEGORY_BY_ID_REQUEST, UPDATE_CATEGORY_REQUEST]\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(resource, \"resource\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(GET_CATEGORY_LIST_REQUEST, \"GET_CATEGORY_LIST_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(GET_CATEGORY_LIST_SUCCESS, \"GET_CATEGORY_LIST_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(GET_CATEGORY_LIST_ERROR, \"GET_CATEGORY_LIST_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(CREATE_CATEGORY_REQUEST, \"CREATE_CATEGORY_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(CREATE_CATEGORY_SUCCESS, \"CREATE_CATEGORY_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(CREATE_CATEGORY_ERROR, \"CREATE_CATEGORY_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(GET_CATEGORY_BY_ID_REQUEST, \"GET_CATEGORY_BY_ID_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(GET_CATEGORY_BY_ID_SUCCESS, \"GET_CATEGORY_BY_ID_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(GET_CATEGORY_BY_ID_ERROR, \"GET_CATEGORY_BY_ID_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(UPDATE_CATEGORY_REQUEST, \"UPDATE_CATEGORY_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(UPDATE_CATEGORY_SUCCESS, \"UPDATE_CATEGORY_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(UPDATE_CATEGORY_ERROR, \"UPDATE_CATEGORY_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(DELETE_CATEGORY_REQUEST, \"DELETE_CATEGORY_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(DELETE_CATEGORY_SUCCESS, \"DELETE_CATEGORY_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(DELETE_CATEGORY_ERROR, \"DELETE_CATEGORY_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(SET_CATEGORY_FILTERS, \"SET_CATEGORY_FILTERS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(CLEANUP_CATEGORIES, \"CLEANUP_CATEGORIES\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(getInitialState, \"getInitialState\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(getCategories, \"getCategories\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(getCategoryById, \"getCategoryById\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(createCategory, \"createCategory\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(updateCategory, \"updateCategory\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(deleteCategory, \"deleteCategory\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(updateCategoryFilters, \"updateCategoryFilters\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(cleanupCategories, \"cleanupCategories\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.categories.modules.js"],"names":["ReduxCrudService","API_REQUESTS_ABORT","resource","getActionCrudTypes","GET","GET_CATEGORY_LIST_REQUEST","GET_CATEGORY_LIST_SUCCESS","GET_CATEGORY_LIST_ERROR","POST","CREATE_CATEGORY_REQUEST","CREATE_CATEGORY_SUCCESS","CREATE_CATEGORY_ERROR","GET_BY_ID","GET_CATEGORY_BY_ID_REQUEST","GET_CATEGORY_BY_ID_SUCCESS","GET_CATEGORY_BY_ID_ERROR","PATCH","UPDATE_CATEGORY_REQUEST","UPDATE_CATEGORY_SUCCESS","UPDATE_CATEGORY_ERROR","DELETE","DELETE_CATEGORY_REQUEST","DELETE_CATEGORY_SUCCESS","DELETE_CATEGORY_ERROR","SET_CATEGORY_FILTERS","CLEANUP_CATEGORIES","getInitialState","loading","error","filters","restaurant_id","data","count","reducer","name","state","action","type","Number","response","filter","id","body","getCategories","resourceAction","method","getCategoryById","byId","createCategory","logger","success","updateCategory","deleteCategory","updateCategoryFilters","cleanupCategories","abortPageRequests","requestTypes"],"mappings":"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","sourcesContent":["import { ReduxCrudService } from '/services';\nimport { API_REQUESTS_ABORT } from '/modules/core.modules';\n\nexport const resource = '/category';\n\nexport const {\n    GET: [\n        GET_CATEGORY_LIST_REQUEST,\n        GET_CATEGORY_LIST_SUCCESS,\n        GET_CATEGORY_LIST_ERROR\n    ],\n    POST: [\n        CREATE_CATEGORY_REQUEST,\n        CREATE_CATEGORY_SUCCESS,\n        CREATE_CATEGORY_ERROR\n    ],\n    GET_BY_ID: [\n        GET_CATEGORY_BY_ID_REQUEST,\n        GET_CATEGORY_BY_ID_SUCCESS,\n        GET_CATEGORY_BY_ID_ERROR\n    ],\n    PATCH: [\n        UPDATE_CATEGORY_REQUEST,\n        UPDATE_CATEGORY_SUCCESS,\n        UPDATE_CATEGORY_ERROR\n    ],\n    DELETE: [\n        DELETE_CATEGORY_REQUEST,\n        DELETE_CATEGORY_SUCCESS,\n        DELETE_CATEGORY_ERROR\n    ]\n} = ReduxCrudService.getActionCrudTypes(resource);\n\nexport const SET_CATEGORY_FILTERS = `${resource}/filters/changed`;\n\nexport const CLEANUP_CATEGORIES= `${resource}/cleanup`;\n\nconst getInitialState = () => ({\n    loading: false,\n    error: null,\n    filters: {\n        restaurant_id: '',\n    },\n    data: [],\n    count: 0\n});\n\nexport const reducer = {\n    name: resource,\n    [resource]: function(state = getInitialState(), action = {}) {\n        switch (action.type) {\n            case GET_CATEGORY_LIST_REQUEST:\n            case DELETE_CATEGORY_REQUEST:\n                return {\n                    ...state,\n                    loading: true\n                };\n            case GET_CATEGORY_LIST_SUCCESS:\n                return {\n                    ...state,\n                    count: Number(action.response.count),\n                    data: action.response.data,\n                    loading: false\n                };\n            case GET_CATEGORY_LIST_ERROR:\n                return {\n                    ...state,\n                    loading: false,\n                    error: action.error\n                };\n            case SET_CATEGORY_FILTERS:\n                return {\n                    ...state,\n                    filters: {\n                        ...state.filters,\n                        ...action.filters\n                    }\n                };\n\n            case DELETE_CATEGORY_SUCCESS:\n                return {\n                    ...state,\n                    data: state.data.filter( ({ id }) => id !== action.body.id )\n                }\n\n            case CLEANUP_CATEGORIES: {\n                return getInitialState();\n            }\n            case DELETE_CATEGORY_ERROR:\n            case UPDATE_CATEGORY_ERROR: {\n                return {\n                    ...state,\n                    loading: false\n                }\n            }\n            default:\n                return state;\n        }\n    }\n};\n\nexport const getCategories = ReduxCrudService.resourceAction({\n    resource,\n    method: 'GET'\n});\n\nexport const getCategoryById = ReduxCrudService.resourceAction({\n    resource,\n    method: 'GET',\n    byId: true\n});\n\nexport const createCategory = ReduxCrudService.resourceAction({\n    resource,\n    method: 'POST',\n    logger: {\n        success: 'Category was successful created',\n        error: 'Error during category creation'\n    }\n});\nexport const updateCategory = ReduxCrudService.resourceAction({\n    resource,\n    method: 'PATCH',\n    logger: {\n        success: 'Category was successful updated',\n        error: 'Error during category update'\n    }\n});\n\nexport const deleteCategory = ReduxCrudService.resourceAction({\n    resource,\n    method: 'DELETE',\n    logger: {\n        success: 'Category was successful deleted',\n        error: 'Error during category delete'\n    }\n});\n\nexport function updateCategoryFilters(filters) {\n    return {\n        type: SET_CATEGORY_FILTERS,\n        filters\n    }\n}\n\n\nexport function cleanupCategories() {\n    return {\n        type: CLEANUP_CATEGORIES\n    }\n}\n\nexport function abortPageRequests() {\n    return {\n        type: API_REQUESTS_ABORT,\n        requestTypes: [\n            GET_CATEGORY_LIST_REQUEST,\n            CREATE_CATEGORY_REQUEST,\n            GET_CATEGORY_BY_ID_REQUEST,\n            UPDATE_CATEGORY_REQUEST\n        ]\n    };\n}\n"]},"metadata":{},"sourceType":"module"}