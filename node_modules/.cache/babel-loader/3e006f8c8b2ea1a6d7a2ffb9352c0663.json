{"ast":null,"code":"import _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _dec,\n    _dec2,\n    _class,\n    _class2,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ResetPassword/ResetPassword.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport { autobind } from 'core-decorators';\nimport { resetPassword, abortPageRequests, resetPasswordLoadingSelector, signOut } from '/modules';\nimport { AppCleanHOC, AppPreloaderSmall, AppFormTextField } from '/components/';\nimport { resetPasswordValidation } from './modules';\nvar formFieldsSelector = formValueSelector('ResetPassword');\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    loading: resetPasswordLoadingSelector(state),\n    email: formFieldsSelector(state, 'email'),\n    password: formFieldsSelector(state, 'password'),\n    password_confirmation: formFieldsSelector(state, 'password_confirmation'),\n    token: props.location.pathname.split('/')[3]\n  };\n};\n\nvar mapDispatchToProps = {\n  signOut: signOut,\n  resetPassword: resetPassword,\n  abortPageRequests: abortPageRequests\n};\nvar ResetPassword = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec2 = reduxForm({\n  form: 'ResetPassword',\n  validate: resetPasswordValidation\n}), _dec(_class = _dec2(_class = AppCleanHOC(_class = (_class2 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResetPassword, _Component);\n\n  function ResetPassword() {\n    _classCallCheck(this, ResetPassword);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ResetPassword).apply(this, arguments));\n  }\n\n  _createClass(ResetPassword, [{\n    key: \"onSubmit\",\n    //todo put this logic in middleware\n    value: function onSubmit(event) {\n      var _this = this;\n\n      event.preventDefault();\n      event.stopPropagation();\n      var _this$props = this.props,\n          resetPassword = _this$props.resetPassword,\n          email = _this$props.email,\n          password = _this$props.password,\n          password_confirmation = _this$props.password_confirmation,\n          token = _this$props.token;\n      var request = resetPassword({\n        email: email,\n        password: password,\n        password_confirmation: password_confirmation,\n        token: token\n      });\n      request.promise.then(function () {\n        _this.props.history.push('/sign-in');\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var signOut = this.props.signOut;\n      signOut();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          loading = _this$props2.loading,\n          invalid = _this$props2.invalid;\n      return React.createElement(\"div\", {\n        className: 'app-static-container auth',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: 'auth__title',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Please, fill the form\"), React.createElement(\"form\", {\n        className: 'auth__form',\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, loading && React.createElement(AppPreloaderSmall, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Field, {\n        className: 'auth__field',\n        name: \"email\",\n        required: true,\n        type: 'text',\n        label: \"Email\",\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(Field, {\n        className: 'auth__field',\n        name: \"password\",\n        required: true,\n        type: 'password',\n        label: \"Password\",\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Field, {\n        className: 'auth__field',\n        name: \"password_confirmation\",\n        required: true,\n        type: 'password',\n        label: \"Password confirmation\",\n        component: AppFormTextField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        type: 'submit',\n        disabled: loading || invalid,\n        className: 'auth__button',\n        color: 'primary',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Reset password\")));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return ResetPassword;\n}(Component), (_applyDecoratedDescriptor(_class2.prototype, \"onSubmit\", [autobind], Object.getOwnPropertyDescriptor(_class2.prototype, \"onSubmit\"), _class2.prototype)), _class2)) || _class) || _class) || _class);\nexport { ResetPassword as default };\nResetPassword.propTypes = {\n  loading: PropTypes.bool,\n  invalid: PropTypes.bool\n};\nResetPassword.defaultProps = {}; // password/reset/a170829a59996305b0d389efe7d81bd054170e6d369c8ba667d826a12dc0111a\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(formFieldsSelector, \"formFieldsSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ResetPassword/ResetPassword.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ResetPassword/ResetPassword.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ResetPassword/ResetPassword.js\");\n  reactHotLoader.register(ResetPassword, \"ResetPassword\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ResetPassword/ResetPassword.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ResetPassword/ResetPassword.js"],"names":["React","Component","PropTypes","connect","Field","reduxForm","formValueSelector","Button","autobind","resetPassword","abortPageRequests","resetPasswordLoadingSelector","signOut","AppCleanHOC","AppPreloaderSmall","AppFormTextField","resetPasswordValidation","formFieldsSelector","mapStateToProps","state","props","loading","email","password","password_confirmation","token","location","pathname","split","mapDispatchToProps","ResetPassword","form","validate","event","preventDefault","stopPropagation","request","promise","then","history","push","invalid","onSubmit","propTypes","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport { autobind } from 'core-decorators';\nimport { resetPassword, abortPageRequests, resetPasswordLoadingSelector, signOut } from '/modules';\nimport { AppCleanHOC, AppPreloaderSmall, AppFormTextField } from '/components/';\nimport { resetPasswordValidation } from './modules';\n\nconst formFieldsSelector = formValueSelector('ResetPassword');\n\nconst mapStateToProps = (state, props) => ({\n    loading: resetPasswordLoadingSelector(state),\n    email: formFieldsSelector(state, 'email'),\n    password: formFieldsSelector(state, 'password'),\n    password_confirmation: formFieldsSelector(state, 'password_confirmation'),\n    token: props.location.pathname.split('/')[3]\n});\n\nconst mapDispatchToProps = {\n    signOut,\n    resetPassword,\n    abortPageRequests\n};\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n\n@reduxForm({\n    form: 'ResetPassword',\n    validate: resetPasswordValidation\n})\n@AppCleanHOC\nclass ResetPassword extends Component {\n\n    //todo put this logic in middleware\n    @autobind\n    onSubmit(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const {resetPassword, email, password, password_confirmation, token} = this.props;\n        const request = resetPassword({email, password, password_confirmation, token});\n        request.promise\n            .then(() => {\n                this.props.history.push('/sign-in');\n            })\n    }\n\n    componentDidMount() {\n        const {signOut} = this.props;\n        signOut();\n    }\n\n    render() {\n        const {loading, invalid} = this.props;\n\n        return (\n            <div className={ 'app-static-container auth' }>\n                <h2 className={ 'auth__title' }>Please, fill the form</h2>\n                <form className={ 'auth__form' } onSubmit={ this.onSubmit }>\n                    { loading && <AppPreloaderSmall/> }\n                    <Field\n                        className={ 'auth__field' }\n                        name=\"email\"\n                        required\n                        type={ 'text' }\n                        label={ \"Email\" }\n                        component={ AppFormTextField }/>\n                    <Field\n                        className={ 'auth__field' }\n                        name=\"password\"\n                        required\n                        type={ 'password' }\n                        label={ \"Password\" }\n                        component={ AppFormTextField }/>\n                    <Field\n                        className={ 'auth__field' }\n                        name=\"password_confirmation\"\n                        required\n                        type={ 'password' }\n                        label={ \"Password confirmation\" }\n                        component={ AppFormTextField }/>\n                    <Button variant=\"contained\"\n                            type={ 'submit' }\n                            disabled={ loading || invalid }\n                            className={ 'auth__button' }\n                            color={ 'primary' }>\n                        Reset password\n                    </Button>\n                </form>\n            </div>\n        );\n    }\n}\n\nResetPassword.propTypes = {\n    loading: PropTypes.bool,\n    invalid: PropTypes.bool\n};\nResetPassword.defaultProps = {};\n\n// password/reset/a170829a59996305b0d389efe7d81bd054170e6d369c8ba667d826a12dc0111a\n"]},"metadata":{},"sourceType":"module"}