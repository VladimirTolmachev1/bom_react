{"ast":null,"code":"(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { API_REQUESTS_ABORT, setThemeColor } from '/modules';\nimport { CALL_API } from 'store/middleware/api';\nimport { ReduxCrudService } from '/services';\nimport { resource, PUBLISH_DISH_REQUEST, PUBLISH_DISH_SUCCESS, PUBLISH_DISH_ERROR, UNPUBLISH_DISH_REQUEST, UNPUBLISH_DISH_SUCCESS, UNPUBLISH_DISH_ERROR, SET_DISH_FILTERS, SET_DISH_PAGE, CLEANUP_DISH, GET_DISH_LIST_REQUEST, CREATE_DISH_REQUEST, GET_DISH_BY_ID_REQUEST, UPDATE_DISH_REQUEST, ADD_DISH_IN_ORDER, REMOVE_DISH_FROM_ORDER, SET_DISH_EXTRA_IN_ORDER, REMOVE_DISH_EXTRA_IN_ORDER, SET_DISH_SIZE_IN_ORDER } from '.';\nexport var getDishes = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET'\n});\nexport var getDishById = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET',\n  byId: true\n});\nexport var createDish = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'POST',\n  contentType: 'multipart/form-data',\n  logger: {\n    success: 'Dish was successful created/updated',\n    error: 'Error during dish creation/updated'\n  }\n});\nexport var updateDish = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'PATCH',\n  logger: {\n    success: 'Dish was successful updated',\n    error: 'Error during dish update'\n  }\n});\nexport var removeDish = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'DELETE',\n  logger: {\n    success: 'Dish was successful deleted',\n    error: 'Error during dish delete'\n  }\n});\nexport function publishDishes(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: \"\".concat(resource, \"/publish\"),\n      method: 'POST',\n      logger: {\n        success: 'Publishing was success',\n        error: 'Error during publishing'\n      },\n      types: [PUBLISH_DISH_REQUEST, PUBLISH_DISH_SUCCESS, PUBLISH_DISH_ERROR],\n      body: body\n    }\n  };\n}\nexport function unpublishDishes(body) {\n  return {\n    type: CALL_API,\n    request: {\n      endpoint: \"\".concat(resource, \"/unpublish\"),\n      method: 'POST',\n      logger: {\n        success: 'Unpublishing was success',\n        error: 'Error during Unpublishing'\n      },\n      types: [UNPUBLISH_DISH_REQUEST, UNPUBLISH_DISH_SUCCESS, UNPUBLISH_DISH_ERROR],\n      body: body\n    }\n  };\n}\nexport function updateDishFilters(filters) {\n  return {\n    type: SET_DISH_FILTERS,\n    filters: filters\n  };\n}\nexport function setDishPage(page) {\n  return {\n    type: SET_DISH_PAGE,\n    page: page\n  };\n}\nexport function cleanupDish() {\n  return {\n    type: CLEANUP_DISH\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [GET_DISH_LIST_REQUEST, CREATE_DISH_REQUEST, GET_DISH_BY_ID_REQUEST, UPDATE_DISH_REQUEST]\n  };\n} //Dish order\n\nexport function addDishInOrder(id) {\n  return {\n    type: ADD_DISH_IN_ORDER,\n    id: id\n  };\n}\nexport function removeDishFromOrder(id) {\n  return {\n    type: REMOVE_DISH_FROM_ORDER,\n    id: id\n  };\n}\nexport function setDishExtra(_ref) {\n  var dishUUID = _ref.dishUUID,\n      extraId = _ref.extraId;\n  return {\n    type: SET_DISH_EXTRA_IN_ORDER,\n    dishUUID: dishUUID,\n    extraId: extraId\n  };\n}\nexport function removeDishExtra(_ref2) {\n  var dishUUID = _ref2.dishUUID,\n      extraId = _ref2.extraId;\n  return {\n    type: REMOVE_DISH_EXTRA_IN_ORDER,\n    dishUUID: dishUUID,\n    extraId: extraId\n  };\n}\nexport function setDishSize(_ref3) {\n  var dishUUID = _ref3.dishUUID,\n      sizeId = _ref3.sizeId;\n  return {\n    type: SET_DISH_SIZE_IN_ORDER,\n    dishUUID: dishUUID,\n    sizeId: sizeId\n  };\n}\nexport function onRestaurantLoaded(response) {\n  var _response$page_info = response.page_info,\n      menu_navigation_color = _response$page_info.menu_navigation_color,\n      menu_background_color = _response$page_info.menu_background_color;\n  return setThemeColor(menu_navigation_color, menu_background_color);\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getDishes, \"getDishes\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(getDishById, \"getDishById\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(createDish, \"createDish\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(updateDish, \"updateDish\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(removeDish, \"removeDish\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(publishDishes, \"publishDishes\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(unpublishDishes, \"unpublishDishes\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(updateDishFilters, \"updateDishFilters\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(setDishPage, \"setDishPage\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(cleanupDish, \"cleanupDish\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(addDishInOrder, \"addDishInOrder\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(removeDishFromOrder, \"removeDishFromOrder\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(setDishExtra, \"setDishExtra\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(removeDishExtra, \"removeDishExtra\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(setDishSize, \"setDishSize\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  reactHotLoader.register(onRestaurantLoaded, \"onRestaurantLoaded\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/Menu/modules/menu.dishes.actions.js"],"names":["API_REQUESTS_ABORT","setThemeColor","CALL_API","ReduxCrudService","resource","PUBLISH_DISH_REQUEST","PUBLISH_DISH_SUCCESS","PUBLISH_DISH_ERROR","UNPUBLISH_DISH_REQUEST","UNPUBLISH_DISH_SUCCESS","UNPUBLISH_DISH_ERROR","SET_DISH_FILTERS","SET_DISH_PAGE","CLEANUP_DISH","GET_DISH_LIST_REQUEST","CREATE_DISH_REQUEST","GET_DISH_BY_ID_REQUEST","UPDATE_DISH_REQUEST","ADD_DISH_IN_ORDER","REMOVE_DISH_FROM_ORDER","SET_DISH_EXTRA_IN_ORDER","REMOVE_DISH_EXTRA_IN_ORDER","SET_DISH_SIZE_IN_ORDER","getDishes","resourceAction","method","getDishById","byId","createDish","contentType","logger","success","error","updateDish","removeDish","publishDishes","body","type","request","endpoint","types","unpublishDishes","updateDishFilters","filters","setDishPage","page","cleanupDish","abortPageRequests","requestTypes","addDishInOrder","id","removeDishFromOrder","setDishExtra","dishUUID","extraId","removeDishExtra","setDishSize","sizeId","onRestaurantLoaded","response","page_info","menu_navigation_color","menu_background_color"],"mappings":"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","sourcesContent":["import { API_REQUESTS_ABORT, setThemeColor } from '/modules';\nimport { CALL_API } from 'store/middleware/api';\nimport { ReduxCrudService } from '/services';\nimport {\n    resource,\n    PUBLISH_DISH_REQUEST,\n    PUBLISH_DISH_SUCCESS,\n    PUBLISH_DISH_ERROR,\n    UNPUBLISH_DISH_REQUEST,\n    UNPUBLISH_DISH_SUCCESS,\n    UNPUBLISH_DISH_ERROR,\n    SET_DISH_FILTERS,\n    SET_DISH_PAGE,\n    CLEANUP_DISH,\n    GET_DISH_LIST_REQUEST,\n    CREATE_DISH_REQUEST,\n    GET_DISH_BY_ID_REQUEST,\n    UPDATE_DISH_REQUEST,\n    ADD_DISH_IN_ORDER,\n    REMOVE_DISH_FROM_ORDER,\n    SET_DISH_EXTRA_IN_ORDER,\n    REMOVE_DISH_EXTRA_IN_ORDER,\n    SET_DISH_SIZE_IN_ORDER\n} from '.';\n\nexport const getDishes = ReduxCrudService.resourceAction({\n    resource,\n    method: 'GET'\n});\n\nexport const getDishById = ReduxCrudService.resourceAction({\n    resource,\n    method: 'GET',\n    byId: true\n});\n\nexport const createDish = ReduxCrudService.resourceAction({\n    resource,\n    method: 'POST',\n    contentType: 'multipart/form-data',\n    logger: {\n        success: 'Dish was successful created/updated',\n        error: 'Error during dish creation/updated'\n    }\n});\nexport const updateDish = ReduxCrudService.resourceAction({\n    resource,\n    method: 'PATCH',\n    logger: {\n        success: 'Dish was successful updated',\n        error: 'Error during dish update'\n    }\n});\n\nexport const removeDish = ReduxCrudService.resourceAction({\n    resource,\n    method: 'DELETE',\n    logger: {\n        success: 'Dish was successful deleted',\n        error: 'Error during dish delete'\n    }\n});\n\nexport function publishDishes(body) {\n    return {\n        type: CALL_API,\n        request: {\n            endpoint: `${resource}/publish`,\n            method: 'POST',\n            logger: {\n                success: 'Publishing was success',\n                error: 'Error during publishing'\n            },\n            types: [\n                PUBLISH_DISH_REQUEST,\n                PUBLISH_DISH_SUCCESS,\n                PUBLISH_DISH_ERROR\n            ],\n            body\n        }\n    };\n}\n\nexport function unpublishDishes(body) {\n    return {\n        type: CALL_API,\n        request: {\n            endpoint: `${resource}/unpublish`,\n            method: 'POST',\n            logger: {\n                success: 'Unpublishing was success',\n                error: 'Error during Unpublishing'\n            },\n            types: [\n                UNPUBLISH_DISH_REQUEST,\n                UNPUBLISH_DISH_SUCCESS,\n                UNPUBLISH_DISH_ERROR\n            ],\n            body\n        }\n    };\n}\n\nexport function updateDishFilters(filters) {\n    return {\n        type: SET_DISH_FILTERS,\n        filters\n    };\n}\n\nexport function setDishPage(page) {\n    return {\n        type: SET_DISH_PAGE,\n        page\n    };\n}\n\nexport function cleanupDish() {\n    return {\n        type: CLEANUP_DISH\n    };\n}\n\nexport function abortPageRequests() {\n    return {\n        type: API_REQUESTS_ABORT,\n        requestTypes: [\n            GET_DISH_LIST_REQUEST,\n            CREATE_DISH_REQUEST,\n            GET_DISH_BY_ID_REQUEST,\n            UPDATE_DISH_REQUEST\n        ]\n    };\n}\n\n//Dish order\nexport function addDishInOrder(id) {\n    return {\n        type: ADD_DISH_IN_ORDER,\n        id\n    };\n}\n\nexport function removeDishFromOrder(id) {\n    return {\n        type: REMOVE_DISH_FROM_ORDER,\n        id\n    };\n}\n\nexport function setDishExtra({ dishUUID, extraId }) {\n    return {\n        type: SET_DISH_EXTRA_IN_ORDER,\n        dishUUID,\n        extraId\n    };\n}\n\nexport function removeDishExtra({ dishUUID, extraId }) {\n    return {\n        type: REMOVE_DISH_EXTRA_IN_ORDER,\n        dishUUID,\n        extraId\n    };\n}\n\nexport function setDishSize({ dishUUID, sizeId }) {\n    return {\n        type: SET_DISH_SIZE_IN_ORDER,\n        dishUUID,\n        sizeId\n    };\n}\n\nexport function onRestaurantLoaded(response) {\n    const { menu_navigation_color, menu_background_color } = response.page_info;\n    return setThemeColor(menu_navigation_color, menu_background_color);\n}\n"]},"metadata":{},"sourceType":"module"}