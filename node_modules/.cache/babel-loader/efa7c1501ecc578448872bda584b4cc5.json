{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { ValidationService } from '/services';\nexport var dishValidation = function dishValidation(values) {\n  var errors = {};\n\n  if (!values.name) {\n    errors.name = 'Required';\n  }\n\n  if (!values.price && (!values.sizes || values.sizes.length === 0)) {\n    errors.price = 'Required';\n  }\n\n  if (values.price && !ValidationService.number(values.price)) {\n    errors.price = 'Field must be numeric';\n  }\n\n  errors = _objectSpread({}, errors, validateDishFormFieldArray({\n    key: 'extra',\n    values: values\n  }), validateDishFormFieldArray({\n    key: 'sizes',\n    values: values\n  }));\n  return errors;\n};\n\nfunction validateDishFormFieldArray(_ref) {\n  var key = _ref.key,\n      values = _ref.values;\n  var errors = {};\n  errors[key] = [];\n\n  if (!values[key]) {\n    return errors;\n  }\n\n  values[key].forEach(function (size, index) {\n    errors[key][index] = {};\n\n    if (!size.name) {\n      errors[key][index].name = 'Required';\n    }\n\n    if (!size.price) {\n      errors[key][index].price = 'Required';\n    }\n\n    if (!ValidationService.number(size.price)) {\n      errors[key][index].price = 'Field must be numeric';\n    }\n  });\n  return errors;\n}\n\nexport function validateForButtons(values) {\n  var errors = dishValidation(values);\n\n  if (Object.keys(errors).length === 2 && errors.extra && errors.sizes && (errors.extra.length === 0 || errors.extra.every(function (extraItem) {\n    return !Object.keys(extraItem).length;\n  })) && (errors.sizes.length === 0 || errors.sizes.every(function (sizeItem) {\n    return !Object.keys(sizeItem).length;\n  }))) {\n    return true;\n  }\n\n  return false;\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(dishValidation, \"dishValidation\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/DishModal/modules/dish-modal-validations.js\");\n  reactHotLoader.register(validateDishFormFieldArray, \"validateDishFormFieldArray\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/DishModal/modules/dish-modal-validations.js\");\n  reactHotLoader.register(validateForButtons, \"validateForButtons\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/DishModal/modules/dish-modal-validations.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/DishModal/modules/dish-modal-validations.js"],"names":["ValidationService","dishValidation","values","errors","name","price","sizes","length","number","validateDishFormFieldArray","key","forEach","size","index","validateForButtons","Object","keys","extra","every","extraItem","sizeItem"],"mappings":"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","sourcesContent":["import {ValidationService} from '/services';\n\nexport const dishValidation = values => {\n    let errors = {};\n\n    if (!values.name) {\n        errors.name = 'Required';\n    }\n\n    if(!values.price && (!values.sizes || values.sizes.length === 0)) {\n        errors.price = 'Required';\n    }\n\n    if(values.price && !ValidationService.number(values.price)) {\n        errors.price = 'Field must be numeric';\n    }\n\n    errors = {\n        ...errors,\n        ...validateDishFormFieldArray({key: 'extra', values}),\n        ...validateDishFormFieldArray({key: 'sizes', values})\n    };\n\n    return errors;\n};\n\n\nfunction validateDishFormFieldArray({key, values}) {\n    const errors = {};\n\n    errors[key] = [];\n\n    if(!values[key]) {\n        return errors;\n    }\n\n    values[key].forEach((size, index) => {\n        errors[key][index] = {};\n        if(!size.name) {\n            errors[key][index].name = 'Required';\n        }\n\n        if(!size.price) {\n            errors[key][index].price = 'Required';\n        }\n\n        if(!ValidationService.number(size.price)) {\n            errors[key][index].price = 'Field must be numeric';\n        }\n    });\n\n    return errors;\n}\n\nexport function validateForButtons(values) {\n    const errors = dishValidation(values);\n\n    if(Object.keys(errors).length === 2\n        && errors.extra\n        && errors.sizes\n        && (errors.extra.length === 0 || errors.extra.every(extraItem => !Object.keys(extraItem).length))\n        && (errors.sizes.length === 0 || errors.sizes.every(sizeItem => !Object.keys(sizeItem).length))\n    ) {\n        return true;\n    }\n\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}