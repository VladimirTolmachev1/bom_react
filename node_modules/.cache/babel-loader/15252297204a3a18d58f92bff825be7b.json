{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { ReduxCrudService } from '/services';\nvar SET_STRIPE_CONNECTING_ERROR_MESSAGE = 'SET_STRIPE_CONNECTING_ERROR_MESSAGE';\nvar CONNECTING_TO_STRIPE_ERR_MSG = 'Some error has occured while connecting your restaurant to stripe';\nexport var resource = '/stripe/authorize';\n\nvar _ReduxCrudService$get = ReduxCrudService.getActionCrudTypes(resource),\n    _ReduxCrudService$get2 = _slicedToArray(_ReduxCrudService$get.POST, 3),\n    CONNECT_STRIPE_TO_RESTAURANT_REQUEST = _ReduxCrudService$get2[0],\n    CONNECT_STRIPE_TO_RESTAURANT_SUCCESS = _ReduxCrudService$get2[1],\n    CONNECT_STRIPE_TO_RESTAURANT_ERROR = _ReduxCrudService$get2[2];\n\nexport { CONNECT_STRIPE_TO_RESTAURANT_REQUEST, CONNECT_STRIPE_TO_RESTAURANT_SUCCESS, CONNECT_STRIPE_TO_RESTAURANT_ERROR };\nexport var isStripeConnectingSelector = function isStripeConnectingSelector(state) {\n  return state.stripeConnection.isLoading;\n};\nexport var stripeConnectionErrorSelector = function stripeConnectionErrorSelector(state) {\n  return state.stripeConnection.infoMessage;\n};\nexport var connectStripeToResourant = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'POST'\n});\nvar initialState = {\n  infoMessage: null,\n  isLoading: false\n};\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CONNECT_STRIPE_TO_RESTAURANT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          infoMessage: '',\n          isLoading: false\n        });\n      }\n\n    case CONNECT_STRIPE_TO_RESTAURANT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoading: true\n        });\n      }\n\n    case SET_STRIPE_CONNECTING_ERROR_MESSAGE:\n      {\n        return _objectSpread({}, state, {\n          infoMessage: action.payload\n        });\n      }\n\n    case CONNECT_STRIPE_TO_RESTAURANT_ERROR:\n      {\n        return _objectSpread({}, state, {\n          isLoading: false,\n          infoMessage: CONNECTING_TO_STRIPE_ERR_MSG\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport var setStripeConnectionErrorMessage = function setStripeConnectionErrorMessage(msg) {\n  return {\n    type: SET_STRIPE_CONNECTING_ERROR_MESSAGE,\n    payload: msg\n  };\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(SET_STRIPE_CONNECTING_ERROR_MESSAGE, \"SET_STRIPE_CONNECTING_ERROR_MESSAGE\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(CONNECTING_TO_STRIPE_ERR_MSG, \"CONNECTING_TO_STRIPE_ERR_MSG\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(resource, \"resource\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(CONNECT_STRIPE_TO_RESTAURANT_REQUEST, \"CONNECT_STRIPE_TO_RESTAURANT_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(CONNECT_STRIPE_TO_RESTAURANT_SUCCESS, \"CONNECT_STRIPE_TO_RESTAURANT_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(CONNECT_STRIPE_TO_RESTAURANT_ERROR, \"CONNECT_STRIPE_TO_RESTAURANT_ERROR\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(isStripeConnectingSelector, \"isStripeConnectingSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(stripeConnectionErrorSelector, \"stripeConnectionErrorSelector\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(connectStripeToResourant, \"connectStripeToResourant\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(initialState, \"initialState\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  reactHotLoader.register(setStripeConnectionErrorMessage, \"setStripeConnectionErrorMessage\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/ConnectStripeToRestaurant/modules/index.js"],"names":["ReduxCrudService","SET_STRIPE_CONNECTING_ERROR_MESSAGE","CONNECTING_TO_STRIPE_ERR_MSG","resource","getActionCrudTypes","POST","CONNECT_STRIPE_TO_RESTAURANT_REQUEST","CONNECT_STRIPE_TO_RESTAURANT_SUCCESS","CONNECT_STRIPE_TO_RESTAURANT_ERROR","isStripeConnectingSelector","state","stripeConnection","isLoading","stripeConnectionErrorSelector","infoMessage","connectStripeToResourant","resourceAction","method","initialState","reducer","action","type","payload","setStripeConnectionErrorMessage","msg"],"mappings":";;;;;;;;;AAAA,SAASA,gBAAT,QAAiC,WAAjC;AAEA,IAAMC,mCAAmC,GAAG,qCAA5C;AAEA,IAAMC,4BAA4B,GAAG,mEAArC;AAGA,OAAO,IAAMC,QAAQ,GAAG,mBAAjB;;4BAQHH,gBAAgB,CAACI,kBAAjB,CAAoCD,QAApC,C;kEALFE,I;IACIC,oC;IACAC,oC;IACAC,kC;;;AAKN,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAEC,KAAF;AAAA,SAAaA,KAAK,CAACC,gBAAN,CAAuBC,SAApC;AAAA,CAAnC;AACP,OAAO,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAAH,KAAK;AAAA,SAAIA,KAAK,CAACC,gBAAN,CAAuBG,WAA3B;AAAA,CAA3C;AAEP,OAAO,IAAMC,wBAAwB,GAAGf,gBAAgB,CAACgB,cAAjB,CAAgC;AACpEb,EAAAA,QAAQ,EAARA,QADoE;AAEpEc,EAAAA,MAAM,EAAE;AAF4D,CAAhC,CAAjC;AAKP,IAAMC,YAAY,GAAG;AACnBJ,EAAAA,WAAW,EAAE,IADM;AAEnBF,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAKA,OAAO,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCT,KAAiC,uEAAzBQ,YAAyB;AAAA,MAAXE,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKd,oCAAL;AAA2C;AACzC,iCACSG,KADT;AAEMI,UAAAA,WAAW,EAAE,EAFnB;AAGMF,UAAAA,SAAS,EAAE;AAHjB;AAKD;;AAED,SAAKN,oCAAL;AAA2C;AACvC,iCACOI,KADP;AAEIE,UAAAA,SAAS,EAAE;AAFf;AAIH;;AAGD,SAAKX,mCAAL;AAA0C;AACtC,iCACOS,KADP;AAEII,UAAAA,WAAW,EAAEM,MAAM,CAACE;AAFxB;AAIH;;AAED,SAAKd,kCAAL;AAAyC;AACrC,iCACOE,KADP;AAEIE,UAAAA,SAAS,EAAE,KAFf;AAGIE,UAAAA,WAAW,EAAEZ;AAHjB;AAKH;;AAED;AAAS,aAAOQ,KAAP;AAjCb;AAoCH,CArCM;AAuCP,OAAO,IAAMa,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACC,GAAD;AAAA,SAAU;AACrDH,IAAAA,IAAI,EAAEpB,mCAD+C;AAErDqB,IAAAA,OAAO,EAAEE;AAF4C,GAAV;AAAA,CAAxC;;;;;;;;;;;;0BApEDvB,mC;0BAEAC,4B;0BAGOC,Q;0BAIPG,oC;0BACAC,oC;0BACAC,kC;0BAKOC,0B;0BACAI,6B;0BAEAE,wB;0BAKPG,Y;0BAKOC,O;0BAuCAI,+B","sourcesContent":["import { ReduxCrudService } from '/services';\n\nconst SET_STRIPE_CONNECTING_ERROR_MESSAGE = 'SET_STRIPE_CONNECTING_ERROR_MESSAGE';\n\nconst CONNECTING_TO_STRIPE_ERR_MSG = 'Some error has occured while connecting your restaurant to stripe';\n\n\nexport const resource = '/stripe/authorize';\n\nexport const {\n  POST: [\n      CONNECT_STRIPE_TO_RESTAURANT_REQUEST,\n      CONNECT_STRIPE_TO_RESTAURANT_SUCCESS,\n      CONNECT_STRIPE_TO_RESTAURANT_ERROR,\n  ],\n} = ReduxCrudService.getActionCrudTypes(resource);\n\n\nexport const isStripeConnectingSelector = ( state ) => state.stripeConnection.isLoading\nexport const stripeConnectionErrorSelector = state => state.stripeConnection.infoMessage\n\nexport const connectStripeToResourant = ReduxCrudService.resourceAction({\n    resource,\n    method: 'POST'\n});\n\nconst initialState = {\n  infoMessage: null,\n  isLoading: false,\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch( action.type ) {\n\n        case CONNECT_STRIPE_TO_RESTAURANT_SUCCESS: {\n          return {\n                ...state,\n                infoMessage: '',\n                isLoading: false\n            }\n        }\n\n        case CONNECT_STRIPE_TO_RESTAURANT_REQUEST: {\n            return {\n                ...state,\n                isLoading: true\n            }\n        }\n\n\n        case SET_STRIPE_CONNECTING_ERROR_MESSAGE: {\n            return {\n                ...state,\n                infoMessage: action.payload\n            }\n        }\n\n        case CONNECT_STRIPE_TO_RESTAURANT_ERROR: {\n            return {\n                ...state,\n                isLoading: false,\n                infoMessage: CONNECTING_TO_STRIPE_ERR_MSG\n            }\n        }\n\n        default: return state\n\n    }\n};\n\nexport const setStripeConnectionErrorMessage = (msg) => ({\n    type: SET_STRIPE_CONNECTING_ERROR_MESSAGE,\n    payload: msg\n});\n\n"]},"metadata":{},"sourceType":"module"}