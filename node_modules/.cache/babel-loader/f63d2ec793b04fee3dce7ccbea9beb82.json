{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport moment from 'moment';\nimport { createSelector } from 'reselect';\nimport { agentsListSelector } from '../../scenes/Agents/modules';\n\nvar _RestaurantsSliceSelector = function _RestaurantsSliceSelector(_ref) {\n  var restaurants = _ref.restaurants;\n  return restaurants;\n};\n\nexport var restaurantsSelector = function restaurantsSelector(state) {\n  return _RestaurantsSliceSelector(state).data;\n};\nexport var filtersSelector = function filtersSelector(state) {\n  return _RestaurantsSliceSelector(state).filters;\n};\nexport var isRestaurantsLoadingSelector = function isRestaurantsLoadingSelector(state) {\n  return _RestaurantsSliceSelector(state).loading;\n};\nexport var restaurantsCountSelector = function restaurantsCountSelector(state) {\n  return _RestaurantsSliceSelector(state).count;\n};\nexport var managedRestaurantSelector = function managedRestaurantSelector(state) {\n  return _RestaurantsSliceSelector(state).managedRestaurant;\n};\nexport var managedRestaurantIdSelector = createSelector(managedRestaurantSelector, function (restaurant) {\n  return restaurant.id;\n});\nexport var restaurantsListTableDataSelector = createSelector([restaurantsSelector, agentsListSelector], function (restaurants, agents) {\n  return restaurants.map(function (_ref2) {\n    var id = _ref2.id,\n        status = _ref2.status,\n        created_at = _ref2.created_at,\n        subscription = _ref2.subscription,\n        restaurant_name = _ref2.restaurant_name,\n        delivery_method = _ref2.delivery_method,\n        revenue = _ref2.revenue,\n        agent_name = _ref2.agent_name;\n    var agent = agents.find(function (agent) {\n      return agent.label === agent_name;\n    });\n    agent_name = agent && agent.label;\n    revenue = \"$\".concat(revenue);\n    return {\n      name: {\n        restaurant_name: restaurant_name,\n        id: id\n      },\n      revenue: revenue,\n      subscription: subscription,\n      onboarded: moment(created_at).format('YYYY-MM-DD'),\n      agent_name: agent_name,\n      delivery_method: delivery_method,\n      actions: {\n        id: id,\n        status: status\n      }\n    };\n  });\n});\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_RestaurantsSliceSelector, \"_RestaurantsSliceSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js\");\n  reactHotLoader.register(restaurantsSelector, \"restaurantsSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js\");\n  reactHotLoader.register(filtersSelector, \"filtersSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js\");\n  reactHotLoader.register(isRestaurantsLoadingSelector, \"isRestaurantsLoadingSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js\");\n  reactHotLoader.register(restaurantsCountSelector, \"restaurantsCountSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js\");\n  reactHotLoader.register(managedRestaurantSelector, \"managedRestaurantSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js\");\n  reactHotLoader.register(managedRestaurantIdSelector, \"managedRestaurantIdSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js\");\n  reactHotLoader.register(restaurantsListTableDataSelector, \"restaurantsListTableDataSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/modules/restaurants/restaurants.selectors.js"],"names":["moment","createSelector","agentsListSelector","_RestaurantsSliceSelector","restaurants","restaurantsSelector","state","data","filtersSelector","filters","isRestaurantsLoadingSelector","loading","restaurantsCountSelector","count","managedRestaurantSelector","managedRestaurant","managedRestaurantIdSelector","restaurant","id","restaurantsListTableDataSelector","agents","map","status","created_at","subscription","restaurant_name","delivery_method","revenue","agent_name","agent","find","label","name","onboarded","format","actions"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,cAAT,QAA+B,UAA/B;AAEA,SAASC,kBAAT,QAAmC,6BAAnC;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA,MAAGC,WAAH,QAAGA,WAAH;AAAA,SAAqBA,WAArB;AAAA,CAAlC;;AAEA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,KAAK;AAAA,SACtCH,yBAAyB,CAACG,KAAD,CAAzB,CAAiCC,IADK;AAAA,CAAjC;AAEP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAF,KAAK;AAAA,SAClCH,yBAAyB,CAACG,KAAD,CAAzB,CAAiCG,OADC;AAAA,CAA7B;AAEP,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CAAAJ,KAAK;AAAA,SAC/CH,yBAAyB,CAACG,KAAD,CAAzB,CAAiCK,OADc;AAAA,CAA1C;AAEP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAN,KAAK;AAAA,SAC3CH,yBAAyB,CAACG,KAAD,CAAzB,CAAiCO,KADU;AAAA,CAAtC;AAEP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAR,KAAK;AAAA,SAC5CH,yBAAyB,CAACG,KAAD,CAAzB,CAAiCS,iBADW;AAAA,CAAvC;AAGP,OAAO,IAAMC,2BAA2B,GAAGf,cAAc,CACvDa,yBADuD,EAEvD,UAAAG,UAAU;AAAA,SAAIA,UAAU,CAACC,EAAf;AAAA,CAF6C,CAAlD;AAKP,OAAO,IAAMC,gCAAgC,GAAGlB,cAAc,CAC5D,CAACI,mBAAD,EAAsBH,kBAAtB,CAD4D,EAE5D,UAACE,WAAD,EAAcgB,MAAd,EAAyB;AACvB,SAAOhB,WAAW,CAACiB,GAAZ,CACL,iBASM;AAAA,QARJH,EAQI,SARJA,EAQI;AAAA,QAPJI,MAOI,SAPJA,MAOI;AAAA,QANJC,UAMI,SANJA,UAMI;AAAA,QALJC,YAKI,SALJA,YAKI;AAAA,QAJJC,eAII,SAJJA,eAII;AAAA,QAHJC,eAGI,SAHJA,eAGI;AAAA,QAFJC,OAEI,SAFJA,OAEI;AAAA,QADJC,UACI,SADJA,UACI;AACJ,QAAMC,KAAK,GAAGT,MAAM,CAACU,IAAP,CAAY,UAAAD,KAAK;AAAA,aAAIA,KAAK,CAACE,KAAN,KAAgBH,UAApB;AAAA,KAAjB,CAAd;AACAA,IAAAA,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACE,KAA5B;AACAJ,IAAAA,OAAO,cAAOA,OAAP,CAAP;AAEA,WAAO;AACLK,MAAAA,IAAI,EAAE;AACJP,QAAAA,eAAe,EAAfA,eADI;AAEJP,QAAAA,EAAE,EAAFA;AAFI,OADD;AAKLS,MAAAA,OAAO,EAAPA,OALK;AAMLH,MAAAA,YAAY,EAAZA,YANK;AAOLS,MAAAA,SAAS,EAAEjC,MAAM,CAACuB,UAAD,CAAN,CAAmBW,MAAnB,CAA0B,YAA1B,CAPN;AAQLN,MAAAA,UAAU,EAAVA,UARK;AASLF,MAAAA,eAAe,EAAfA,eATK;AAULS,MAAAA,OAAO,EAAE;AACPjB,QAAAA,EAAE,EAAFA,EADO;AAEPI,QAAAA,MAAM,EAANA;AAFO;AAVJ,KAAP;AAeD,GA9BI,CAAP;AAgCD,CAnC2D,CAAvD;;;;;;;;;;0BAlBDnB,yB;0BAEOE,mB;0BAEAG,e;0BAEAE,4B;0BAEAE,wB;0BAEAE,yB;0BAGAE,2B;0BAKAG,gC","sourcesContent":["import moment from 'moment';\nimport { createSelector } from 'reselect';\n\nimport { agentsListSelector } from '../../scenes/Agents/modules';\n\nconst _RestaurantsSliceSelector = ({ restaurants }) => restaurants;\n\nexport const restaurantsSelector = state =>\n  _RestaurantsSliceSelector(state).data;\nexport const filtersSelector = state =>\n  _RestaurantsSliceSelector(state).filters;\nexport const isRestaurantsLoadingSelector = state =>\n  _RestaurantsSliceSelector(state).loading;\nexport const restaurantsCountSelector = state =>\n  _RestaurantsSliceSelector(state).count;\nexport const managedRestaurantSelector = state =>\n  _RestaurantsSliceSelector(state).managedRestaurant;\n\nexport const managedRestaurantIdSelector = createSelector(\n  managedRestaurantSelector,\n  restaurant => restaurant.id,\n);\n\nexport const restaurantsListTableDataSelector = createSelector(\n  [restaurantsSelector, agentsListSelector],\n  (restaurants, agents) => {\n    return restaurants.map(\n      ({\n        id,\n        status,\n        created_at,\n        subscription,\n        restaurant_name,\n        delivery_method,\n        revenue,\n        agent_name,\n      }) => {\n        const agent = agents.find(agent => agent.label === agent_name);\n        agent_name = agent && agent.label;\n        revenue = `$${revenue}`;\n\n        return {\n          name: {\n            restaurant_name,\n            id,\n          },\n          revenue,\n          subscription,\n          onboarded: moment(created_at).format('YYYY-MM-DD'),\n          agent_name,\n          delivery_method,\n          actions: {\n            id,\n            status,\n          },\n        };\n      },\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}