{"ast":null,"code":"var _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Grid, Typography } from '@material-ui/core';\nimport { FormTextField, AppSwitch } from '../..';\nimport { CLIENT_INFO_FORM } from '../constants/form.names';\nimport { paymentMethods, deliveryMethods, orderDeliveryMethods, PHONE_MASK } from '../../../constants';\nimport { clientInfoFormFieldsSelector } from '../selectors';\nimport { checkoutValidations } from '../../../scenes/Checkout/modules';\nimport { managedRestaurantSelector } from '../../../modules/restaurants';\nimport FormMaskTextField from '../../FormMaskTextField';\nvar DELIVERY = orderDeliveryMethods.DELIVERY,\n    PICKUP = orderDeliveryMethods.PICKUP;\nvar PAY_ON_DELIVERY = paymentMethods.PAY_ON_DELIVERY,\n    PAY_ON_PICKUP = paymentMethods.PAY_ON_PICKUP;\n\nfunction ClientInfoForm(_ref) {\n  var deliveryMethod = _ref.deliveryMethod,\n      change = _ref.change,\n      restaurantDeliveryMethod = _ref.restaurantDeliveryMethod;\n  var handleDeliveryMethodChange = useCallback(function (_ref2) {\n    var checked = _ref2.target.checked;\n    var newDeliverymethod = checked ? PICKUP : DELIVERY;\n    var newPaymentMethod = checked ? PAY_ON_PICKUP : PAY_ON_DELIVERY;\n    change('delivery_method', newDeliverymethod);\n    change('payment_method', newPaymentMethod);\n  }, [change]);\n  var isPickup = deliveryMethod === PICKUP;\n  var showSwitch = restaurantDeliveryMethod === deliveryMethods.PICKUP_AND_DELIVERY;\n  var showAddress = !isPickup && restaurantDeliveryMethod !== deliveryMethods.PICKUP_ONLY;\n  return React.createElement(Grid, {\n    container: true,\n    spacing: 16,\n    direction: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subheading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Contacts\"), React.createElement(Grid, {\n    container: true,\n    spacing: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"name\",\n    label: \"Name\",\n    component: FormTextField,\n    fullWidth: true,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"email\",\n    label: \"Email\",\n    component: FormTextField,\n    fullWidth: true,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"phone\",\n    label: \"Phone\",\n    mask: PHONE_MASK,\n    component: FormMaskTextField,\n    fullWidth: true,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })))), showSwitch && React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subheading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Delivery service\"), React.createElement(AppSwitch, {\n    offCaption: \"Delivery\",\n    onCaption: \"Pickup\",\n    onChange: handleDeliveryMethodChange,\n    checked: isPickup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), showAddress && React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subheading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Address\"), React.createElement(Grid, {\n    container: true,\n    spacing: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"city\",\n    label: \"City\",\n    component: FormTextField,\n    fullWidth: true,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"street_address\",\n    label: \"Street\",\n    component: FormTextField,\n    fullWidth: true,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"building\",\n    label: \"Building\",\n    component: FormTextField,\n    fullWidth: true,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"appartment\",\n    label: \"Apartment\",\n    component: FormTextField,\n    fullWidth: true,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subheading\",\n    paragraph: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Comment to order\"), React.createElement(Field, {\n    name: \"comment\",\n    label: \"Comment\",\n    component: FormTextField,\n    multiline: true,\n    rows: 4,\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })));\n}\n\nClientInfoForm.propTypes = {\n  deliveryMethod: PropTypes.string,\n  restaurantDeliveryMethod: PropTypes.string.isRequired,\n  change: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    deliveryMethod: clientInfoFormFieldsSelector(state, 'delivery_method'),\n    restaurantDeliveryMethod: managedRestaurantSelector(state).delivery_method\n  };\n};\n\nvar _default = connect(mapStateToProps)(reduxForm({\n  form: CLIENT_INFO_FORM,\n  enableReinitialize: true,\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: false,\n  updateUnregisteredFields: true,\n  keepDirtyOnReinitialize: true,\n  validate: checkoutValidations\n})(ClientInfoForm));\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(DELIVERY, \"DELIVERY\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js\");\n  reactHotLoader.register(PICKUP, \"PICKUP\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js\");\n  reactHotLoader.register(PAY_ON_DELIVERY, \"PAY_ON_DELIVERY\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js\");\n  reactHotLoader.register(PAY_ON_PICKUP, \"PAY_ON_PICKUP\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js\");\n  reactHotLoader.register(ClientInfoForm, \"ClientInfoForm\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/components/forms/ClientInfoForm/ClientInfoForm.js"],"names":["React","useCallback","PropTypes","reduxForm","Field","connect","Grid","Typography","FormTextField","AppSwitch","CLIENT_INFO_FORM","paymentMethods","deliveryMethods","orderDeliveryMethods","PHONE_MASK","clientInfoFormFieldsSelector","checkoutValidations","managedRestaurantSelector","FormMaskTextField","DELIVERY","PICKUP","PAY_ON_DELIVERY","PAY_ON_PICKUP","ClientInfoForm","deliveryMethod","change","restaurantDeliveryMethod","handleDeliveryMethodChange","checked","target","newDeliverymethod","newPaymentMethod","isPickup","showSwitch","PICKUP_AND_DELIVERY","showAddress","PICKUP_ONLY","propTypes","string","isRequired","func","mapStateToProps","state","delivery_method","form","enableReinitialize","destroyOnUnmount","forceUnregisterOnUnmount","updateUnregisteredFields","keepDirtyOnReinitialize","validate"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,mBAAjC;AAEA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SACEC,cADF,EAEEC,eAFF,EAGEC,oBAHF,EAIEC,UAJF,QAKO,oBALP;AAMA,SAASC,4BAAT,QAA6C,cAA7C;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,yBAAT,QAA0C,8BAA1C;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;IAEQC,Q,GAAqBN,oB,CAArBM,Q;IAAUC,M,GAAWP,oB,CAAXO,M;IACVC,e,GAAmCV,c,CAAnCU,e;IAAiBC,a,GAAkBX,c,CAAlBW,a;;AAEzB,SAASC,cAAT,OAA8E;AAAA,MAApDC,cAAoD,QAApDA,cAAoD;AAAA,MAApCC,MAAoC,QAApCA,MAAoC;AAAA,MAA5BC,wBAA4B,QAA5BA,wBAA4B;AAC5E,MAAMC,0BAA0B,GAAG1B,WAAW,CAC5C,iBAA6B;AAAA,QAAhB2B,OAAgB,SAA1BC,MAA0B,CAAhBD,OAAgB;AAC3B,QAAME,iBAAiB,GAAGF,OAAO,GAAGR,MAAH,GAAYD,QAA7C;AACA,QAAMY,gBAAgB,GAAGH,OAAO,GAAGN,aAAH,GAAmBD,eAAnD;AAEAI,IAAAA,MAAM,CAAC,iBAAD,EAAoBK,iBAApB,CAAN;AACAL,IAAAA,MAAM,CAAC,gBAAD,EAAmBM,gBAAnB,CAAN;AACD,GAP2C,EAQ5C,CAACN,MAAD,CAR4C,CAA9C;AAWA,MAAMO,QAAQ,GAAGR,cAAc,KAAKJ,MAApC;AAEA,MAAMa,UAAU,GACdP,wBAAwB,KAAKd,eAAe,CAACsB,mBAD/C;AAGA,MAAMC,WAAW,GACf,CAACH,QAAD,IAAaN,wBAAwB,KAAKd,eAAe,CAACwB,WAD5D;AAGA,SACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,EAAzB;AAA6B,IAAA,SAAS,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,SAAS,EAAE5B,aAHb;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,QAAQ,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAUE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,SAAS,EAAEA,aAHb;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,QAAQ,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,EAmBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,IAAI,EAAEM,UAHR;AAIE,IAAA,SAAS,EAAEI,iBAJb;AAKE,IAAA,SAAS,MALX;AAME,IAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAnBF,CAFF,CADF,EAkCGe,UAAU,IACT,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE,oBAAC,SAAD;AACE,IAAA,UAAU,EAAC,UADb;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,QAAQ,EAAEN,0BAHZ;AAIE,IAAA,OAAO,EAAEK,QAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAnCJ,EA8CGG,WAAW,IACV,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,SAAS,EAAE3B,aAHb;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,QAAQ,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAUE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,SAAS,EAAEA,aAHb;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,QAAQ,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,EAmBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,SAAS,EAAEA,aAHb;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,QAAQ,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAnBF,EA4BE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,YADP;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,SAAS,EAAEA,aAHb;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,QAAQ,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA5BF,CAFF,CA/CJ,EAyFE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,YAApB;AAAiC,IAAA,SAAS,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAIE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,SAAS,EAAEA,aAHb;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,IAAI,EAAE,CALR;AAME,IAAA,SAAS,MANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAzFF,CADF;AAyGD;;AAEDe,cAAc,CAACc,SAAf,GAA2B;AACzBb,EAAAA,cAAc,EAAEtB,SAAS,CAACoC,MADD;AAEzBZ,EAAAA,wBAAwB,EAAExB,SAAS,CAACoC,MAAV,CAAiBC,UAFlB;AAGzBd,EAAAA,MAAM,EAAEvB,SAAS,CAACsC,IAAV,CAAeD;AAHE,CAA3B;;AAMA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChClB,IAAAA,cAAc,EAAET,4BAA4B,CAAC2B,KAAD,EAAQ,iBAAR,CADZ;AAEhChB,IAAAA,wBAAwB,EAAET,yBAAyB,CAACyB,KAAD,CAAzB,CAAiCC;AAF3B,GAAL;AAAA,CAA7B;;eAKetC,OAAO,CAACoC,eAAD,CAAP,CACbtC,SAAS,CAAC;AACRyC,EAAAA,IAAI,EAAElC,gBADE;AAERmC,EAAAA,kBAAkB,EAAE,IAFZ;AAGRC,EAAAA,gBAAgB,EAAE,KAHV;AAIRC,EAAAA,wBAAwB,EAAE,KAJlB;AAKRC,EAAAA,wBAAwB,EAAE,IALlB;AAMRC,EAAAA,uBAAuB,EAAE,IANjB;AAORC,EAAAA,QAAQ,EAAElC;AAPF,CAAD,CAAT,CAQGO,cARH,CADa,C;;AAAf;;;;;;;;;;0BA7IQJ,Q;0BAAUC,M;0BACVC,e;0BAAiBC,a;0BAEhBC,c;0BAqIHkB,e","sourcesContent":["import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Grid, Typography } from '@material-ui/core';\n\nimport { FormTextField, AppSwitch } from '../..';\nimport { CLIENT_INFO_FORM } from '../constants/form.names';\nimport {\n  paymentMethods,\n  deliveryMethods,\n  orderDeliveryMethods,\n  PHONE_MASK,\n} from '../../../constants';\nimport { clientInfoFormFieldsSelector } from '../selectors';\nimport { checkoutValidations } from '../../../scenes/Checkout/modules';\nimport { managedRestaurantSelector } from '../../../modules/restaurants';\nimport FormMaskTextField from '../../FormMaskTextField';\n\nconst { DELIVERY, PICKUP } = orderDeliveryMethods;\nconst { PAY_ON_DELIVERY, PAY_ON_PICKUP } = paymentMethods;\n\nfunction ClientInfoForm({ deliveryMethod, change, restaurantDeliveryMethod }) {\n  const handleDeliveryMethodChange = useCallback(\n    ({ target: { checked } }) => {\n      const newDeliverymethod = checked ? PICKUP : DELIVERY;\n      const newPaymentMethod = checked ? PAY_ON_PICKUP : PAY_ON_DELIVERY;\n\n      change('delivery_method', newDeliverymethod);\n      change('payment_method', newPaymentMethod);\n    },\n    [change],\n  );\n\n  const isPickup = deliveryMethod === PICKUP;\n\n  const showSwitch =\n    restaurantDeliveryMethod === deliveryMethods.PICKUP_AND_DELIVERY;\n\n  const showAddress =\n    !isPickup && restaurantDeliveryMethod !== deliveryMethods.PICKUP_ONLY;\n\n  return (\n    <Grid container spacing={16} direction=\"column\">\n      <Grid item>\n        <Typography variant=\"subheading\">Contacts</Typography>\n        <Grid container spacing={16}>\n          <Grid item>\n            <Field\n              name=\"name\"\n              label=\"Name\"\n              component={FormTextField}\n              fullWidth\n              required\n            />\n          </Grid>\n          <Grid item>\n            <Field\n              name=\"email\"\n              label=\"Email\"\n              component={FormTextField}\n              fullWidth\n              required\n            />\n          </Grid>\n          <Grid item>\n            <Field\n              name=\"phone\"\n              label=\"Phone\"\n              mask={PHONE_MASK}\n              component={FormMaskTextField}\n              fullWidth\n              required\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {showSwitch && (\n        <Grid item>\n          <Typography variant=\"subheading\">Delivery service</Typography>\n          <AppSwitch\n            offCaption=\"Delivery\"\n            onCaption=\"Pickup\"\n            onChange={handleDeliveryMethodChange}\n            checked={isPickup}\n          />\n        </Grid>\n      )}\n\n      {showAddress && (\n        <Grid item>\n          <Typography variant=\"subheading\">Address</Typography>\n          <Grid container spacing={16}>\n            <Grid item>\n              <Field\n                name=\"city\"\n                label=\"City\"\n                component={FormTextField}\n                fullWidth\n                required\n              />\n            </Grid>\n            <Grid item>\n              <Field\n                name=\"street_address\"\n                label=\"Street\"\n                component={FormTextField}\n                fullWidth\n                required\n              />\n            </Grid>\n            <Grid item>\n              <Field\n                name=\"building\"\n                label=\"Building\"\n                component={FormTextField}\n                fullWidth\n                required\n              />\n            </Grid>\n            <Grid item>\n              <Field\n                name=\"appartment\"\n                label=\"Apartment\"\n                component={FormTextField}\n                fullWidth\n                required\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n      <Grid item>\n        <Typography variant=\"subheading\" paragraph>\n          Comment to order\n        </Typography>\n        <Field\n          name=\"comment\"\n          label=\"Comment\"\n          component={FormTextField}\n          multiline\n          rows={4}\n          fullWidth\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nClientInfoForm.propTypes = {\n  deliveryMethod: PropTypes.string,\n  restaurantDeliveryMethod: PropTypes.string.isRequired,\n  change: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  deliveryMethod: clientInfoFormFieldsSelector(state, 'delivery_method'),\n  restaurantDeliveryMethod: managedRestaurantSelector(state).delivery_method,\n});\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: CLIENT_INFO_FORM,\n    enableReinitialize: true,\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: false,\n    updateUnregisteredFields: true,\n    keepDirtyOnReinitialize: true,\n    validate: checkoutValidations,\n  })(ClientInfoForm),\n);\n"]},"metadata":{},"sourceType":"module"}