{"ast":null,"code":"import _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class,\n    _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/SetRestaurantHoursModal/components/TabContent/TabContent.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { AppSelect } from '/components';\nimport { HelperService } from '/services';\nimport { DayScheduleRow } from '../';\nimport { autobind } from 'core-decorators';\nimport './TabContent.scss';\nexport var TabContent = (_class =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TabContent, _Component);\n\n  function TabContent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabContent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabContent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      copiedGroup: ''\n    };\n    return _this;\n  }\n\n  _createClass(TabContent, [{\n    key: \"onChangeCopyFromTab\",\n    value: function onChangeCopyFromTab(_ref) {\n      var copiedGroup = _ref.copiedGroup;\n      var _this$props = this.props,\n          copyHoursFromPreviousTab = _this$props.copyHoursFromPreviousTab,\n          hoursGroup = _this$props.hoursGroup;\n      this.setState({\n        copiedGroup: copiedGroup\n      });\n      copyHoursFromPreviousTab({\n        copiedGroup: copiedGroup,\n        hoursGroup: hoursGroup\n      });\n    }\n  }, {\n    key: \"getTabSelectOptions\",\n    value: function getTabSelectOptions() {\n      var hoursGroup = this.props.hoursGroup;\n      return ['working', 'away', 'delivery', 'pickup'].filter(function (group) {\n        return group !== hoursGroup;\n      }).map(function (group) {\n        return {\n          value: group,\n          name: HelperService.capitalize(group)\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          hours = _this$props2.hours,\n          setSameDay = _this$props2.setSameDay,\n          daysOptions = _this$props2.daysOptions,\n          hoursGroup = _this$props2.hoursGroup;\n      var copiedGroup = this.state.copiedGroup;\n      var rows = daysOptions.map(function (day, index) {\n        var isClosed = Boolean(hours && hours[hoursGroup] && hours[hoursGroup][day.value] && hours[hoursGroup][day.value].isClosed);\n        return React.createElement(DayScheduleRow, {\n          isClosed: isClosed,\n          daysOptions: daysOptions.filter(function (dayOption) {\n            return dayOption.value !== day.value;\n          }),\n          setSameDay: setSameDay,\n          key: index,\n          starName: \"hours.\".concat(hoursGroup, \".\").concat(day.value, \".start\"),\n          endName: \"hours.\".concat(hoursGroup, \".\").concat(day.value, \".end\"),\n          closedName: \"hours.\".concat(hoursGroup, \".\").concat(day.value, \".isClosed\"),\n          label: day.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      });\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(AppSelect, {\n        onChange: this.onChangeCopyFromTab,\n        value: copiedGroup,\n        className: 'set-hours__copy-tab-select',\n        name: 'copiedGroup',\n        label: 'Copy from tab',\n        variant: 'outlined',\n        options: this.getTabSelectOptions(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), rows);\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return TabContent;\n}(Component), (_applyDecoratedDescriptor(_class.prototype, \"onChangeCopyFromTab\", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, \"onChangeCopyFromTab\"), _class.prototype)), _class);\nTabContent.propTypes = {\n  hoursGroup: PropTypes.string,\n  hours: PropTypes.any,\n  setSameDay: PropTypes.func,\n  daysOptions: PropTypes.array,\n  copyHoursFromPreviousTab: PropTypes.func\n};\nTabContent.defaultProps = {};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(TabContent, \"TabContent\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/SetRestaurantHoursModal/components/TabContent/TabContent.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/scenes/SetRestaurantHoursModal/components/TabContent/TabContent.js"],"names":["React","Component","Fragment","PropTypes","AppSelect","HelperService","DayScheduleRow","autobind","TabContent","state","copiedGroup","props","copyHoursFromPreviousTab","hoursGroup","setState","filter","group","map","value","name","capitalize","hours","setSameDay","daysOptions","rows","day","index","isClosed","Boolean","dayOption","onChangeCopyFromTab","getTabSelectOptions","propTypes","string","any","func","array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { AppSelect } from '/components';\n\nimport { HelperService } from '/services';\nimport { DayScheduleRow } from '../';\nimport { autobind } from 'core-decorators';\n\nimport './TabContent.scss'\n\nexport class TabContent extends Component {\n\n    state = {\n        copiedGroup: ''\n    };\n\n    @autobind\n    onChangeCopyFromTab({copiedGroup}) {\n        const {copyHoursFromPreviousTab, hoursGroup} = this.props;\n\n        this.setState({copiedGroup});\n        copyHoursFromPreviousTab({copiedGroup, hoursGroup});\n    }\n\n    getTabSelectOptions() {\n        const {hoursGroup} = this.props;\n\n        return ['working', 'away', 'delivery', 'pickup']\n            .filter(group => group !== hoursGroup)\n            .map(group => ({value: group, name: HelperService.capitalize(group)}))\n    }\n\n    render() {\n        const {\n            hours,\n            setSameDay,\n            daysOptions,\n            hoursGroup\n        } = this.props;\n        const {copiedGroup} = this.state;\n\n        const rows = daysOptions.map((day, index) => {\n            const isClosed = Boolean(\n                hours &&\n                hours[hoursGroup] &&\n                hours[hoursGroup][day.value] &&\n                hours[hoursGroup][day.value].isClosed\n            );\n\n            return (\n                <DayScheduleRow\n                    isClosed={ isClosed }\n                    daysOptions={ daysOptions.filter(dayOption => dayOption.value !== day.value) }\n                    setSameDay={ setSameDay }\n                    key={ index }\n                    starName={ `hours.${hoursGroup}.${day.value}.start` }\n                    endName={ `hours.${hoursGroup}.${day.value}.end` }\n                    closedName={ `hours.${hoursGroup}.${day.value}.isClosed` }\n                    label={ day.value }\n                />\n            );\n        });\n\n        return (\n            <Fragment>\n                <AppSelect\n                    onChange={ this.onChangeCopyFromTab }\n                    value={ copiedGroup }\n                    className={ 'set-hours__copy-tab-select' }\n                    name={ 'copiedGroup' }\n                    label={ 'Copy from tab' }\n                    variant={ 'outlined' }\n                    options={ this.getTabSelectOptions() }\n                />\n                { rows }\n            </Fragment>\n        )\n    }\n}\n\nTabContent.propTypes = {\n    hoursGroup: PropTypes.string,\n    hours: PropTypes.any,\n    setSameDay: PropTypes.func,\n    daysOptions: PropTypes.array,\n    copyHoursFromPreviousTab: PropTypes.func\n};\n\nTabContent.defaultProps = {};\n\n"]},"metadata":{},"sourceType":"module"}