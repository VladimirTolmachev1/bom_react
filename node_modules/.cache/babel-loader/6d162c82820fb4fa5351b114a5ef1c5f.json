{"ast":null,"code":"import _objectWithoutProperties from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/components/AppFormMaskTextField/AppFormMaskTextField.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MaskedInput from 'react-text-mask';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nvar TextMaskCustom = function TextMaskCustom(props) {\n  var inputRef = props.inputRef,\n      other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return React.createElement(MaskedInput, Object.assign({}, other, {\n    // keepCharPositions\n    // placeholderChar={'\\u2000'}\n    ref: inputRef // showMask\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }));\n};\n\nexport var AppFormMaskTextField = function AppFormMaskTextField(_ref) {\n  var input = _ref.input,\n      onChangeInterseptor = _ref.onChangeInterseptor,\n      className = _ref.className,\n      label = _ref.label,\n      required = _ref.required,\n      mask = _ref.mask,\n      _ref$meta = _ref.meta,\n      touched = _ref$meta.touched,\n      error = _ref$meta.error;\n  return React.createElement(\"div\", {\n    className: className + ' app-form-control__container',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: 'app-form-control',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, label && React.createElement(InputLabel, {\n    htmlFor: \"formatted-text-mask-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, label + (required ? ' * ' : '')), React.createElement(Input, Object.assign({\n    type: 'text',\n    required: required,\n    variant: 'outlined',\n    id: \"formatted-text-mask-input\",\n    error: Boolean(touched && error),\n    inputComponent: TextMaskCustom,\n    inputProps: {\n      mask: mask\n    }\n  }, input, {\n    onChange: function onChange() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var value = args[0].target.value;\n      input.onChange.apply(input, args);\n      onChangeInterseptor && onChangeInterseptor(value);\n    },\n    value: input.value || ' ',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }))), Boolean(touched && error) ? React.createElement(FormHelperText, {\n    className: \"app-form-control__error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, error) : false);\n};\nAppFormMaskTextField.propTypes = {\n  className: PropTypes.string\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(TextMaskCustom, \"TextMaskCustom\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/components/AppFormMaskTextField/AppFormMaskTextField.js\");\n  reactHotLoader.register(AppFormMaskTextField, \"AppFormMaskTextField\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/components/AppFormMaskTextField/AppFormMaskTextField.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/components/AppFormMaskTextField/AppFormMaskTextField.js"],"names":["React","PropTypes","FormHelperText","MaskedInput","Input","InputLabel","FormControl","TextMaskCustom","props","inputRef","other","AppFormMaskTextField","input","onChangeInterseptor","className","label","required","mask","meta","touched","error","Boolean","args","value","target","onChange","propTypes","string"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAAA,MACrBC,QADqB,GACCD,KADD,CACrBC,QADqB;AAAA,MACRC,KADQ,4BACCF,KADD;;AAG5B,SACI,oBAAC,WAAD,oBACSE,KADT;AAEI;AACA;AACA,IAAA,GAAG,EAAGD,QAJV,CAKI;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AASH,CAZD;;AAcA,OAAO,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,OAWO;AAAA,MAVFC,KAUE,QAVFA,KAUE;AAAA,MATFC,mBASE,QATFA,mBASE;AAAA,MARFC,SAQE,QARFA,SAQE;AAAA,MAPFC,KAOE,QAPFA,KAOE;AAAA,MANFC,QAME,QANFA,QAME;AAAA,MALFC,IAKE,QALFA,IAKE;AAAA,uBAJFC,IAIE;AAAA,MAHEC,OAGF,aAHEA,OAGF;AAAA,MAFEC,KAEF,aAFEA,KAEF;AAEvC,SACI;AAAK,IAAA,SAAS,EAAGN,SAAS,GAAG,8BAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAG,kBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,KAAK,IACJ,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,2BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMA,KAAK,IAAIC,QAAQ,GAAG,KAAH,GAAW,EAAvB,CADX,CAFN,EAMI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAG,MADX;AAEI,IAAA,QAAQ,EAAGA,QAFf;AAGI,IAAA,OAAO,EAAG,UAHd;AAII,IAAA,EAAE,EAAC,2BAJP;AAKI,IAAA,KAAK,EAAGK,OAAO,CAACF,OAAO,IAAIC,KAAZ,CALnB;AAMI,IAAA,cAAc,EAAGb,cANrB;AAOI,IAAA,UAAU,EAAG;AACTU,MAAAA,IAAI,EAAJA;AADS;AAPjB,KAUSL,KAVT;AAWI,IAAA,QAAQ,EAAE,oBAAa;AAAA,wCAATU,IAAS;AAATA,QAAAA,IAAS;AAAA;;AACnB,UAAMC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQE,MAAR,CAAeD,KAA7B;AACAX,MAAAA,KAAK,CAACa,QAAN,OAAAb,KAAK,EAAaU,IAAb,CAAL;AACAT,MAAAA,mBAAmB,IAAIA,mBAAmB,CAACU,KAAD,CAA1C;AACH,KAfL;AAgBI,IAAA,KAAK,EAAGX,KAAK,CAACW,KAAN,IAAe,GAhB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANJ,CADJ,EA0BMF,OAAO,CAACF,OAAO,IAAIC,KAAZ,CAAP,GACI,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,yBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsDA,KAAtD,CADJ,GAEI,KA5BV,CADJ;AAkCH,CA/CM;AAiDPT,oBAAoB,CAACe,SAArB,GAAiC;AAC7BZ,EAAAA,SAAS,EAAEb,SAAS,CAAC0B;AADQ,CAAjC;;;;;;;;;;;;0BA/DMpB,c;0BAcOI,oB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nimport MaskedInput from 'react-text-mask';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst TextMaskCustom = props => {\n    const {inputRef, ...other} = props;\n\n    return (\n        <MaskedInput\n            { ...other }\n            // keepCharPositions\n            // placeholderChar={'\\u2000'}\n            ref={ inputRef }\n            // showMask\n        />\n    );\n};\n\nexport const AppFormMaskTextField = ({\n                                         input,\n                                         onChangeInterseptor,\n                                         className,\n                                         label,\n                                         required,\n                                         mask,\n                                         meta: {\n                                             touched,\n                                             error\n                                         }\n                                     }) => {\n\n    return (\n        <div className={ className + ' app-form-control__container' }>\n            <FormControl className={ 'app-form-control' }>\n                {label && (\n                  <InputLabel htmlFor=\"formatted-text-mask-input\">\n                      { label + (required ? ' * ' : '') } \n                  </InputLabel>\n                )}\n                <Input\n                    type={ 'text' }\n                    required={ required }\n                    variant={ 'outlined' }\n                    id=\"formatted-text-mask-input\"\n                    error={ Boolean(touched && error) }\n                    inputComponent={ TextMaskCustom }\n                    inputProps={ {\n                        mask\n                    } }\n                    { ...input }\n                    onChange={(...args) => {\n                        const value = args[0].target.value;\n                        input.onChange(...args);\n                        onChangeInterseptor && onChangeInterseptor(value);\n                    }}\n                    value={ input.value || ' ' }\n                />\n            </FormControl>\n            { Boolean(touched && error)\n                ? <FormHelperText className=\"app-form-control__error\">{ error }</FormHelperText>\n                : false\n            }\n\n        </div>\n    );\n};\n\nAppFormMaskTextField.propTypes = {\n    className: PropTypes.string\n};\n"]},"metadata":{},"sourceType":"module"}