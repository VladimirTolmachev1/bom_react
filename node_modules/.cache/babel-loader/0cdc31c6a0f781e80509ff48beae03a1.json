{"ast":null,"code":"import _defineProperty from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { ReduxCrudService } from '../../../services';\nimport { API_REQUESTS_ABORT } from '../../../modules/core';\nexport var resource = '/agent';\n\nvar _ReduxCrudService$get = ReduxCrudService.getActionCrudTypes(resource),\n    _ReduxCrudService$get2 = _slicedToArray(_ReduxCrudService$get.GET, 3),\n    GET_AGENTS_LIST_REQUEST = _ReduxCrudService$get2[0],\n    GET_AGENTS_LIST_SUCCESS = _ReduxCrudService$get2[1],\n    GET_AGENTS_LIST_ERROR = _ReduxCrudService$get2[2];\n\nexport { GET_AGENTS_LIST_REQUEST, GET_AGENTS_LIST_SUCCESS, GET_AGENTS_LIST_ERROR };\nexport var AGENTS_LIST_FILTERS_CHANGED = \"\".concat(resource, \"/filters/changed\");\n\nvar getInitialState = function getInitialState() {\n  return {\n    loading: false,\n    error: null,\n    filters: {\n      name: ''\n    },\n    data: [],\n    count: 0\n  };\n};\n\nexport var reducer = _defineProperty({\n  name: resource\n}, resource, function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState();\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_AGENTS_LIST_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_AGENTS_LIST_SUCCESS:\n      return _objectSpread({}, state, {\n        count: Number(action.response.count),\n        data: action.response.data,\n        loading: false\n      });\n\n    case GET_AGENTS_LIST_ERROR:\n      return _objectSpread({}, state, {\n        error: action.error,\n        loading: false\n      });\n\n    case AGENTS_LIST_FILTERS_CHANGED:\n      return _objectSpread({}, state, {\n        filters: _objectSpread({}, state.filters, action.filters)\n      });\n\n    default:\n      return state;\n  }\n});\nexport var getAgents = ReduxCrudService.resourceAction({\n  resource: resource,\n  method: 'GET'\n});\nexport function updateFilters(filters) {\n  return {\n    type: AGENTS_LIST_FILTERS_CHANGED,\n    filters: filters\n  };\n}\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [GET_AGENTS_LIST_REQUEST]\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(resource, \"resource\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(GET_AGENTS_LIST_REQUEST, \"GET_AGENTS_LIST_REQUEST\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(GET_AGENTS_LIST_SUCCESS, \"GET_AGENTS_LIST_SUCCESS\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(GET_AGENTS_LIST_ERROR, \"GET_AGENTS_LIST_ERROR\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(AGENTS_LIST_FILTERS_CHANGED, \"AGENTS_LIST_FILTERS_CHANGED\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(getInitialState, \"getInitialState\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(getAgents, \"getAgents\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(updateFilters, \"updateFilters\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n  reactHotLoader.register(abortPageRequests, \"abortPageRequests\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/Agents/modules/agents.modules.js"],"names":["ReduxCrudService","API_REQUESTS_ABORT","resource","getActionCrudTypes","GET","GET_AGENTS_LIST_REQUEST","GET_AGENTS_LIST_SUCCESS","GET_AGENTS_LIST_ERROR","AGENTS_LIST_FILTERS_CHANGED","getInitialState","loading","error","filters","name","data","count","reducer","state","action","type","Number","response","getAgents","resourceAction","method","updateFilters","abortPageRequests","requestTypes"],"mappings":";;;;;;;;;AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AAEA,OAAO,IAAMC,QAAQ,GAAG,QAAjB;;4BAQHF,gBAAgB,CAACG,kBAAjB,CAAoCD,QAApC,C;kEALFE,G;IACEC,uB;IACAC,uB;IACAC,qB;;;AAIJ,OAAO,IAAMC,2BAA2B,aAAMN,QAAN,qBAAjC;;AAEP,IAAMO,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAO;AAC7BC,IAAAA,OAAO,EAAE,KADoB;AAE7BC,IAAAA,KAAK,EAAE,IAFsB;AAG7BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC,KAHoB;AAM7BC,IAAAA,IAAI,EAAE,EANuB;AAO7BC,IAAAA,KAAK,EAAE;AAPsB,GAAP;AAAA,CAAxB;;AAUA,OAAO,IAAMC,OAAO;AAClBH,EAAAA,IAAI,EAAEX;AADY,GAEjBA,QAFiB,cAE4B;AAAA,MAAnCe,KAAmC,uEAA3BR,eAAe,EAAY;AAAA,MAARS,MAAQ;;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,uBAAL;AACE,+BACKY,KADL;AAEEP,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKJ,uBAAL;AACE,+BACKW,KADL;AAEEF,QAAAA,KAAK,EAAEK,MAAM,CAACF,MAAM,CAACG,QAAP,CAAgBN,KAAjB,CAFf;AAGED,QAAAA,IAAI,EAAEI,MAAM,CAACG,QAAP,CAAgBP,IAHxB;AAIEJ,QAAAA,OAAO,EAAE;AAJX;;AAMF,SAAKH,qBAAL;AACE,+BACKU,KADL;AAEEN,QAAAA,KAAK,EAAEO,MAAM,CAACP,KAFhB;AAGED,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKF,2BAAL;AACE,+BACKS,KADL;AAEEL,QAAAA,OAAO,oBACFK,KAAK,CAACL,OADJ,EAEFM,MAAM,CAACN,OAFL;AAFT;;AAOF;AACE,aAAOK,KAAP;AA5BJ;AA8BD,CAjCiB,CAAb;AAoCP,OAAO,IAAMK,SAAS,GAAGtB,gBAAgB,CAACuB,cAAjB,CAAgC;AACvDrB,EAAAA,QAAQ,EAARA,QADuD;AAEvDsB,EAAAA,MAAM,EAAE;AAF+C,CAAhC,CAAlB;AAKP,OAAO,SAASC,aAAT,CAAuBb,OAAvB,EAAgC;AACrC,SAAO;AACLO,IAAAA,IAAI,EAAEX,2BADD;AAELI,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID;AAED,OAAO,SAASc,iBAAT,GAA6B;AAClC,SAAO;AACLP,IAAAA,IAAI,EAAElB,kBADD;AAEL0B,IAAAA,YAAY,EAAE,CAACtB,uBAAD;AAFT,GAAP;AAID;;;;;;;;;;0BA3EYH,Q;0BAITG,uB;0BACAC,uB;0BACAC,qB;0BAISC,2B;0BAEPC,e;0BAUOO,O;0BAoCAM,S;0BAKGG,a;0BAOAC,iB","sourcesContent":["import { ReduxCrudService } from '../../../services';\nimport { API_REQUESTS_ABORT } from '../../../modules/core';\n\nexport const resource = '/agent';\n\nexport const {\n  GET: [\n    GET_AGENTS_LIST_REQUEST,\n    GET_AGENTS_LIST_SUCCESS,\n    GET_AGENTS_LIST_ERROR,\n  ],\n} = ReduxCrudService.getActionCrudTypes(resource);\n\nexport const AGENTS_LIST_FILTERS_CHANGED = `${resource}/filters/changed`;\n\nconst getInitialState = () => ({\n  loading: false,\n  error: null,\n  filters: {\n    name: '',\n  },\n  data: [],\n  count: 0,\n});\n\nexport const reducer = {\n  name: resource,\n  [resource](state = getInitialState(), action) {\n    switch (action.type) {\n      case GET_AGENTS_LIST_REQUEST:\n        return {\n          ...state,\n          loading: true,\n        };\n      case GET_AGENTS_LIST_SUCCESS:\n        return {\n          ...state,\n          count: Number(action.response.count),\n          data: action.response.data,\n          loading: false,\n        };\n      case GET_AGENTS_LIST_ERROR:\n        return {\n          ...state,\n          error: action.error,\n          loading: false,\n        };\n      case AGENTS_LIST_FILTERS_CHANGED:\n        return {\n          ...state,\n          filters: {\n            ...state.filters,\n            ...action.filters,\n          },\n        };\n      default:\n        return state;\n    }\n  },\n};\n\nexport const getAgents = ReduxCrudService.resourceAction({\n  resource,\n  method: 'GET',\n});\n\nexport function updateFilters(filters) {\n  return {\n    type: AGENTS_LIST_FILTERS_CHANGED,\n    filters,\n  };\n}\n\nexport function abortPageRequests() {\n  return {\n    type: API_REQUESTS_ABORT,\n    requestTypes: [GET_AGENTS_LIST_REQUEST],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}