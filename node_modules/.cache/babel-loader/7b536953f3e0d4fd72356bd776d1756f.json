{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/vladimir/workspace/bestonlinemenus-front.loc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { ApiService, MockApiService } from '/services';\nimport { makeApiRequest, logRequest } from '/modules/';\nexport var CALL_API = 'api-request';\nexport var PUT_API_REQUEST_IN_REGISTRY = 'put-api-request-in-registry';\n\nvar _default = function _default(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type !== CALL_API) {\n        return next(action);\n      }\n\n      var request = action.request;\n\n      var _request$types = _slicedToArray(request.types, 3),\n          requestType = _request$types[0],\n          successType = _request$types[1],\n          errorType = _request$types[2],\n          body = request.body,\n          mock = request.mock,\n          logger = request.logger,\n          rest = _objectWithoutProperties(request, [\"types\", \"body\", \"mock\", \"logger\"]);\n\n      var successRequest = function successRequest(response) {\n        if (request.logger) {\n          store.dispatch(logRequest({\n            request: request,\n            response: response,\n            type: 'success'\n          }));\n        }\n\n        if (successType) {\n          return next(_objectSpread({\n            response: response,\n            body: body,\n            type: successType\n          }, rest));\n        }\n      };\n\n      var errorRequest = function errorRequest(response) {\n        if (request.logger) {\n          store.dispatch(logRequest({\n            request: request,\n            response: response,\n            type: 'error'\n          }));\n        }\n\n        if (errorType) {\n          return next(_objectSpread({\n            error: response,\n            body: body\n          }, rest, {\n            type: errorType\n          }));\n        }\n      };\n\n      store.dispatch(makeApiRequest(_objectSpread({\n        type: requestType,\n        body: body\n      }, rest)));\n      var methodKey = request.method.toLowerCase();\n      var apiRequest = mock ? MockApiService[methodKey](mock) : ApiService[methodKey](request);\n      store.dispatch({\n        type: PUT_API_REQUEST_IN_REGISTRY,\n        requestType: requestType,\n        xhr: apiRequest.xhr\n      });\n      apiRequest.promise.then(successRequest, errorRequest);\n      return apiRequest;\n    };\n  };\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(CALL_API, \"CALL_API\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/store/middleware/api.js\");\n  reactHotLoader.register(PUT_API_REQUEST_IN_REGISTRY, \"PUT_API_REQUEST_IN_REGISTRY\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/store/middleware/api.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/vladimir/workspace/bestonlinemenus-front.loc/src/store/middleware/api.js\");\n  leaveModule(module);\n})();\n\n;","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus-front.loc/src/store/middleware/api.js"],"names":["ApiService","MockApiService","makeApiRequest","logRequest","CALL_API","PUT_API_REQUEST_IN_REGISTRY","store","next","action","type","request","types","requestType","successType","errorType","body","mock","logger","rest","successRequest","response","dispatch","errorRequest","error","methodKey","method","toLowerCase","apiRequest","xhr","promise","then"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA2C,WAA3C;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,WAA3C;AAEA,OAAO,IAAMC,QAAQ,GAAG,aAAjB;AACP,OAAO,IAAMC,2BAA2B,GAAG,6BAApC;;eAEQ,kBAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtC,UAAIA,MAAM,CAACC,IAAP,KAAgBL,QAApB,EAA8B;AAC1B,eAAOG,IAAI,CAACC,MAAD,CAAX;AACH;;AAHqC,UAI9BE,OAJ8B,GAIlBF,MAJkB,CAI9BE,OAJ8B;;AAAA,0CAWlCA,OAXkC,CAMlCC,KANkC;AAAA,UAM1BC,WAN0B;AAAA,UAMbC,WANa;AAAA,UAMAC,SANA;AAAA,UAOlCC,IAPkC,GAWlCL,OAXkC,CAOlCK,IAPkC;AAAA,UAQlCC,IARkC,GAWlCN,OAXkC,CAQlCM,IARkC;AAAA,UASlCC,MATkC,GAWlCP,OAXkC,CASlCO,MATkC;AAAA,UAU/BC,IAV+B,4BAWlCR,OAXkC;;AAatC,UAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AAC/B,YAAIV,OAAO,CAACO,MAAZ,EAAoB;AAChBX,UAAAA,KAAK,CAACe,QAAN,CAAelB,UAAU,CAAC;AAAEO,YAAAA,OAAO,EAAPA,OAAF;AAAWU,YAAAA,QAAQ,EAARA,QAAX;AAAqBX,YAAAA,IAAI,EAAE;AAA3B,WAAD,CAAzB;AACH;;AAED,YAAII,WAAJ,EAAiB;AACb,iBAAON,IAAI;AACPa,YAAAA,QAAQ,EAARA,QADO;AAEPL,YAAAA,IAAI,EAAJA,IAFO;AAGPN,YAAAA,IAAI,EAAEI;AAHC,aAIJK,IAJI,EAAX;AAMH;AACJ,OAbD;;AAeA,UAAMI,YAAY,GAAG,SAAfA,YAAe,CAAAF,QAAQ,EAAI;AAC7B,YAAIV,OAAO,CAACO,MAAZ,EAAoB;AAChBX,UAAAA,KAAK,CAACe,QAAN,CAAelB,UAAU,CAAC;AAAEO,YAAAA,OAAO,EAAPA,OAAF;AAAWU,YAAAA,QAAQ,EAARA,QAAX;AAAqBX,YAAAA,IAAI,EAAE;AAA3B,WAAD,CAAzB;AACH;;AAED,YAAIK,SAAJ,EAAe;AACX,iBAAOP,IAAI;AACPgB,YAAAA,KAAK,EAAEH,QADA;AAEPL,YAAAA,IAAI,EAAJA;AAFO,aAGJG,IAHI;AAIPT,YAAAA,IAAI,EAAEK;AAJC,aAAX;AAMH;AACJ,OAbD;;AAeAR,MAAAA,KAAK,CAACe,QAAN,CAAenB,cAAc;AAAGO,QAAAA,IAAI,EAAEG,WAAT;AAAsBG,QAAAA,IAAI,EAAJA;AAAtB,SAA+BG,IAA/B,EAA7B;AAEA,UAAMM,SAAS,GAAGd,OAAO,CAACe,MAAR,CAAeC,WAAf,EAAlB;AACA,UAAMC,UAAU,GAAGX,IAAI,GACjBf,cAAc,CAACuB,SAAD,CAAd,CAA0BR,IAA1B,CADiB,GAEjBhB,UAAU,CAACwB,SAAD,CAAV,CAAsBd,OAAtB,CAFN;AAIAJ,MAAAA,KAAK,CAACe,QAAN,CAAe;AACXZ,QAAAA,IAAI,EAAEJ,2BADK;AAEXO,QAAAA,WAAW,EAAXA,WAFW;AAGXgB,QAAAA,GAAG,EAAED,UAAU,CAACC;AAHL,OAAf;AAMAD,MAAAA,UAAU,CAACE,OAAX,CAAmBC,IAAnB,CAAwBX,cAAxB,EAAwCG,YAAxC;AAEA,aAAOK,UAAP;AACH,KA3D2B;AAAA,GAAR;AAAA,C;;AAApB;;;;;;;;;;;;0BAHavB,Q;0BACAC,2B","sourcesContent":["import { ApiService, MockApiService } from '/services';\nimport { makeApiRequest, logRequest } from '/modules/';\n\nexport const CALL_API = 'api-request';\nexport const PUT_API_REQUEST_IN_REGISTRY = 'put-api-request-in-registry';\n\nexport default store => next => action => {\n    if (action.type !== CALL_API) {\n        return next(action);\n    }\n    const { request } = action;\n    const {\n        types: [requestType, successType, errorType],\n        body,\n        mock,\n        logger,\n        ...rest\n    } = request;\n\n    const successRequest = response => {\n        if (request.logger) {\n            store.dispatch(logRequest({ request, response, type: 'success' }));\n        }\n\n        if (successType) {\n            return next({\n                response,\n                body,\n                type: successType,\n                ...rest\n            });\n        }\n    };\n\n    const errorRequest = response => {\n        if (request.logger) {\n            store.dispatch(logRequest({ request, response, type: 'error' }));\n        }\n\n        if (errorType) {\n            return next({\n                error: response,\n                body,\n                ...rest,\n                type: errorType\n            });\n        }\n    };\n\n    store.dispatch(makeApiRequest({ type: requestType, body, ...rest }));\n\n    const methodKey = request.method.toLowerCase();\n    const apiRequest = mock\n        ? MockApiService[methodKey](mock)\n        : ApiService[methodKey](request);\n\n    store.dispatch({\n        type: PUT_API_REQUEST_IN_REGISTRY,\n        requestType,\n        xhr: apiRequest.xhr\n    });\n\n    apiRequest.promise.then(successRequest, errorRequest);\n\n    return apiRequest;\n};\n"]},"metadata":{},"sourceType":"module"}