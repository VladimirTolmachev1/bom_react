{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { createSelector } from 'reselect';\nimport { resource } from './zip-code-autocomplete.modules';\nexport var _zipcodeAutocompleteSliceSelector = function _zipcodeAutocompleteSliceSelector(state) {\n  return state[resource];\n};\nexport var zipcodesListSelector = createSelector([_zipcodeAutocompleteSliceSelector], function (slice) {\n  return slice.data.map(function (_ref) {\n    var zipcode = _ref.zipcode,\n        city = _ref.city,\n        state = _ref.state,\n        country = _ref.country,\n        id = _ref.id;\n    return {\n      label: \"\".concat(zipcode, \" \").concat(city, \" \").concat(state, \" \").concat(country),\n      value: id,\n      city: city,\n      state: state,\n      zipcode: zipcode\n    };\n  });\n});\nexport var zipcodesFiltersSelector = function zipcodesFiltersSelector(state) {\n  return _zipcodeAutocompleteSliceSelector(state).filters;\n};\nexport var zipcodesLoadingSelector = function zipcodesLoadingSelector(state) {\n  return _zipcodeAutocompleteSliceSelector(state).loading;\n};\nexport var zipcodesCountSelector = function zipcodesCountSelector(state) {\n  return _zipcodeAutocompleteSliceSelector(state).count;\n};\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_zipcodeAutocompleteSliceSelector, \"_zipcodeAutocompleteSliceSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ZipCodeAutoComplete/modules/zip-code-autocomplete.selectors.js\");\n  reactHotLoader.register(zipcodesListSelector, \"zipcodesListSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ZipCodeAutoComplete/modules/zip-code-autocomplete.selectors.js\");\n  reactHotLoader.register(zipcodesFiltersSelector, \"zipcodesFiltersSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ZipCodeAutoComplete/modules/zip-code-autocomplete.selectors.js\");\n  reactHotLoader.register(zipcodesLoadingSelector, \"zipcodesLoadingSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ZipCodeAutoComplete/modules/zip-code-autocomplete.selectors.js\");\n  reactHotLoader.register(zipcodesCountSelector, \"zipcodesCountSelector\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ZipCodeAutoComplete/modules/zip-code-autocomplete.selectors.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/scenes/ZipCodeAutoComplete/modules/zip-code-autocomplete.selectors.js"],"names":["createSelector","resource","_zipcodeAutocompleteSliceSelector","state","zipcodesListSelector","slice","data","map","zipcode","city","country","id","label","value","zipcodesFiltersSelector","filters","zipcodesLoadingSelector","loading","zipcodesCountSelector","count"],"mappings":";;;;;AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,QAAT,QAAyB,iCAAzB;AAEA,OAAO,IAAMC,iCAAiC,GAAG,SAApCA,iCAAoC,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACF,QAAD,CAAT;AAAA,CAA/C;AACP,OAAO,IAAMG,oBAAoB,GAAGJ,cAAc,CAChD,CAACE,iCAAD,CADgD,EAEhD,UAAAG,KAAK,EAAI;AACP,SAAOA,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAe;AAAA,QAAGC,OAAH,QAAGA,OAAH;AAAA,QAAYC,IAAZ,QAAYA,IAAZ;AAAA,QAAkBN,KAAlB,QAAkBA,KAAlB;AAAA,QAAyBO,OAAzB,QAAyBA,OAAzB;AAAA,QAAkCC,EAAlC,QAAkCA,EAAlC;AAAA,WAA4C;AAChEC,MAAAA,KAAK,YAAKJ,OAAL,cAAgBC,IAAhB,cAAwBN,KAAxB,cAAiCO,OAAjC,CAD2D;AAEhEG,MAAAA,KAAK,EAAEF,EAFyD;AAGhEF,MAAAA,IAAI,EAAJA,IAHgE;AAIhEN,MAAAA,KAAK,EAALA,KAJgE;AAKhEK,MAAAA,OAAO,EAAPA;AALgE,KAA5C;AAAA,GAAf,CAAP;AAOD,CAV+C,CAA3C;AAaP,OAAO,IAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAX,KAAK;AAAA,SAC1CD,iCAAiC,CAACC,KAAD,CAAjC,CAAyCY,OADC;AAAA,CAArC;AAEP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAb,KAAK;AAAA,SAC1CD,iCAAiC,CAACC,KAAD,CAAjC,CAAyCc,OADC;AAAA,CAArC;AAEP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAf,KAAK;AAAA,SACxCD,iCAAiC,CAACC,KAAD,CAAjC,CAAyCgB,KADD;AAAA,CAAnC;;;;;;;;;;0BAlBMjB,iC;0BACAE,oB;0BAaAU,uB;0BAEAE,uB;0BAEAE,qB","sourcesContent":["import { createSelector } from 'reselect';\nimport { resource } from './zip-code-autocomplete.modules';\n\nexport const _zipcodeAutocompleteSliceSelector = state => state[resource];\nexport const zipcodesListSelector = createSelector(\n  [_zipcodeAutocompleteSliceSelector],\n  slice => {\n    return slice.data.map(({ zipcode, city, state, country, id }) => ({\n      label: `${zipcode} ${city} ${state} ${country}`,\n      value: id,\n      city,\n      state,\n      zipcode,\n    }));\n  },\n);\n\nexport const zipcodesFiltersSelector = state =>\n  _zipcodeAutocompleteSliceSelector(state).filters;\nexport const zipcodesLoadingSelector = state =>\n  _zipcodeAutocompleteSliceSelector(state).loading;\nexport const zipcodesCountSelector = state =>\n  _zipcodeAutocompleteSliceSelector(state).count;\n"]},"metadata":{},"sourceType":"module"}