{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { CALL_API } from '../../store/middleware/api';\nexport var ReduxCrudService =\n/*#__PURE__*/\nfunction () {\n  function ReduxCrudService() {\n    _classCallCheck(this, ReduxCrudService);\n  }\n\n  _createClass(ReduxCrudService, null, [{\n    key: \"getActionsTypesByHttpMethod\",\n    value: function getActionsTypesByHttpMethod(_ref) {\n      var method = _ref.method,\n          resource = _ref.resource;\n      return ReduxCrudService.getActionCrudTypes(resource)[method];\n    }\n  }, {\n    key: \"getActionCrudTypes\",\n    value: function getActionCrudTypes(resource) {\n      return {\n        POST: [\"\".concat(resource, \"/post/request\"), \"\".concat(resource, \"/post/success\"), \"\".concat(resource, \"/post/error\")],\n        GET: [\"\".concat(resource, \"/get/request\"), \"\".concat(resource, \"/get/success\"), \"\".concat(resource, \"/get/error\")],\n        GET_BY_ID: [\"\".concat(resource, \"/get/by-id/request\"), \"\".concat(resource, \"/get/by-id/success\"), \"\".concat(resource, \"/get/by-id/error\")],\n        PATCH: [\"\".concat(resource, \"/patch/request\"), \"\".concat(resource, \"/patch/success\"), \"\".concat(resource, \"/patch/error\")],\n        PUT: [\"\".concat(resource, \"/put/request\"), \"\".concat(resource, \"/put/success\"), \"\".concat(resource, \"/put/error\")],\n        DELETE: [\"\".concat(resource, \"/delete/request\"), \"\".concat(resource, \"/delete/success\"), \"\".concat(resource, \"/delete/error\")]\n      };\n    }\n  }, {\n    key: \"resourceAction\",\n    value: function resourceAction(_ref2) {\n      var resource = _ref2.resource,\n          method = _ref2.method,\n          initParams = _objectWithoutProperties(_ref2, [\"resource\", \"method\"]);\n\n      return function () {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var _ref3$body = _ref3.body,\n            body = _ref3$body === void 0 ? {} : _ref3$body,\n            rest = _objectWithoutProperties(_ref3, [\"body\"]);\n\n        return {\n          type: CALL_API,\n          request: _objectSpread({\n            endpoint: resource + (initParams.byId ? \"/\".concat(rest.id) : ''),\n            method: method,\n            types: ReduxCrudService.getActionsTypesByHttpMethod({\n              method: initParams.byId ? 'GET_BY_ID' : method,\n              resource: resource\n            }),\n            body: body\n          }, initParams, rest)\n        };\n      };\n    }\n  }]);\n\n  return ReduxCrudService;\n}();\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ReduxCrudService, \"ReduxCrudService\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/services/ReduxCrudService/ReduxCrudService.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/services/ReduxCrudService/ReduxCrudService.js"],"names":["CALL_API","ReduxCrudService","method","resource","getActionCrudTypes","POST","GET","GET_BY_ID","PATCH","PUT","DELETE","initParams","body","rest","type","request","endpoint","byId","id","types","getActionsTypesByHttpMethod"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,4BAAzB;AAEA,WAAaC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,sDAC2D;AAAA,UAApBC,MAAoB,QAApBA,MAAoB;AAAA,UAAZC,QAAY,QAAZA,QAAY;AACvD,aAAOF,gBAAgB,CAACG,kBAAjB,CAAoCD,QAApC,EAA8CD,MAA9C,CAAP;AACD;AAHH;AAAA;AAAA,uCAK4BC,QAL5B,EAKsC;AAClC,aAAO;AACLE,QAAAA,IAAI,EAAE,WACDF,QADC,8BAEDA,QAFC,8BAGDA,QAHC,iBADD;AAMLG,QAAAA,GAAG,EAAE,WACAH,QADA,6BAEAA,QAFA,6BAGAA,QAHA,gBANA;AAWLI,QAAAA,SAAS,EAAE,WACNJ,QADM,mCAENA,QAFM,mCAGNA,QAHM,sBAXN;AAgBLK,QAAAA,KAAK,EAAE,WACFL,QADE,+BAEFA,QAFE,+BAGFA,QAHE,kBAhBF;AAqBLM,QAAAA,GAAG,EAAE,WACAN,QADA,6BAEAA,QAFA,6BAGAA,QAHA,gBArBA;AA0BLO,QAAAA,MAAM,EAAE,WACHP,QADG,gCAEHA,QAFG,gCAGHA,QAHG;AA1BH,OAAP;AAgCD;AAtCH;AAAA;AAAA,0CAwC6D;AAAA,UAAnCA,QAAmC,SAAnCA,QAAmC;AAAA,UAAzBD,MAAyB,SAAzBA,MAAyB;AAAA,UAAdS,UAAc;;AACzD,aAAO,YAAiC;AAAA,wFAAP,EAAO;;AAAA,+BAA9BC,IAA8B;AAAA,YAA9BA,IAA8B,2BAAvB,EAAuB;AAAA,YAAhBC,IAAgB;;AACtC,eAAO;AACLC,UAAAA,IAAI,EAAEd,QADD;AAELe,UAAAA,OAAO;AACLC,YAAAA,QAAQ,EAAEb,QAAQ,IAAIQ,UAAU,CAACM,IAAX,cAAsBJ,IAAI,CAACK,EAA3B,IAAkC,EAAtC,CADb;AAELhB,YAAAA,MAAM,EAANA,MAFK;AAGLiB,YAAAA,KAAK,EAAElB,gBAAgB,CAACmB,2BAAjB,CAA6C;AAClDlB,cAAAA,MAAM,EAAES,UAAU,CAACM,IAAX,GAAkB,WAAlB,GAAgCf,MADU;AAElDC,cAAAA,QAAQ,EAARA;AAFkD,aAA7C,CAHF;AAOLS,YAAAA,IAAI,EAAJA;AAPK,aAQFD,UARE,EASFE,IATE;AAFF,SAAP;AAcD,OAfD;AAgBD;AAzDH;;AAAA;AAAA;;;;;;;;;;0BAAaZ,gB","sourcesContent":["import { CALL_API } from '../../store/middleware/api';\n\nexport class ReduxCrudService {\n  static getActionsTypesByHttpMethod({ method, resource }) {\n    return ReduxCrudService.getActionCrudTypes(resource)[method];\n  }\n\n  static getActionCrudTypes(resource) {\n    return {\n      POST: [\n        `${resource}/post/request`,\n        `${resource}/post/success`,\n        `${resource}/post/error`,\n      ],\n      GET: [\n        `${resource}/get/request`,\n        `${resource}/get/success`,\n        `${resource}/get/error`,\n      ],\n      GET_BY_ID: [\n        `${resource}/get/by-id/request`,\n        `${resource}/get/by-id/success`,\n        `${resource}/get/by-id/error`,\n      ],\n      PATCH: [\n        `${resource}/patch/request`,\n        `${resource}/patch/success`,\n        `${resource}/patch/error`,\n      ],\n      PUT: [\n        `${resource}/put/request`,\n        `${resource}/put/success`,\n        `${resource}/put/error`,\n      ],\n      DELETE: [\n        `${resource}/delete/request`,\n        `${resource}/delete/success`,\n        `${resource}/delete/error`,\n      ],\n    };\n  }\n\n  static resourceAction({ resource, method, ...initParams }) {\n    return ({ body = {}, ...rest } = {}) => {\n      return {\n        type: CALL_API,\n        request: {\n          endpoint: resource + (initParams.byId ? `/${rest.id}` : ''),\n          method,\n          types: ReduxCrudService.getActionsTypesByHttpMethod({\n            method: initParams.byId ? 'GET_BY_ID' : method,\n            resource,\n          }),\n          body,\n          ...initParams,\n          ...rest,\n        },\n      };\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}