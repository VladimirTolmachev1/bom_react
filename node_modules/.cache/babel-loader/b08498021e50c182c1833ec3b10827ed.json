{"ast":null,"code":"import _objectSpread from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport { ApiService, MockApiService } from '../../services';\nimport { makeApiRequest, logRequest } from '../../modules/core';\nimport { showToast } from '../../scenes/Toasts/modules';\nimport { ApiResponseService } from '../../services/ApiResponseService/ApiResponseService';\nexport var CALL_API = 'api-request';\nexport var PUT_API_REQUEST_IN_REGISTRY = 'put-api-request-in-registry';\n\nvar _default = function _default(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type !== CALL_API) {\n        return next(action);\n      }\n\n      var request = action.request;\n\n      var _request$types = _slicedToArray(request.types, 3),\n          requestType = _request$types[0],\n          successType = _request$types[1],\n          errorType = _request$types[2],\n          _request$responseConv = request.responseConverter,\n          responseConverter = _request$responseConv === void 0 ? function (response) {\n        return response;\n      } : _request$responseConv,\n          body = request.body,\n          mock = request.mock,\n          logger = request.logger,\n          rest = _objectWithoutProperties(request, [\"types\", \"responseConverter\", \"body\", \"mock\", \"logger\"]);\n\n      var successRequest = function successRequest(response) {\n        if (request.logger) {\n          store.dispatch(logRequest({\n            request: request,\n            response: response,\n            type: 'success'\n          }));\n        }\n\n        if (successType) {\n          return next(_objectSpread({\n            response: responseConverter(response),\n            body: body,\n            type: successType\n          }, rest));\n        }\n      };\n\n      var errorRequest = function errorRequest(response) {\n        var clientErrorLog = request.logger && request.logger.error;\n        var responseErrorLog = ApiResponseService.error(response);\n        var errorTxt = responseErrorLog || clientErrorLog;\n\n        if (errorTxt) {\n          store.dispatch(showToast({\n            text: errorTxt,\n            type: 'error'\n          }));\n        }\n\n        if (request.logger) {\n          store.dispatch(logRequest({\n            request: request,\n            response: response,\n            type: 'error'\n          }));\n        }\n\n        if (errorType) {\n          return next(_objectSpread({\n            error: response,\n            body: body\n          }, rest, {\n            type: errorType\n          }));\n        }\n      };\n\n      store.dispatch(makeApiRequest(_objectSpread({\n        type: requestType,\n        body: body\n      }, rest)));\n      var methodKey = request.method.toLowerCase();\n      var apiRequest = mock ? MockApiService[methodKey](mock) : ApiService[methodKey](request);\n      store.dispatch({\n        type: PUT_API_REQUEST_IN_REGISTRY,\n        requestType: requestType,\n        xhr: apiRequest.xhr\n      });\n      apiRequest.promise.then(successRequest, errorRequest);\n      return apiRequest;\n    };\n  };\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(CALL_API, \"CALL_API\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/store/middleware/api.js\");\n  reactHotLoader.register(PUT_API_REQUEST_IN_REGISTRY, \"PUT_API_REQUEST_IN_REGISTRY\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/store/middleware/api.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/store/middleware/api.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/vladimir/workspace/bestonlinemenus.loc/frontend/src/store/middleware/api.js"],"names":["ApiService","MockApiService","makeApiRequest","logRequest","showToast","ApiResponseService","CALL_API","PUT_API_REQUEST_IN_REGISTRY","store","next","action","type","request","types","requestType","successType","errorType","responseConverter","response","body","mock","logger","rest","successRequest","dispatch","errorRequest","clientErrorLog","error","responseErrorLog","errorTxt","text","methodKey","method","toLowerCase","apiRequest","xhr","promise","then"],"mappings":"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","sourcesContent":["import { ApiService, MockApiService } from '../../services';\nimport { makeApiRequest, logRequest } from '../../modules/core';\nimport { showToast } from '../../scenes/Toasts/modules';\nimport { ApiResponseService } from '../../services/ApiResponseService/ApiResponseService';\n\nexport const CALL_API = 'api-request';\nexport const PUT_API_REQUEST_IN_REGISTRY = 'put-api-request-in-registry';\n\nexport default store => next => action => {\n  if (action.type !== CALL_API) {\n    return next(action);\n  }\n\n  const { request } = action;\n\n  const {\n    types: [requestType, successType, errorType],\n    responseConverter = response => response,\n    body,\n    mock,\n    logger,\n    ...rest\n  } = request;\n\n  const successRequest = response => {\n    if (request.logger) {\n      store.dispatch(logRequest({ request, response, type: 'success' }));\n    }\n\n    if (successType) {\n      return next({\n        response: responseConverter(response),\n        body,\n        type: successType,\n        ...rest,\n      });\n    }\n  };\n\n  const errorRequest = response => {\n    const clientErrorLog = request.logger && request.logger.error;\n    const responseErrorLog = ApiResponseService.error(response);\n    const errorTxt = responseErrorLog || clientErrorLog;\n\n    if (errorTxt) {\n      store.dispatch(showToast({ text: errorTxt, type: 'error' }));\n    }\n\n    if (request.logger) {\n      store.dispatch(logRequest({ request, response, type: 'error' }));\n    }\n\n    if (errorType) {\n      return next({\n        error: response,\n        body,\n        ...rest,\n        type: errorType,\n      });\n    }\n  };\n\n  store.dispatch(makeApiRequest({ type: requestType, body, ...rest }));\n\n  const methodKey = request.method.toLowerCase();\n  const apiRequest = mock\n    ? MockApiService[methodKey](mock)\n    : ApiService[methodKey](request);\n\n  store.dispatch({\n    type: PUT_API_REQUEST_IN_REGISTRY,\n    requestType,\n    xhr: apiRequest.xhr,\n  });\n\n  apiRequest.promise.then(successRequest, errorRequest);\n\n  return apiRequest;\n};\n"]},"metadata":{},"sourceType":"module"}